**Eval

import com.github.jlangch.venice.Venice;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval("(+ 1 2)");
   }
}


**Passing parameters

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.Parameters;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval(
                         "(+ x y 3)",
                         Parameters.of("x", 6, "y", 3L));
   }
}


**Precompiled

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.PreCompiled;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      PreCompiled precompiled = venice.precompile("example", "(+ 1 x)");

      for(int ii=0; ii<100; ii++) {
         venice.eval(precompiled, Parameters.of("x", ii));
      }
   }
}


**Java Interop

import java.time.ZonedDateTime;
import com.github.jlangch.venice.Venice;

public class Example {
   public static void main(String[] args) {
      Venice venice = new Venice();

      Long val = (Long)venice.eval("(. :java.lang.Math :min 20 30)");

      ZonedDateTime ts = (ZonedDateTime)venice.eval(
                             "(. (. :java.time.ZonedDateTime :now) :plusDays 5)");
   }
}


**Sandbox

import com.github.jlangch.venice.Venice;
import com.github.jlangch.venice.javainterop.*;

public class Example {
   public static void main(String[] args) {
      final IInterceptor interceptor =
          new SandboxInterceptor(
              new SandboxRules()
                    .rejectAllVeniceIoFunctions()
                    .allowAccessToStandardSystemProperties()
                    .add(
                      "java.lang.Math:min", 
                      "java.time.ZonedDateTime:*", 
                      "java.util.ArrayList:new",
                      "java.util.ArrayList:add"));
      
      final Venice venice = new Venice(interceptor);
      
      // => OK (static method)
      venice.eval("(. :java.lang.Math :min 20 30)"); 
          
      // => OK (constructor & instance method)
      venice.eval("(. (. :java.time.ZonedDateTime :now) :plusDays 5))"); 
       
      // => OK (constructor & instance method)
      venice.eval(
          "(doto (. :java.util.ArrayList :new)  " +
          "      (. :add 1)                     " +
          "      (. :add 2))                    ");
      
      // => FAIL (invoking non whitelisted static method)
      venice.eval("(. :java.lang.System :exit 0)"); 
      
      // => FAIL (invoking rejected Venice I/O function)
      venice.eval("(io/slurp \"/tmp/file\")"); 
      
      // => FAIL (accessing non whitelisted system property)
      venice.eval("(system-prop \"db.password\")"); 
   }
}
