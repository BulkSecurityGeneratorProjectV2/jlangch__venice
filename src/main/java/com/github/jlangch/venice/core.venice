;; Venice core macros & functions

(defmacro
   { :arglists '("(comment & body)")
     :doc "Ignores body, yields nil" }
    
   comment [& body] nil)


(defmacro 
   { :arglists '("(assert expr)" "(assert expr message)")
     :doc "Evaluates expr and throws an exception if it does not evaluate to logical true." }

   assert [expr message]
   `(if ~message
       (when-not ~expr
           (throw (. :com.github.jlangch.venice.AssertionException 
                     :new 
                     (str "Assert failed (" ~message "): " (pr-str '~expr)))))
       (when-not ~expr
           (throw (. :com.github.jlangch.venice.AssertionException 
                     :new 
                     (str "Assert failed: " (pr-str '~expr)))))
    ))
    

(defmacro 
   { :arglists '("(and x)" "(and x & next)")
     :doc "Ands the predicate forms" }

   and [x & next]
    (let [arity_ (inc (count next))]
        `(if (== 1 ~arity_)
            ~x  
            (let [cond_ ~x]
                (if cond_ (and ~@next) cond_)))))


(defmacro 
   { :arglists '("(or x)" "(or x & next)")
     :doc "Ors the predicate forms" }

   or [x & next]
    (let [arity_ (inc (count next))]
        `(if (== 1 ~arity_)
            ~x 
            (let [cond_ ~x]
                (if cond_ cond_ (or ~@next))))))


(defmacro 
   { :arglists '("(cond & clauses)")
     :doc "Takes a set of test/expr pairs. It evaluates each test one at a time. If a test returns logical true, cond evaluates and returns the value of the corresponding expr and doesn't evaluate any of the other tests or exprs. (cond) returns nil." 
     :examples '("(do 
                 |   (let [n 5]
                 |        (cond
                 |           (< n 0) \"negative\"
                 |           (> n 0) \"positive\"
                 |           :else \"zero\")))" ) }
 
   cond [& clauses]
    (when clauses 
        (list 'if (first clauses) 
            (if (rest clauses) 
                (second clauses) 
                (throw "cond requires an even number of forms")) 
            (cons 'cond (rest (rest clauses))))))


(defmacro 
   { :arglists '("(when test & body)")
     :doc "Evaluates test. If logical true, evaluates body in an implicit do." }

   when [test & body]
    (list 'if test (cons 'do body)))


(defmacro 
   { :arglists '("(when test & body)")
     :doc "Evaluates test. If logical false, evaluates body in an implicit do." }

   when-not [test & body]
    (list 'if test nil (cons 'do body)))


(defmacro 
   { :arglists '("(if-let bindings then)")
     :doc "bindings is a vector with 2 elements: binding-form test. \nIf test is true, evaluates then with binding-form bound to the value of test, if not, yields else" }

   if-let [bindings then else]
   (let [form (first bindings) tst (second bindings)]
     `(let [temp_ ~tst]
        (if temp_
          (let [~form temp_]
            ~then)
          ~else))))


(defmacro 
   { :arglists '("(dotimes bindings & body)")
     :doc "Repeatedly executes body with name bound to integers from 0 through n-1." }

   dotimes [bindings & body]
    (let [i (first bindings) 
          n (second bindings)] 
       `(let [k (long ~n)] 
           (loop [~i 0] 
              (when (< ~i k) 
                 ~@body 
                 (recur (inc ~i)))))))


(defmacro 
   { :arglists '("(while test & body)")
     :doc "Repeatedly executes body while test expression is true. Presumes some side-effect will cause test to become false/nil. Returns nil" }

   while [test & body]
    `(loop [] 
        (when ~test 
            ~@body 
            (recur))))


(defmacro 
   { :arglists '("(doto x & forms)")
     :doc "Evaluates x then calls all of the methods and functions with the value of x supplied at the front of the given arguments. The forms are evaluated in order. Returns x." 
     :examples '("(doto (. :java.util.HashMap :new)
                 |      (. :put :a 1)
                 |      (. :put :b 2))" ) }

   doto [x & forms]
    (let [gx (gensym)] 
       `(let [~gx ~x] 
          ~@(map (fn [f] `(~(first f) ~gx ~@(rest f))) forms) 
          ~gx)))


(defmacro 
   { :arglists '("(-> x & forms)")
     :doc "Threads the expr through the forms. Inserts x as the second item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the second item in second form, etc." 
     :examples '("(-> 5 (+ 3) (/ 2) (- 1))"
     
                 "(do
                 |   (def person 
                 |        {:name \"Peter Meier\"
                 |         :address {:street \"Lindenstrasse 45\"
                 |                   :city \"Bern\"
                 |                   :zip 3000}})
                 |
                 |   (-> person :address :street)) " ) }

   -> [x & forms]
    (loop [x x, forms forms]
        (if forms
            (let [form (first forms)
                  threaded (if (list? form)
                               `(~(first form) ~x ~@(empty-to-nil(rest form)))
                               (list form x))]
               (recur threaded (empty-to-nil(rest forms))))
            x)))


(defmacro 
   { :arglists '("(->> x & forms)")
     :doc "Threads the expr through the forms. Inserts x as the last item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the last item in second form, etc." 
     :examples '("(->> 5 (+ 3) (/ 32) (- 1))"

                 "(->> [ {:a 1 :b 2} {:a 3 :b 4} {:a 5 :b 6} {:a 7 :b 8} ]
                 |     (map (fn [x] (get x :b)))
                 |     (filter (fn [x] (> x 4)))
                 |     (map inc)))) " ) }

   ->> [x & forms]
    (loop [x x, forms forms]
        (if forms
            (let [form (first forms)
                  threaded (if (list? form)
                               `(~(first form) ~@(empty-to-nil(rest form)) ~x)
                               (list form x))]
               (recur threaded (empty-to-nil(rest forms))))
            x)))


(defmacro 
   { :arglists '("(list-comp seq-exprs body-expr)")
     :doc "List comprehension. Takes a vector of one or more binding-form/collection-expr pairs, each followed by zero or more modifiers, and yields a collection of evaluations of expr. Supported modifiers are: :when test." 
     :examples '("(list-comp [x (range 10)] x)"
                 "(list-comp [x (range 5)] (* x 2))"
                 "(list-comp [x (range 10) :when (odd? x)] x)"
                 "(list-comp [x (range 10) :when (odd? x)] (* x 2))"
                 "(list-comp [x (list \"abc\") y [0 1 2]] [x y])") }

   list-comp [[binding coll-expr & bindings] body-expr]
    (cond (not binding)
        `(list ~body-expr)

        (== :when binding)
        `(when ~coll-expr (list-comp ~bindings ~body-expr))

        :else
        `(mapcat (fn [~binding] (list-comp ~bindings ~body-expr))
                 ~coll-expr)))


(defmacro 
   { :arglists '("(time expr)")
     :doc "Evaluates expr and prints the time it took.  Returns the value of expr." 
     :examples '("(time (println [100 200]))") }

   time [expr]
    `(let [start_ (time-ns)
           ret_ ~expr]
         (print (str "Elapsed time: " (/ (- (time-ns) start_) 1000000) " msecs"))
         ret_))
         
         
(defmacro
   { :arglists '("(load-string s)")
     :doc "Sequentially read and evaluate the set of forms contained in the string." 
     :examples '("(do 
                 |   (load-string \"(def x 1)\")
                 |   (+ x 2))") }
   
   load-string [s]
   
   `(eval (read-string (str "(do " ~s ")"))))


(defmacro

   { :arglists '("(load-file name)")
     :doc "Sequentially read and evaluate the set of forms contained in the file." 
     :examples '() }

   load-file [f]
   
   `(eval (read-string (str "(do " (io/slurp ~f :encoding "UTF-8" :binary false) ")"))))


(defmacro 
   { :arglists '("(load-module s)")
     :doc "Loads a Venice predefined extension module." 
     :examples '() }
   
   load-module [s]
   
   `(eval (read-string (str "(do " (load-core-module ~s) ")"))))



(def
   { :arglists '("(print & xs)")
     :doc "Prints to stdout, with no args, prints the empty string. With one arg x, prints x.toString(). With more than one arg, prints the concatenation of the str values of the args with delimiter ' '. Returns nil."
     :examples '("(print [10 20 30])") }

   print
   
   (fn [& xs] (do 
               (cond
                 (empty? xs)  nil
                 (== 1 (count xs))  (. *out* :append (str (first xs)))
                 :default (. *out* :append (str/join " " (map (fn [y] (str y)) xs))))
                 
               nil)))
   
(def
   { :arglists '("(println & xs)")
     :doc "Prints to stdout with a tailing linefeed, with no args, prints the empty string. With one arg x, prints x.toString(). With more than one arg, prints the concatenation of the str values of the args with delimiter ' '. Returns nil."
     :examples '("(do (println 200) (println [10 20 30]))") }

   println
   
   (fn [& xs] (do (apply print xs) (newline) nil)))


(def  
   { :arglists '("(newline)")
     :doc "Writes a platform-specific newline to *out*"
     :examples '() }
    
   newline 
   
   (fn [] (do (. *out* :append "\n") nil)))


(def  
   { :arglists '("(flush)", "(flush os)")
     :doc "Without arg flushes the output stream that is the current value of *out*. With arg flushes the passed output stream"
     :examples '() }
    
   flush 
   
   (fn [os] (let [out (coalesce os *out*)] (. out :flush) nil)))


(def 
   { :arglists '("(not x)")
     :doc "Returns true if x is logical false, false otherwise." 
     :examples '("(not true)"
                 "(not (== 1 2))") }
     
   not 
   
   (fn [x] (if x false true)))


(def 
   { :arglists '("(identity x)")
     :doc "Returns its argument." 
     :examples '("(identity 4)"
                 "(filter identity [1 2 3 nil 4 false true 1234])") }
     
   identity 
   
   (fn [x] x))


(def 
   { :arglists '("(zipmap keys vals)")
     :doc "Returns a map with the keys mapped to the corresponding vals." 
     :examples '("(zipmap [:a :b :c :d :e] [1 2 3 4 5])"
                 "(zipmap [:a :b :c] [1 2 3 4 5])") }

   zipmap
   
   (fn [keys vals]     
      (loop [map (ordered-map)
             ks (seq keys)
             vs (seq vals)]
         (if (and (not-empty? ks) (not-empty? vs))
            (recur (assoc map (first ks) (first vs))
                   (rest ks)
                   (rest vs))
            map))))


(def 
   { :arglists '("(memoize f)")
     :doc "Returns a memoized version of a referentially transparent function." 
     :examples '( "(do
                  |   (def test (fn [a] (+ a 100)))
                  |   (def test-memo (memoize test))
                  |   (test-memo 1))" ) }
     
   memoize
   
   (fn [f]
      (let [mem (atom {})]
         (fn [& args]
            (if-let [e (find @mem args)]
               (val e)
               (let [ret (apply f args)]
                  (swap! mem assoc args ret)
                  ret))))))

