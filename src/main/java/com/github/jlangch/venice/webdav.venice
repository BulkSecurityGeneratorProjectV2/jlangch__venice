;; webDAV utils (requires Sardine library on classpath)

 
;; example
;;
;; (do
;;   (load-module :webdav)
;; 
;;   (webdav/with {}
;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;           (do
;;              (webdav/exists? url)
;;              (webdav/get-as-file url "download.doc")))))
;;
;; (do
;;   (load-module :webdav)
;; 
;;   (webdav/with {:username "jon.doe" :password "123456"}
;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;           (do
;;              (webdav/exists? url)
;;              (webdav/get-as-file url "download.doc")))))

(import :com.github.sardine.DavResource)
(import :com.github.sardine.Sardine)
(import :com.github.sardine.SardineFactory)
(import :com.github.sardine.Version)

(import :java.io.FileOutputStream)


(defmacro 
  webdav/with [props & body]
        `(let [{:keys [username password]} ~props]          
            (thread-local :sardine (. :SardineFactory :begin username password))
            (try
               (do ~@body)
               (finally 
                  (do 
                     (. (get (thread-local) :sardine) :shutdown) 
                     (dissoc (thread-local) :sardine))))))


(def webdav/avail? (fn [] (some? (. :Sardine :class))))
 
(def webdav/version (fn [] (. :Version :getSpecification)))
  
(def webdav/get-as-stream (fn [url] (. (get (thread-local) :sardine) :get url)))

(def webdav/get-as-bytes (fn [url] 
   (try-with [is (webdav/get-as-stream url)] 
             (io/slurp-stream is :binary true))))

(def webdav/get-as-file (fn [url file]
   (try-with [os (. :FileOutputStream :new file)]
             (io/spit-stream os 
                             (webdav/get-as-bytes url) 
                             :flush true))))

(def webdav/exists? (fn [url] (. (get (thread-local) :sardine) :exists url)))

(def webdav/put! (fn [url data]
   (. (get (thread-local) :sardine) :put url data content-type)))

(def webdav/put-file! (fn [url file]
   (webdav/put url (io/slurp file :binary true))))

(def webdav/list (fn [url depth] (. (get (thread-local) :sardine) :list url depth)))

(def webdav/delete! (fn [url] (. (get (thread-local) :sardine) :delete url)))

(def webdav/createDirectory! (fn [url] (. (get (thread-local) :sardine) :createDirectory url)))

(def webdav/move! (fn [srcUrl dstUrl] (. (get (thread-local) :sardine) :move srcUrl dstUrl)))

(def webdav/copy! (fn [srcUrl dstUrl] (. (get (thread-local) :sardine) :copy srcUrl dstUrl)))


