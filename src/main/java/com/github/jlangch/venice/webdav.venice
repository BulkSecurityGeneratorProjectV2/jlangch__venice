;; webDAV utils (requires Sardine library on classpath)


;; (do
;;   (load-module :webdav)
;; 
;;   (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;        (webdav/open {})
;; 
;;        (try
;;           (do
;;              (webdav/exists? url)
;;              (webdav/get-as-file url "download.doc"))
;;           (finally (webdav/close )))))

(import :com.github.sardine.DavResource)
(import :com.github.sardine.Sardine)
(import :com.github.sardine.SardineFactory)
(import :com.github.sardine.Version)

(import :java.io.FileOutputStream)


(def *sardine* (atom nil))

(def webdav/avail? (fn []
   (some? (. :Sardine :class))))

(def webdav/open (fn [ {:keys [username password]} ] 
     (reset! *sardine* (. :SardineFactory :begin username password))))

(def webdav/close (fn []
   (do
      (. (deref *sardine*) :shutdown)
      (reset! *sardine* nil))))

(def webdav/get-as-stream (fn [url] (. (deref *sardine*) :get url)))

(def webdav/get-as-bytes (fn [url] 
   (try-with [is (webdav/get-as-stream url)] 
             (io/slurp-stream is :binary true))))

(def webdav/get-as-file (fn [url file]
   (try-with [os (. :FileOutputStream :new file)]
             (io/spit-stream os 
                             (webdav/get-as-bytes url) 
                             :flush true))))

(def webdav/put (fn [url data]
   (. (deref *sardine*) :put url data content-type)))

(def webdav/put-file (fn [url file]
   (webdav/put url (io/slurp file :binary true))))

(def webdav/exists? (fn [url] (. (deref *sardine*) :exists url)))
