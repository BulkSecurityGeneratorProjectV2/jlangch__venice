;; webDAV utils (requires Sardine library on classpath)

 
;; example
;;
;; (do
;;   (load-module :webdav)
;; 
;;   (webdav/with {}
;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;           (do
;;              (webdav/exists? url)
;;              (webdav/get-as-file url "download.doc")
;;              (webdav/put-file! url "download.doc" "application/msword")))))
;;
;; (do
;;   (load-module :webdav)
;; 
;;   (webdav/with {:username "jon.doe" :password "123456"}
;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;           (do
;;              (webdav/exists? url)
;;              (webdav/get-as-file url "download.doc")))))

(import :com.github.sardine.DavResource)
(import :com.github.sardine.Sardine)
(import :com.github.sardine.SardineFactory)
(import :com.github.sardine.Version)

(import :java.io.FileOutputStream)


(defmacro 
  webdav/with [props & body]
        `(let [{:keys [username password]} ~props]          
            (thread-local :sardine (. :SardineFactory :begin username password))
            (try
               (do ~@body)
               (finally 
                  (do 
                     (. (get (thread-local) :sardine) :shutdown) 
                     (dissoc (thread-local) :sardine))))))


(defn webdav/avail? [] (some? (. :Sardine :class)))
 
(defn webdav/version [] (. :Version :getSpecification))
  
(defn webdav/get-as-stream [url] (. (get (thread-local) :sardine) :get url))

(defn webdav/get-as-bytes [url] 
   (try-with [is (webdav/get-as-stream url)] 
             (io/slurp-stream is :binary true)))

(defn webdav/get-as-file [url file]
   (try-with [os (. :FileOutputStream :new file)]
             (io/spit-stream os 
                             (webdav/get-as-bytes url) 
                             :flush true)))

(defn webdav/exists? [url] (. (get (thread-local) :sardine) :exists url))

(defn webdav/put! [url data content-type]
   (. (get (thread-local) :sardine) :put url data content-type))

(defn webdav/put-file! [url file content-type]
   (webdav/put! url (io/slurp file :binary true) content-type))

(defn webdav/list [url depth] (. (get (thread-local) :sardine) :list url depth))

(defn webdav/delete! [url] (. (get (thread-local) :sardine) :delete url))

(defn webdav/createDirectory! [url] (. (get (thread-local) :sardine) :createDirectory url))

(defn webdav/move! [srcUrl dstUrl] (. (get (thread-local) :sardine) :move srcUrl dstUrl))

(defn webdav/copy! [srcUrl dstUrl] (. (get (thread-local) :sardine) :copy srcUrl dstUrl))
