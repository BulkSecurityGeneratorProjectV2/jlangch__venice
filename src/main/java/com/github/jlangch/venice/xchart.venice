;; XChart

(import :org.knowm.xchart.BubbleChart)
(import :org.knowm.xchart.XYChart)
(import :org.knowm.xchart.PieChart)
(import :org.knowm.xchart.CategoryChart)
(import :org.knowm.xchart.BubbleSeries$BubbleSeriesRenderStyle)
(import :org.knowm.xchart.CategorySeries$CategorySeriesRenderStyle)
(import :org.knowm.xchart.PieSeries$PieSeriesRenderStyle)
(import :org.knowm.xchart.XYSeries$XYSeriesRenderStyle)
(import :org.knowm.xchart.XChartPanel)
(import :org.knowm.xchart.BitmapEncoder)
(import :org.knowm.xchart.BitmapEncoder$BitmapFormat)
    
(import :org.knowm.xchart.style.Styler)
(import :org.knowm.xchart.style.AxesChartStyler)
(import :org.knowm.xchart.style.Styler$LegendPosition)
(import :org.knowm.xchart.style.Styler$TextAlignment)
(import :org.knowm.xchart.style.PieStyler$AnnotationType)
(import :org.knowm.xchart.style.GGPlot2Theme)
(import :org.knowm.xchart.style.MatlabTheme)
(import :org.knowm.xchart.style.XChartTheme)
    
(import :org.knowm.xchart.style.markers.Circle)
(import :org.knowm.xchart.style.markers.Diamond)
(import :org.knowm.xchart.style.markers.None)
(import :org.knowm.xchart.style.markers.Square)
(import :org.knowm.xchart.style.markers.TriangleDown)
(import :org.knowm.xchart.style.markers.TriangleUp)
    
(import :org.knowm.xchart.style.lines.SeriesLines)
   
(import :java.io.FileOutputStream)
   
(import :java.lang.Runnable)

(import :java.awt.Color)
(import :java.awt.GridLayout)
   
(import :javax.swing.JPanel)
(import :javax.swing.JFrame)
(import :javax.swing.SwingUtilities)



;; ---------------------------------------------------------------------------
;; utils
;; ---------------------------------------------------------------------------

;; Example: (doto-cond              =>    (let [e expr]
;;             expr                          (when cond1 (my e call))
;;             cond1 (my call)               (when cond2 (my2 e call2)))
;;             cond2 (my2 call2))
(defmacro doto-cond 
   [expr & clauses]
   (let [pairs (partition 2 clauses)
         expr-sym (gensym "expr")]
       `(let [~expr-sym ~expr]
          ~@(map (fn [[cond clause]]
                      `(when ~cond
                           (~(first clause) ~expr-sym ~@(rest clause))))
                  pairs)
       ~expr-sym)))

(def assoc-in-nonexisting  
   (fn [m ks v]
       (cond->
          m
          (== (get-in m ks ::not-found) ::not-found)
          (assoc-in ks v))))

(def to-bytes
   (fn [chart type]
        let [format (get bitmap-formats type)]
            (BitmapEncoder/getBitmapBytes chart format)))

(def xchart/swing-open-window
   (fn [chart title]
       (let [frame (. :JFrame :new title)
             closeOP (. :JFrame :EXIT_ON_CLOSE)]
            (. frame :setDefaultCloseOperation closeOP)
            (. frame :add (. :XChartPanel :new chart))
            (. frame :pack)
            (. frame :setVisible true))))

(def xchart/swing-view-chart
   (fn [chart title]
       (. :SwingUtilities :invokeLater
               (proxify :Runnable { :run (fn [] (xchart/swing-open-window chart title)) }))))
                       
 



;; ---------------------------------------------------------------------------
;; constants
;; ---------------------------------------------------------------------------

(def colors
   { :blue       (. :Color :BLUE)
     :black      (. :Color :BLACK)
     :cyan       (. :Color :CYAN)
     :dark-gray  (. :Color :DARK_GRAY)
     :gray       (. :Color :GRAY)
     :green      (. :Color :GREEN)
     :light-gray (. :Color :LIGHT_GRAY)
     :magenta    (. :Color :MAGENTA)
     :orange     (. :Color :ORANGE)
     :pink       (. :Color :PINK)
     :red        (. :Color :RED)
     :white      (. :Color :WHITE)
     :yellow     (. :Color :YELLOW) })

(def strokes
   { :none      (. :SeriesLines :NONE)
     :solid     (. :SeriesLines :SOLID)
     :dash-dot  (. :SeriesLines :DASH_DOT)
     :dash-dash (. :SeriesLines :DASH_DASH)
     :dot-dot   (. :SeriesLines :DOT_DOT) })
    
(def markers
   { :circle        (. :Circle :new)
     :diamond       (. :Diamond :new)
     :none          (. :None :new)
     :square        (. :Square :new)
     :triangle-up   (. :TriangleUp :new)
     :triangle-down (. :TriangleDown :new) })    

(def xy-render-styles
   { :area    (. :XYSeries$XYSeriesRenderStyle :Area)
     :scatter (. :XYSeries$XYSeriesRenderStyle :Scatter)
     :line    (. :XYSeries$XYSeriesRenderStyle :Line) })

(def pie-render-styles
   { :pie   (. :PieSeries$PieSeriesRenderStyle :Pie)
     :donut (. :PieSeries$PieSeriesRenderStyle :Donut) })
    
(def pie-annotation-types
   { :label                (. :PieStyler$AnnotationType :Label)
     :label-and-percentage (. :PieStyler$AnnotationType :LabelAndPercentage)
     :percentage           (. :PieStyler$AnnotationType :Percentage) })

(def category-render-styles
   { :area    (. :CategorySeries$CategorySeriesRenderStyle :Area)
     :bar     (. :CategorySeries$CategorySeriesRenderStyle :Bar)
     :line    (. :CategorySeries$CategorySeriesRenderStyle :Line)
     :scatter (. :CategorySeries$CategorySeriesRenderStyle :Scatter)
     :stick   (. :CategorySeries$CategorySeriesRenderStyle :Stick) })

(def bubble-render-styles
   { :round (. :BubbleSeries$BubbleSeriesRenderStyle :Round) })

(def text-alignments
   { :centre (. :Styler$TextAlignment :Centre)
     :left   (. :Styler$TextAlignment :Left)
     :right  (. :Styler$TextAlignment :Right) })

(def legend-positions
   { :inside-n  (. :Styler$LegendPosition :InsideN)
     :inside-ne (. :Styler$LegendPosition :InsideNE)
     :inside-nw (. :Styler$LegendPosition :InsideNW)
     :inside-se (. :Styler$LegendPosition :InsideSE)
     :inside-sw (. :Styler$LegendPosition :InsideSW)
     :outside-e (. :Styler$LegendPosition :OutsideE) })

(def themes
   { :ggplot2 (. :GGPlot2Theme :new)
     :matlab  (. :MatlabTheme :new)
     :xchart  (. :XChartTheme :new) }) 
 
(def bitmap-formats
   { :png  (. :BitmapEncoder$BitmapFormat :PNG)
     :gif  (. :BitmapEncoder$BitmapFormat :GIF)
     :bmp  (. :BitmapEncoder$BitmapFormat :BMP)
     :jpg  (. :BitmapEncoder$BitmapFormat :JPG) })
 
 
  
;; ---------------------------------------------------------------------------
;; chart styling
;; ---------------------------------------------------------------------------

(def set-legend!
   (fn [styler
        {:keys [background-color border-color font padding
                position series-line-length visible?]}]
       (doto-cond
          styler
          background-color      (. :setLegendBackgroundColor (get colors background-color background-color))
          border-color          (. :setLegendBorderColor (get colors border-color border-color))
          font                  (. :setLegendFont font)
          padding               (. :setLegendPadding padding)
          position              (. :setLegendPosition (get legend-positions position))
          series-line-length    (. :setLegendSeriesLineLength series-line-length)
          (not (nil? visible?)) (. :setLegendVisible visible?))))

(def set-chart-title-style!
   (fn [styler
        {:keys [box font padding visible?]}]
       (let [ box-background-color (:background-color box)
              box-border-color (:color box)
              box-visible? (:visible? box) ]
            (doto-cond
               styler
               box-background-color      (. :setChartTitleBoxBackgroundColor (get colors box-background-color box-background-color))
               box-border-color          (. :setChartTitleBoxBorderColor (get colors box-border-color box-border-color))
               (not (nil? box-visible?)) (. :setChartTitleBoxVisible box-visible?)
               font                      (. :setChartTitleFont font)
               padding                   (. :setChartTitlePadding padding)
               (not (nil? visible?))     (. :setChartTitleVisible visible?)))))

(def set-chart-style!
   (fn [styler
        {:keys [background-color font-color padding title]}]
       (doto-cond
          styler
          background-color (. :setChartBackgroundColor (get colors background-color background-color))
          font-color       (. :setChartFontColor (get colors font-color font-color))
          padding          (. :setChartPadding padding)
          title            (set-chart-title-style! title))))

(def set-plot-style!
   (fn [styler
        {:keys [background-color border-color border-visible? content-size]}]
       (doto-cond
          styler
          background-color             (. :setPlotBackgroundColor (get colors background-color background-color))
          border-color                 (. :setPlotBorderColor (get colors border-color border-color))
          (not (nil? border-visible?)) (. :setPlotBorderVisible border-visible?)
          content-size                 (. :setPlotContentSize content-size))))

(def set-series-style!
   (fn [styler series]
       (let [series-colors  (. styler :getSeriesColors)
             series-lines   (. styler :getSeriesLines)
             series-markers (. styler :getSeriesMarkers)
             series         (vec series)]
          (dotimes [i (count series)]
              (let [{:keys [color stroke marker]} (nth series i)]
                   (when color
                         (update! series-colors i (fn [x] (get colors color color))))
                   (when stroke
                         (update! series-lines i (fn [x] (get strokes stroke stroke))))
                   (when marker
                         (update! series-markers i (fn [x] (get markers marker marker))))))
          (. styler :setSeriesColors series-colors)
          (. styler :setSeriesLines series-lines)
          (. styler :setSeriesMarkers series-markers))))

(def set-default-style!
   (fn [styler {:keys [annotations-font annotations? chart plot legend series]}]
       (doto-cond
          styler
          annotations-font          (. :setAnnotationsFont annotations-font)
          (not (nil? annotations?)) (. :setHasAnnotations (annotations?)
          chart                     (set-chart-style! chart)
          legend                    (set-legend! legend)
          plot                      (set-plot-style! plot)
          series                    (set-series-style! series)))))

(def set-axis-ticks!
   (fn [styler {:keys [labels marks padding visible? line-visible?]}]
       (let [{:keys [color font]} labels]
          (doto-cond
             styler
             color (. :setAxisTickLabelsColor (colors color color))
             font  (. :setAxisTickLabelsFont font)))
       (let [{:keys [length color stroke visible?]} marks]
          (doto-cond
             styler
             length                (. :setAxisTickMarkLength length)
             color                 (. :setAxisTickMarksColor (colors color color))
             stroke                (. :setAxisTickMarksStroke (strokes stroke stroke))
             (not (nil? visible?)) (. :setAxisTicksMarksVisible visible?)))
       (doto-cond
          styler
          padding                    (. :setAxisTickPadding padding)
          (not (nil? line-visible?)) (. :setAxisTicksLineVisible line-visible?)
          (not (nil? visible?))      (. :setAxisTicksVisible visible?))))

(def set-axis-title!
   (fn [styler {:keys [font visible? padding]}]
       (doto-cond
          styler
          font                  (. :setAxisTitleFont font)
          padding               (. :setAxisTitlePadding padding)
          (not (nil? visible?)) (. :setAxisTitleVisible visible?))))

(def set-axis-plot!
   (fn [styler {:keys [grid-lines margin tick-marks?]}]
       (let [{:keys [horizontal? vertical? visible? color stroke]} grid-lines]
          (doto-cond
             styler
             (not (nil? visible?))    (. :setPlotGridLinesVisible visible?)
             color                    (. :setPlotGridLinesColor (get colors color color))
             stroke                   (. :setPlotGridLinesStroke (get strokes stroke stroke))
             (not (nil? horizontal?)) (. :setPlotGridHorizontalLinesVisible horizontal?)
             (not (nil? vertical?))   (. :setPlotGridVerticalLinesVisible vertical?)))
       (doto-cond
          styler
          margin                   (. :setPlotMargin margin)
          (not (nil? tick-marks?)) (. :setPlotTicksMarksVisible tick-marks?))))

(def set-x-axis-style!
   (fn [styler
        {:keys [label logarithmic? max min decimal-pattern
                tick-mark-spacing-hint ticks-visible? title-visible?]}]
       (let [{:keys [alignment rotation]} label]
          (doto-cond
             styler
             alignment (. :setXAxisLabelAlignment (get text-alignments alignment alignment))
             rotation  (. :setXAxisLabelRotation rotation)))
       (doto-cond
          styler
          decimal-pattern             (. :setXAxisDecimalPattern decimal-pattern)
          (not (nil? logarithmic?))   (. :setXAxisLogarithmic logarithmic?)
          max                         (. :setXAxisMax max)
          min                         (. :setXAxisMin min)
          tick-mark-spacing-hint      (. :setXAxisTickMarkSpacingHint tick-mark-spacing-hint)
          (not (nil? ticks-visible?)) (. :setXAxisTicksVisible ticks-visible?)
          (not (nil? title-visible?)) (. :setXAxisTitleVisible title-visible?))))

(def set-y-axis-style!
   (fn [styler
        {:keys [label logarithmic? max min decimal-pattern
                tick-mark-spacing-hint ticks-visible? title-visible?]}]
       (let [{:keys [alignment rotation]} label]
          (doto-cond
             styler
             alignment (. :setYAxisLabelAlignment (get text-alignments alignment alignment))))
          (doto-cond
             styler
             decimal-pattern             (. :setYAxisDecimalPattern decimal-pattern)
             (not (nil? logarithmic?))   (. :setYAxisLogarithmic logarithmic?)
             max                         (. :setYAxisMax max)
             min                         (. :setYAxisMin min)
             tick-mark-spacing-hint      (. :setYAxisTickMarkSpacingHint tick-mark-spacing-hint)
             (not (nil? ticks-visible?)) (. :setYAxisTicksVisible ticks-visible?)
             (not (nil? title-visible?)) (. :setYAxisTitleVisible title-visible?))))

(def set-axes-style!
   (fn [styler
        {:keys [axis error-bars-color plot x-axis y-axis
                date-pattern decimal-pattern locale marker timezone]}]
       (let [ebc error-bars-color 
             axis-ticks (:ticks axis)
             axis-title (:title axis)
             marker-size (:size marker)]
            (doto-cond
               styler
               axis-ticks      (set-axis-ticks! axis-ticks)
               axis-title      (set-axis-title! axis-title)
               date-pattern    (. :setDatePattern date-pattern)
               decimal-pattern (. :setDecimalPattern decimal-pattern)
               
               ;; The logic here is as follows: You can specify a colour for the error
               ;; bars. If the colour is :match-series, then the colour matches the series
               ;; colour, but if you specify something else, you cannot match the series!
               (and ebc (not= ebc :match-series)) (. :setErrorBarsColor (colors ebc ebc))
               (and ebc (not= ebc :match-series)) (. :setErrorBarsColorSeriesColor false)
               (== ebc :match-series)             (. :setErrorBarsColorSeriesColor true)
               
               locale      (. :setLocale locale)
               marker-size (. :setMarkerSize marker-size)
               plot        (set-axis-plot! plot)
               timezone    (. :setTimezone timezone)
               x-axis      (set-x-axis-style! x-axis)
               y-axis      (set-y-axis-style! y-axis)))))

(def add-raw-series
   (fn [chart s-name x-data y-data error-bars]
       (if (some? error-bars)
           (. chart :addSeries s-name x-data y-data error-bars)
           (. chart :addSeries s-name x-data y-data))))

(def attach-default-font
   (fn [style-map]
       (if-let [font (:font style-map)]
          (-> style-map
              (dissoc style-map :font)
              (assoc-in-nonexisting [:axis :ticks :labels :font] font)
              (assoc-in-nonexisting [:axis :title :font] font)
              (assoc-in-nonexisting [:legend :font] font)
              (assoc-in-nonexisting [:annotations-font] font)
              (assoc-in-nonexisting [:chart :title :font] font))
          style-map)))       

 
 
 
;; ---------------------------------------------------------------------------
;; XY chart
;; ---------------------------------------------------------------------------

(def xchart/xy-chart-add-series!
   (fn [chart s-name data]
       (if (sequential? data)
           (apply add-raw-series chart s-name data)
           (let [{:keys [x y error-bars style]} data
                 {:keys [marker-color marker-type
                         line-color line-style line-width
                         fill-color show-in-legend? render-style]} style]
                (doto-cond
                   (if error-bars
                       (add-raw-series chart s-name x y error-bars)
                       (add-raw-series chart s-name x y))
                   render-style                 (. :setXYSeriesRenderStyle (get xy-render-styles render-style))
                   marker-color                 (. :setMarkerColor (get colors marker-color marker-color))
                   marker-type                  (. :setMarker (get markers marker-type marker-type))
                   line-color                   (. :setLineColor (get colors line-color line-color))
                   line-style                   (. :setLineStyle (get strokes line-style line-style))
                   line-width                   (. :setLineWidth line-width)
                   fill-color                   (. :setFillColor (get colors fill-color fill-color))
                   (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?))))))

(def xchart/xy-chart
   (fn [series
        {:keys [width height title theme render-style]
         :or {width 640 height 500}
         :as styling}]
       (let [chart (. :XYChart :new width height)
             styling (attach-default-font styling)]
          (doto-cond
             (. chart :getStyler)
             theme        (. :setTheme (get themes theme theme))
             render-style (. :setDefaultSeriesRenderStyle (get xy-render-styles render-style)))
             
          (docoll (fn [[s-name data]] (xchart/xy-chart-add-series! chart s-name data)) series)
             
          (doto (. chart :getStyler)
                (set-default-style! styling)
                (set-axes-style! styling))
                
          (doto-cond
              chart
              title (. :setTitle title)
              (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
              (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title))))))

 
 
 
;; ---------------------------------------------------------------------------
;; Bubble chart
;; ---------------------------------------------------------------------------

(def max-bubble-value 
   (fn [series]
       (reduce max (mapcat :bubble (vals series)))))

(def scale-bubbles
   (fn [series in-val out-val]
       (let [bubble-fn (fn [x] (* out-val (Math/sqrt (/ x in-val))))]
            (map-vals
               (fn [data] (update data :bubble (fn [x] (map bubble-fn x))))
               series))))

(def xchart/bubble-add-series! 
   (fn [chart s-name data]
       (if (sequential? data)
         (apply add-raw-series chart s-name data)
         (let [{:keys [x y bubble style]} data
               {:keys [marker-color marker-type
                       line-color line-style line-width
                       fill-color show-in-legend? render-style]} style]
           (doto-cond
              (add-raw-series chart s-name x y bubble)
              render-style                 (. :setBubbleSeriesRenderStyle (get bubble-render-styles render-style))
              line-color                   (. :setLineColor (get colors line-color line-color))
              line-style                   (. :setLineStyle (get strokes line-style line-style))
              line-width                   (. :setLineWidth line-width)
              fill-color                   (. :setFillColor (get colors fill-color fill-color))
              (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?))))))
         
(def xchart/bubble-chart*
   (fn [series
        {:keys [width height title theme render-style]
         :or {width 640 height 500}
         :as styling}]
          
       (let [chart (. :BubbleChart :new width height)
             styling (attach-default-font styling)]
       
          (docoll (fn [[s-name data]] (xchart/bubble-add-series! chart s-name data)) series)
           
          (doto-cond
             (. chart :getStyler)
             theme        (. :setTheme (get themes theme theme))
             render-style (. :setDefaultSeriesRenderStyle (get bubble-render-styles render-style)))
     
          (doto (. chart :getStyler)
                (set-default-style! styling)
                (set-axes-style! styling))
    
          (doto-cond
             chart
             title (. :setTitle title)
             (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
             (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title))))))
 
 
 
;; ---------------------------------------------------------------------------
;; Pie chart
;; ---------------------------------------------------------------------------

(def attach-default-annotation-distance
   (fn [styling]
       (if (and (== :donut (:render-style styling))
                (not (:annotation-distance styling)))
          (assoc styling :annotation-distance
                (- 1.0 (/ (:donut-thickness styling 0.33) 2)))
          styling)))

(def xchart/pie-chart-add-series!
   (fn [chart s-name data]
       (if (number? data)
           (. chart :addSeries s-name data)
           (let [{:keys [render-style fill-color show-in-legend?]} (:style data)
                 val (:value data)]
              (doto-cond
                 (. chart :addSeries s-name val)
                 render-style                 (. :setChartPieSeriesRenderStyle (get pie-render-styles render-style))
                 fill-color                   (. :setFillColor (get colors fill-color fill-color))
                 (not (nil? show-in-legend?)) (. :setShowInLegend show-in-legend?))))))           

(def xchart/pie-chart
   (fn [series
        {:keys [width height title circular? theme render-style annotation-distance
                start-angle draw-all-annotations? donut-thickness annotation-type]
         :or {width 640 height 500}
         :as styling}]
       (let [chart (. :PieChart :new width height)
             styling (-> styling
                         attach-default-font
                         attach-default-annotation-distance)
             annotation-distance (:annotation-distance styling)]
             
          (docoll (fn [[s-name data]] (xchart/pie-chart-add-series! chart s-name data)) series)
          
          (doto-cond
             (. chart :getStyler)
             theme                              (. :setTheme (get themes theme theme))
             render-style                       (. :setDefaultSeriesRenderStyle (get pie-render-styles render-style))
             (not (nil? circular?))             (. :setCircular circular?)
             (not (nil? draw-all-annotations?)) (. :setDrawAllAnnotations draw-all-annotations?)
             annotation-distance                (. :setAnnotationDistance annotation-distance)
             donut-thickness                    (. :setDonutThickness donut-thickness)
             start-angle                        (. :setStartAngleInDegrees start-angle)
             annotation-type                    (. :setAnnotationType (get pie-annotation-types annotation-type)))
             
          (set-default-style! (. chart :getStyler) styling)
                
          (doto-cond
              chart
              title (. :setTitle title)
              (-> styling :x-axis :title) (. :setXAxisTitle (-> styling :x-axis :title))
              (-> styling :y-axis :title) (. :setYAxisTitle (-> styling :y-axis :title))))))
 
