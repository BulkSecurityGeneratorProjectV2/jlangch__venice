;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice configuration module


(ns config)

(defn
  ^{ :arglists '("(->ks prefix s)")
     :doc """
          Normalize the string, split and map the elements to keywords.
          Returns `nil` if the string doesn't match the passed 'prefix'.

          The 'prefix' may be `nil` or any string (even an empty string). The
          string and the prefix are normalized prior to processing, meaning they
          are translated to lower case and '_' are replaced by '.'.
          """
     :examples '(
          """(config/->ks "" "java.vendor.name")"""
          """(config/->ks "java" "java.vendor.name")"""
          """(config/->ks "java.vendor" "java.vendor.name")""" ) }

  ->ks [prefix s]

  (let [prefix    (when-not (nil? (str/trim-to-nil prefix))
                    (-> (str/lower-case prefix) (str/strip-end ".") (str ".")))
        prefixed? (fn [s] (str/starts-with? s prefix))
        select    (fn [s] (cond
                            (nil? prefix)  s
                            (prefixed? s)  (str/strip-start s prefix)
                            :else          nil))]
    (some-> (str/lower-case s)
            (str/replace-all "_" ".")
            (str/replace-first (regex/pattern "^[.]+") "")
            (str/trim-to-nil)
            (select)
            (str/split "[.]")
            (as-> s (map empty-to-nil s))
            (as-> s (filter some? s))
            (as-> s (map keyword s))
            (empty-to-nil))))


(defn- read-json [s reader-opts]
  (apply json/read-string s reader-opts))


(defn- read-system [prefix properties]
  (reduce (fn [acc [k v]]
            (if-let [ks (->ks prefix k)]
              (assoc-in acc ks v)
              acc))
          {}
          properties))


(defn- read-json-file [file reader-opts]
  (-> file
      (io/slurp :binary false)
      (read-json reader-opts)))


(defn
  ^{ :arglists '(
          "(resource path)",
          "(resource path reader-opts)")
     :doc """
          Reads JSON configuration part from given path in classpath.

          The optional 'reader-opts' are defined by `json/read-str`.
          """
     :see-also '("config/file" "config/build" "json/read-str") }

  resource [path & reader-opts]

  (read-json-file (io/load-classpath-resource path) reader-opts))


(defn
  ^{ :arglists '(
          "(file file-path)",
          "(file file-path reader-opts)")
     :doc """
          Reads JSON configuration part from given path in filesystem.

          The optional 'reader-opts' are defined by `json/read-str`.
          """
     :see-also '("config/resource" "config/build" "json/read-str") }

  file [file-path & reader-opts]

  (read-json-file (io/file file-path) reader-opts))


(defn
  ^{ :arglists '("(env prefix)")
     :doc """
          Reads configuration part from environment variables, filtered by a
          prefix.
          """
     :see-also '("config/env-var" "config/build") }

  env [prefix]

  (read-system prefix (. :java.lang.System :getenv)))


(defn
  ^{ :arglists '("(properties prefix)")
     :doc """
          Reads configuration part from system properties, filtered by a prefix.
          """
     :see-also '("config/property-var" "config/build") }

  properties [prefix]

  (->> (. :java.lang.System :getProperties)
       (into {})
       (read-system prefix)))


(defn
  ^{ :arglists '(
          "(env-var name path)",
          "(env-var name path default-val)")
     :doc """
          Reads a configuration value from an environment variable and
          associates it to the given path in a map.
          """
     :examples '(
          """(config/env-var "SERVER_PORT" [:http :port])"""
          """(config/env-var "SERVER_PORT" [:http :port] "8080")""")
     :see-also '("config/property-var" "config/env" "config/build") }

  env-var

  ([name path]
    (env-var name path nil))

  ([name path default-val]
    (when-let [value (core/system-env name default-val)]
      (assoc-in {} path value))))


(defn
  ^{ :arglists '(
          "(property-var name path)",
          "(property-var name path default-val)")
     :doc """
          Reads a configuration value from an system property and associates it
          to the given path in a map.
          """
     :examples '(
          """(config/property-var "SERVER_PORT" [:http :port])"""
          """(config/property-var "SERVER_PORT" [:http :port] "8080")""")
     :see-also '("config/env-var" "config/properties" "config/build") }

  property-var

  ([name path]
    (property-var name path nil))

  ([name path default-val]
    (when-let [value (core/system-prop name default-val)]
      (assoc-in {} path value))))


(defn
  ^{ :arglists '("(build & parts)")
     :doc "Merges given configuration parts."
     :examples '(
          """
          (config/build
            (config/resource "config-defaults.json")
            (config/file "./config-local.json")
            (config/env-var "SERVER_PORT" [:http :port])
            (config/env-var "MASTER_PWD" [:app :master-pwd]))
          """)
     :see-also '(
          "config/file" "config/resource"
          "config/env-var" "config/property-var"
          "config/env" "config/properties") }

  build [& parts]

  ; Filter nils out, (merge-deep {...} nil) -> nil
  (apply merge-deep {} (filter identity parts)))
