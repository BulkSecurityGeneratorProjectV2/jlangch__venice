;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; REPL setup


(ns repl-setup)

(load-module :maven)
(load-module :ansi)


(def libs [ "org.fusesource.jansi:jansi:1.18",
            "org.knowm.xchart:xchart:3.6.3",
            "org.apache.tomcat.embed:tomcat-embed-core:9.0.34",
            "org.apache.tomcat.embed:tomcat-embed-websocket:9.0.34",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.xhtmlrenderer:flying-saucer-core:9.1.20",
            "org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.20",
            "com.github.librepdf:openpdf:1.3.16",
            "com.github.librepdf:pdf-toolbox:1.3.16" ])

(def fonts-base-url "https://github.com/google/fonts/tree/master/")

(def fonts [ "apache/opensans/OpenSans-Regular.ttf",
             "apache/opensans/OpenSans-Italic.ttf",
             "apache/opensans/OpenSans-Light.ttf",
             "apache/opensans/OpenSans-Bold.ttf",
             "ofl/sourcecodepro/SourceCodePro-Regular.ttf",
             "ofl/sourcecodepro/SourceCodePro-Light.ttf",
             "ofl/sourcecodepro/SourceCodePro-Bold.ttf",
             "ofl/audiowide/Audiowide-Regular.ttf",
             "ofl/roboto/static/Roboto-Black.ttf",
             "ofl/roboto/static/Roboto-BlackItalic.ttf",
             "ofl/roboto/static/Roboto-Bold.ttf",
             "ofl/roboto/static/Roboto-BoldItalic.ttf",
             "ofl/roboto/static/Roboto-Italic.ttf",
             "ofl/roboto/static/Roboto-Light.ttf",
             "ofl/roboto/static/Roboto-LightItalic.ttf",
             "ofl/roboto/static/Roboto-Medium.ttf",
             "ofl/roboto/static/Roboto-MediumItalic.ttf",
             "ofl/roboto/static/Roboto-Regular.ttf",
             "ofl/roboto/static/Roboto-Thin.ttf",
             "ofl/roboto/static/Roboto-ThinItalic.ttf" ])

(def scripts [ "chart.venice"
               "chart-swing.venice"
               "fibonacci.venice"
               "dining-philosophers.venice"
               "tomcat-geoip-map.venice"
               "zip-tomcat-logs.venice"
               "demo-webapp.venice"
               "login-webapp.venice" ])

(defn- missing-libs [dir libs]
  (->> libs
       (map (fn [a] (cons a (maven/parse-artefact a maven/repo ".jar"))))
       (filter #(not (io/exists-file? (io/file dir (third %)))))
       (map first)))


(defn download-libs [dir libs]
  (let [artefacts (repl-setup/missing-libs dir libs)]
    (when-not (empty? artefacts)
      (println "Downloading Java libraries...")
      (if (io/internet-avail?)
         (docoll #(maven/download % :dir dir) artefacts)
         (println *err* "Internet is not available!")))))


(defn- missing-fonts [dir fonts]
  (->> fonts
       (map (fn [f] [f (io/file-name f)]))
       (filter #(not (io/exists-file? (io/file dir (second %)))))
       (map first)))


(defn- download-font [uri dir font-name]
  (let [target (io/file dir font-name)
        progress-fn (ansi/progress-bar
                        :caption     (str font-name " ")
                        :start-msg   ""
                        :end-msg     (str font-name " ok")
                        :failed-msg  (str font-name " failed"))]
    (io/spit target (io/download uri
                        :binary true
                        :user-agent "Mozilla"
                        :progress-fn progress-fn))))


(defn download-fonts [dir fonts]
  (let [required-fonts (repl-setup/missing-fonts dir fonts)]
    (when-not (empty? required-fonts)
      (println (str "Downloading fonts from '" fonts-base-url "'..."))
      (if (io/internet-avail?)
          (docoll #(repl-setup/download-font (str fonts-base-url %)
                                             dir
                                             (io/file-name %))
                  required-fonts)
          (println *err* "Internet is not available!")))))


(defn setup-scripts [dir]
  (println "Copying example scripts...")
  (docoll #(io/spit (io/file dir %) (io/load-classpath-resource %))
          scripts)
  nil)


(defn setup-repl-config []
  (when-not (io/exists-file? "repl.json")
    (println "Setting up 'repl.json'...")
    (->> (io/load-classpath-resource "com/github/jlangch/venice/repl.json")
         (io/spit "repl.json"))))


(defn- setup-repl-launcher-windows []
  (when-not (io/exists-file? "repl.bat")
    (println "Setting up 'repl.bat'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.bat")
         (bytebuf-to-string <> :utf-8)
         (str/replace-all <>
                          "cd C:/Users/foo/venice"
                          (str "cd " (io/file-path (io/file-canonical-path "."))))
         (io/spit "repl.bat"))))


(defn- setup-repl-launcher-unix []
  (when-not (io/exists-file? "repl.sh")
    (println "Setting up 'repl.sh'...")
    (-<> (io/load-classpath-resource "com/github/jlangch/venice/repl.sh")
         (bytebuf-to-string <> :utf-8)
         (str/replace-all <>
                          "cd /Users/foo/venice/"
                          (str "cd " (io/file-path (io/file-canonical-path "."))))
         (io/spit "repl.sh" <>))
    (when (io/exists-file? "repl.sh"))
      (sh "/bin/sh" "-c" "chmod u+x repl.sh" :dir (io/file "."))))


(defn setup-repl-launcher []
  (if (os-type? :windows)
    (setup-repl-launcher-windows)
    (setup-repl-launcher-unix)))


(defn create-resources-jar [lib-dir font-dir]
  (let [target (io/file lib-dir "resources.jar")
        res-venice-png "com/github/jlangch/venice/images/venice.png"]
    (when-not (io/exists-file? target)
      (println (str "Creating '" (io/file-name target) "'..."))
      (let [zip-entries  (conj (->> (io/list-files font-dir)
                                    (map #(vector (str "fonts/" (io/file-name %)) %))
                                    (flatten))
                                "images/venice.png"
                                (io/load-classpath-resource res-venice-png))]
        (io/spit target (apply io/zip zip-entries))))))

(defn copy-venice-jar [dir]
  (let [loc  (java-source-location :com.github.jlangch.venice.Venice)
        name (when (some? loc) (io/file-name loc))]
    (when (and (str/starts-with? name "venice-") (str/ends-with? name ".jar"))
      (println (str "Copying '" name "' to libs"))
      (io/copy-file loc (io/file dir name)))))


(defn setup []
  (when-not (io/exists-dir? "libs")
     (io/mkdirs "libs"))
  (when-not (io/exists-dir? "fonts")
    (io/mkdirs "fonts"))
  (when-not (io/exists-dir? "scripts")
    (io/mkdirs "scripts"))
  (repl-setup/copy-venice-jar "libs")
  (repl-setup/download-libs "libs" libs)
  (repl-setup/download-fonts "fonts" fonts)
  (repl-setup/setup-repl-config)
  (repl-setup/setup-repl-launcher)
  (repl-setup/setup-scripts "scripts")
  (repl-setup/create-resources-jar "libs" "fonts"))
