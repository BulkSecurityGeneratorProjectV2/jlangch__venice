;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Shell utilities
;;;;                                                         macos  unix windows
;;;;   (shell/open url)                                        x      x     x
;;;;   (shell/open-macos-app name)                             x
;;;;   (shell/diff file1 file2)                                x      x     x
;;;;   (shell/kill pid & options)                              x      x     x
;;;;   (shell/process-running? pid)                            x      x     x
;;;;   (shell/wait-for-process-exit pid timeout)               x      x     x
;;;;   (shell/pid)                                             x      x     x


(ns shell)


(defn
  ^{ :arglists '("(require-mac-or-linux)")
     :doc """
          Validates if the OS is Mac OSX or Linux, throws an exception if not.
          """
     :examples '(
          "(shell/require-mac-or-linux)") }

  require-mac-or-linux []

  (when-not (or (os-type? :mac-osx) (os-type? :linux))
    (throw (venice-exception "Can only run on Mac OSX or Linux!"))))


(defn
  ^{ :arglists '("(require-java-9+)")
     :doc """
          Validates if the Java VM is of version 9 or newer.
          """
     :examples '(
          "(shell/require-java-9+)") }

  require-java-9+ []

  (when (< (java-major-version) 9)
    (throw (venice-exception "Can only run on a Java VM 9+!"))))


(defn
  ^{ :arglists '("(diff file1 file2)")
     :doc "Compare two files and print the differences."
     :examples '("""(diff "/tmp/x.txt" "/tmp/y.txt")""") }

  diff [file1 file2]

  (case (os-type)
    :mac-osx (sh "diff" (str file1) (str file2))
    :linux   (sh "diff" (str file1) (str file2))
    :windows (sh "cmd" "/C" "FC" (str file1) (str file2))))


(defn
  ^{ :arglists '("(open url)")
     :doc "Opens a file or an url with the associated application."
     :examples '(
          """(shell/open "img.png")"""
          """(shell/open "https://www.heise.de/")""") }

  open [url]

  (let [url (str url)]
    (case (os-type)
      :mac-osx (sh "/usr/bin/open" url)
      :linux   (sh "/usr/bin/xdg-open" url)
      :windows (sh "cmd" "/C" "start" url))))


(defn
  ^{ :arglists '("(open-macos-app name)")
     :doc "Opens a Mac OSX applicaton application."
     :examples '(
          """(shell/open-macos-app "ArangoDB")""") }

  open-macos-app [name]

  (when-not (os-type? :mac-osx)
    (throw (venice-exception "Can only open a Mac OSX applicaton on Mac OSX!")))

  (sh "/usr/bin/open" "-a" name))


(defn
  ^{ :arglists '("(pid)")
     :doc "Returns the pid (type long) of this process."
     :examples '("(shell/pid") }

  pid []

  (require-java-9+)
  (-> (. :java.lang.ProcessHandle :current)
      (. :pid)))


(defn
  ^{ :arglists '("(process-handle pid)")
     :doc "Returns the process handle for a pid or nil if there is no process."
     :examples '("(shell/process-handle 4556") }

  process-handle [pid]

  (require-java-9+)
  (-<> (. :java.lang.ProcessHandle :of pid)
       (. <> :orElse nil)
       (cast :java.lang.ProcessHandle <>)))


(defn
  ^{ :arglists '("(alive? pid)")
     :doc "Returns true if the process represented by this pid is alive otherwise false."
     :examples '("(shell/alive? 4556") }

  alive? [pid]

  (require-java-9+)
  (let [handle (process-handle pid)]
    (if (some? handle)
      (. handle :isAlive)
      false)))


(defn
  ^{ :arglists '("(kill pid)")
     :doc
        """
        Requests the process to be killed. Returns true if the process is killed
        and false if the process stays alive. Returns nil if the process does
        not exist.
        """
     :examples '("(shell/kill 4556") }

  kill [pid]

  (require-java-9+)
  (if-let [handle (process-handle pid)]
    (. handle :destroy)))


(defn
  ^{ :arglists '("(kill-forcibly pid)")
     :doc
     """
     Requests the process to be killed forcibly. Returns true if the process is
     killed and false if the process stays alive. Returns nil if the process
     does not exist.
     """
     :examples '("(shell/kill-forcibly 4556") }

  kill-forcibly [pid]

  (require-java-9+)
  (if-let [handle (process-handle pid)]
    (. handle :destroyForciblyâ€‹)))


(defn
  ^{ :arglists '("(wait-for-process-exit pid timeout)")
     :doc """
          Waits until the process with the pid exits. Waits max timeout seconds.
          Returns nil if the process exits before reaching the timeout, else
          the pid is returned.
          """
     :examples '(
          "(shell/wait-for-process-exit 12345 20)") }

  wait-for-process-exit [pid timeout]

  (require-java-9+)
  (let [handle (process-handle pid)]
    (if (some? handle)
      (let [future (. handle :onExit)]
        (try
          (. future :get timeout :SECONDS)
          nil
          (catch :java.lang.Exception e pid)))
      pid)))
