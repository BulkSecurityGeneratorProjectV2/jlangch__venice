;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2019 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Shell utilities


(ns shell)

(defn
  ^{ :arglists '("(require-mac-or-linux)")
     :doc """
          Validates if the OS is Mac OSX or Linux, throws an exception if not.
          """
     :examples '(
          "(shell/require-mac-or-linux)") }

  require-mac-or-linux []

  (when-not (or (os-type? :mac-osx) (os-type? :linux))
    (throw (venice-exception "Can only run on Mac OSX or Linux!"))))


(defn
  ^{ :arglists '("(process-running? pid)")
     :doc """
          Returns true if the pid represents a running process, false otherwise.
          """
     :examples '(
          "(shell/process-running? 123)"
          "(shell/process-running? \"123\")") }

  process-running? [pid]

  (require-mac-or-linux)
  (if (some? pid)
    (->> (sh "ps" "-ef" :throw-ex true)
         (:out)
         (str/split-lines)
         (map #(second (str/split (str/trim %) " +")))
         (filter #(== % (str pid)))
         (not-empty?))
    false))


(defn
  ^{ :arglists '("(wait-for-process-exit pid timeout)")
     :doc """
          Waits until the process with the pid exits. Waits max timeout seconds.
          Returns nil if the process exits before reaching the timeout, else
          the pid is returned.
          """
     :examples '(
          "(shell/wait-for-process-exit 12345 20)"
          "(shell/wait-for-process-exit \"12345\" 20)") }

  wait-for-process-exit [pid timeout]

  (require-mac-or-linux)
  (loop [secs timeout]
    (when (and (pos? secs) (process-running? pid))
      (sleep 1 :seconds)
      (recur (dec secs))))
  (if (process-running? pid) pid nil))


(defn
  ^{ :arglists '("(tput-cols)")
     :doc "Returns the number of columns of the terminal"
     :examples '("(shell/tput-cols)") }

  tput-cols []

  (require-mac-or-linux)
  (long (str/trim (:out (sh "tput" "cols" :throw-ex true)))))


(defn
  ^{ :arglists '("(tput-lines)")
     :doc "Returns the number of lines of the terminal"
     :examples '("(shell/tput-lines)") }

  tput-lines []

  (require-mac-or-linux)
  (long (str/trim (:out (sh "tput" "lines" :throw-ex true)))))


(defn
  ^{ :arglists '("(tput-cup x y)")
     :doc "Positions the cursor in the terminal. (0,0) is the upper left corner."
     :examples '("(shell/tput-cup 0 10)") }

  tput-cup [x y]

  (require-mac-or-linux)
  (sh "tput" "cup" y x)
  nil)


(defn
  ^{ :arglists '("(tput-clear)")
     :doc "Clears the terminal."
     :examples '("(shell/tput-clear)") }

  tput-clear []

  (require-mac-or-linux)
  (sh "tput" "cup" y x)
  nil)
