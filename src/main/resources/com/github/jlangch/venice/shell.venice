;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Shell utilities
;;;;                                               java      macos  unix windows
;;;;   (shell/open url)                              8+        x      x     x
;;;;   (shell/open-macos-app name)                   8+        x
;;;;   (shell/diff file1 file2)                      8+        x      x     x
;;;;   (shell/kill pid)                              9+        x      x     x
;;;;   (shell/kill-forcibly pid)                     9+        x      x     x
;;;;   (shell/wait-for-process-exit pid timeout)     9+        x      x     x
;;;;   (shell/alive? pid)                            9+        x      x     x
;;;;   (shell/pid)                                   9+        x      x     x
;;;;   (shell/pid p)                                 9+        x      x     x
;;;;   (shell/process-handle p)                      9+        x      x     x
;;;;   (shell/process-handle? p)                     9+        x      x     x
;;;;   (shell/process-info p)                        9+        x      x     x
;;;;   (shell/processes)                             9+        x      x     x
;;;;   (shell/descendant-processes)                  9+        x      x     x
;;;;   (shell/parent-process)                        9+        x      x     x


(ns shell)


(defn
  ^{ :arglists '("(require-mac-or-linux)")
     :doc """
          Validates if the OS is Mac OSX or Linux, throws an exception if not.
          """
     :examples '(
          "(shell/require-mac-or-linux)") }

  require-mac-or-linux []

  (when-not (or (os-type? :mac-osx) (os-type? :linux))
    (throw (venice-exception "Can only run on Mac OSX or Linux!"))))


(defn
  ^{ :arglists '("(require-java-9+)")
     :doc """
          Validates if the Java VM is of version 9 or newer.
          """
     :examples '(
          "(shell/require-java-9+)") }

  require-java-9+ []

  (when (< (java-major-version) 9)
    (throw (venice-exception "Can only run on a Java VM 9+!"))))


(defn
  ^{ :arglists '("(diff file1 file2)")
     :doc "Compare two files and print the differences."
     :examples '("""(diff "/tmp/x.txt" "/tmp/y.txt")""") }

  diff [file1 file2]

  (case (os-type)
    :mac-osx (sh "diff" (str file1) (str file2))
    :linux   (sh "diff" (str file1) (str file2))
    :windows (sh "cmd" "/C" "FC" (str file1) (str file2))))


(defn
  ^{ :arglists '("(open url)")
     :doc
        """
        Opens a file or an url with the associated platform specific \
        application.
        """
     :examples '(
        """(shell/open "img.png")"""
        """(shell/open "https://www.heise.de/")""") }

  open [url]

  (let [url (str url)]
    (case (os-type)
      :mac-osx (sh "/usr/bin/open" url)
      :linux   (sh "/usr/bin/xdg-open" url)
      :windows (sh "cmd" "/C" "start" url))))


(defn
  ^{ :arglists '("(open-macos-app name)")
     :doc "Opens a Mac OSX app."
     :examples '("""(shell/open-macos-app "ArangoDB")""") }

  open-macos-app [name]

  (when-not (os-type? :mac-osx)
    (throw (venice-exception "Can only open a Mac OSX applicaton on Mac OSX!")))

  (sh "/usr/bin/open" "-a" name))


(defn
  ^{ :arglists '(
        "(pid)"
        "(pid process-handle)")
     :doc
        """
        Without argument returns the PID (type long) of this process. With \
        a process-handle (:java.lang.ProcessHandle) returns the PID for the \
        process represented by the handle.
        Requires Java 9+.
        """
     :examples '(
        "(shell/pid)") }

  pid

  ([]
    (require-java-9+)
    (-> (. :java.lang.ProcessHandle :current)
        (. :pid)))

  ([process-handle]
    (require-java-9+)
    (. process-handle :pid)))


(defn
  ^{ :arglists '("(process-handle pid)")
     :doc
        """
        Returns the process handle (:java.lang.ProcessHandle) for a PID or \
        nil if there is no process.
        Requires Java 9+.
        """
     :examples '(
        "(shell/process-handle 4556)") }

  process-handle [pid]

  (require-java-9+)
  (if (process-handle? pid)
      pid
      (-<> (. :java.lang.ProcessHandle :of pid)
           (. <> :orElse nil)
           (cast :java.lang.ProcessHandle <>))))


(defn
  ^{ :arglists '("(process-handle? p)")
     :doc
        """
        Returns true if p is a process handle (:java.lang.ProcessHandle).
        Requires Java 9+.
        """ }

  process-handle? [p]

  (instance? :java.lang.ProcessHandle p))


(defn
  ^{ :arglists '("(processes)")
     :doc
        """
        Returns the process handles (:java.lang.ProcessHandle) for all  \
        running processes.
        Requires Java 9+.
        """
     :examples '(
        "(shell/processes)") }

  processes []

  (require-java-9+)
  (->> (. :java.lang.ProcessHandle :allProcesses)
       (seq)
       (map #(cast :java.lang.ProcessHandle %))))


(defn
  ^{ :arglists '(
        "(alive? pid)"
        "(alive? process-handle)")
     :doc
        """
        Returns true if the process represented by a PID or a process handle \
        is alive otherwise false.
        Requires Java 9+.
        """
     :examples '(
        "(shell/alive? 4556)") }

  alive? [p]

  (require-java-9+)
  (let [handle (process-handle p)]
    (if (some? handle)
      (. handle :isAlive)
      false)))


(defn
  ^{ :arglists '(
        "(process-info pid)"
        "(process-info process-handle)")
     :doc
        """
        Returns the process info for a process represented by a PID or a \
        process handle.
        Requires Java 9+.
        """
     :examples '(
        "(shell/process-info 4556)") }

  process-info [p]

  (require-java-9+)
  (let [handle (process-handle p)]
    (when (some? handle)
      (let [get-or-nil   (fn [obj key] (java-unwrap-optional (. obj key)))
            map-instant  (fn [x] (if x (time/local-date-time x) nil))
            map-duration (fn [x] (if x (/ (. x :toNanos) 1_000_000) nil))
            info         (. handle :info)]
        (hash-map
          :arguments         (get-or-nil info :arguments)
          :command           (get-or-nil info :command)
          :command-line      (get-or-nil info :commandLine)
          :start-time        (->> (get-or-nil info :startInstant)
                                  (cast :java.time.Instant)
                                  (map-instant))
          :total-cpu-millis  (->> (get-or-nil info :totalCpuDuration)
                                  (cast :java.time.Duration)
                                  (map-duration))
          :user              (get-or-nil info :user))))))


(defn
  ^{ :arglists '(
        "(current-process)")
     :doc
        """
        Returns the process handle of the current process.
        Requires Java 9+.
        """
     :examples '(
        "(shell/current-process)") }

  current-process [p]

  (require-java-9+)
  (->> (. :java.lang.ProcessHandle :current)
       (cast :java.lang.ProcessHandle)))


(defn
  ^{ :arglists '(
        "(descendant-processes pid)"
        "(descendant-processes process-handle)")
     :doc
        """
        Returns the descendants of a process represented by a PID \
        or a process handle.
        Requires Java 9+.
        """
     :examples '(
        "(shell/descendant-processes 4556)") }

  descendant-processes [p]

  (require-java-9+)
  (if-let [handle (process-handle p)]
    (->> (. handle :descendants)
         (seq)
         (map #(cast :java.lang.ProcessHandle %)))))


(defn
  ^{ :arglists '(
        "(parent-process pid)"
        "(parent-process process-handle)")
     :doc
        """
        Returns the parent of a process represented by a PID or a \
        process handle.
        Requires Java 9+.
        """
     :examples '(
        "(shell/parent-process 4556)") }

  parent-process [p]

  (require-java-9+)
  (if-let [handle (process-handle p)]
    (->> (. handle :parent)
         (cast :java.lang.ProcessHandle)
         (java-unwrap-optional))))


(defn
  ^{ :arglists '(
        "(kill pid)"
        "(kill process-handle)")
     :doc
        """
        Requests the process to be killed. Returns true if the process is \
        killed and false if the process stays alive. Returns nil if the \
        process does not exist. Accepts a PID or a process handle \
        (:java.lang.ProcessHandle).
        Requires Java 9+.
        """
     :examples '(
        "(shell/kill 4556)") }

  kill [p]

  (require-java-9+)
  (if-let [handle (process-handle p)]
    (. handle :destroy)))


(defn
  ^{ :arglists '(
        "(kill-forcibly pid)"
        "(kill-forcibly process-handle)")
     :doc
        """
        Requests the process to be killed forcibly. Returns true if the process \
        is killed and false if the process stays alive. Returns nil if the \
        process does not exist. Accepts a PID or a process handle \
        (:java.lang.ProcessHandle).
        Requires Java 9+.
        """
     :examples '(
        "(shell/kill-forcibly 4556)") }

  kill-forcibly [p]

  (require-java-9+)
  (if-let [handle (process-handle p)]
    (. handle :destroyForciblyâ€‹)))


(defn
  ^{ :arglists '(
        "(wait-for-process-exit pid timeout)"
        "(wait-for-process-exit process-handle timeout)")
     :doc
        """
        Waits until the process with the pid exits. Waits max timeout \
        seconds. Returns nil if the process exits before reaching the \
        timeout, else the pid is returned. Accepts a PID or a \
        process handle (:java.lang.ProcessHandle).
        Requires Java 9+.
        """
     :examples '(
        "(shell/wait-for-process-exit 12345 20)") }

  wait-for-process-exit [p timeout]

  (require-java-9+)
  (let [handle (process-handle p)]
    (if (some? handle)
      (let [future (. handle :onExit)]
        (try
          (. future :get timeout :SECONDS)
          nil
          (catch :java.lang.Exception e))))
      (pid handle)))
