;; POM utilities
;;
;; see: https://maven.apache.org/pom.html

(defn- pom/strip-newline [s]
  (->> (str/split-lines s)
       (map #(str/trim-to-nil %))
       (filter #(some? %))
       (str/join)))

(defn- pom/xml-element-content [tag xml-fragment]
  (-> (regex/matcher "<~{tag}>.*?</~{tag}>" xml-fragment)
      (regex/find)
      (str/strip-start "<~{tag}>")
      (str/strip-end "</~{tag}>")))

(defn- pom/find-dependencies [pom]
  (-> (regex/matcher "<dependency>[\\s\\S]*?</dependency>" pom)
      (regex/find-all)))

(defn- pom/find-properties [pom]
  (-> (regex/matcher "<properties>[\\s\\S]*?</properties>" pom)
      (regex/find)))

(defn- pom/find-parent [pom]
  (-> (regex/matcher "<parent>[\\s\\S]*?</parent>" pom)
      (regex/find)))

(defn- pom/find-dependency-exclusions [dependency]
  (map
    (fn [e]
      {:groupId (pom/xml-element-content "groupId" e)
       :artifactId (pom/xml-element-content "artifactId" e) } )
    (-> (regex/matcher "<exclusion>[\\s\\S]*?</exclusion>" pom)
        (regex/find-all))))

(defn pom/map-dependency [dependency]
  (let [d (pom/strip-newline dependency) ]
    {:groupId (pom/xml-element-content "groupId" d)
     :artifactId (pom/xml-element-content "artifactId" d)
     :version (pom/xml-element-content "version" d)
     :exclusions (pom/find-dependency-exclusions d)
     :type (pom/xml-element-content "type" d)
     :scope (pom/xml-element-content "scope" d)
     :optional (pom/xml-element-content "optional" d) } ))

(defn- pom/map-parent [parent]
  (let [p (pom/strip-newline parent) ]
    {:groupId (pom/xml-element-content "groupId" p)
     :artifactId (pom/xml-element-content "artifactId" p)
     :version (pom/xml-element-content "version" p)
     :relativePath (pom/xml-element-content "relativePath" p) } ))

(defn- pom/map-properties [properties]
  {})

(defn
 ^{ :arglists '("(pom/properties pom)")
    :doc "Returns properties defined in the pom as map."
    :examples '("(pom/properties (io/slurp \"pom.xml\"))" ) }
 pom/properties
 [pom]
 (if-let [properties (pom/find-properties pom)]
   (->> (pom/strip-newline properties)
        (pom/xml-element-content)
        (pom/map-properties))
   {}))

(defn
  ^{ :arglists '("(pom/parent pom)")
     :doc "Returns parent artefact defined in the pom or nil if not defined."
     :examples '("(pom/parent (io/slurp \"pom.xml\"))" ) }
  pom/parent
  [pom]
  (if-let [parent (pom/find-parent pom)]
    (pom/map-parent parent)))

(defn
  ^{ :arglists '("(pom/dependencies pom)")
     :doc "Returns the dependencies defined in the pom."
     :examples '("(pom/dependencies (io/slurp \"pom.xml\"))" ) }
  pom/dependencies
  [pom]
  (map #(pom/map-dependency %) (pom/find-dependencies pom)))
