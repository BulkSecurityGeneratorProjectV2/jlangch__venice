;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ansi utilities

;;;; ANSI escape codes
;;;; see: http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html#colors
;;;;
;;;; 256 Color Mode
;;;; see: https://i.stack.imgur.com/KTSQa.png


(ns ansi)

(def-dynamic *use-ansi* true)


;; ---------------------------------------------------------------------------
;; Constants
;; ---------------------------------------------------------------------------

(def ANSI-CODES
  { ;; decorations
    :reset              "[0m"  ;; reset all styles and colors
    :bold               "[1m"
    :dim                "[2m"
    :blink-slow         "[5m"
    :underline          "[4m"
    :underline-off      "[24m"
    :reverse            "[7m"
    :reverse-off        "[27m"
    :strikethrough      "[9m"
    :strikethrough-off  "[29m"

    ;; default color
    :default "[39m"

    ;; basic 8 foreground colors
    :black   "[30m"
    :red     "[31m"
    :green   "[32m"
    :yellow  "[33m"
    :blue    "[34m"
    :magenta "[35m"
    :cyan    "[36m"
    :white   "[37m"

    ;; bright 8 foreground colors
    :bright-black   "[30;1m"
    :bright-red     "[31;1m"
    :bright-green   "[32;1m"
    :bright-yellow  "[33;1m"
    :bright-blue    "[34;1m"
    :bright-magenta "[35;1m"
    :bright-cyan    "[36;1m"
    :bright-white   "[37;1m"

    ;; basic 8 background colors
    :bg-black   "[40m"
    :bg-red     "[41m"
    :bg-green   "[42m"
    :bg-yellow  "[43m"
    :bg-blue    "[44m"
    :bg-magenta "[45m"
    :bg-cyan    "[46m"
    :bg-white   "[47m"
    :bg-default "[49m"

    ;; bright 8 background colors
    :bg-bright-black   "[40;1m"
    :bg-bright-red     "[41;1m"
    :bg-bright-green   "[42;1m"
    :bg-bright-yellow  "[43;1m"
    :bg-bright-blue    "[44;1m"
    :bg-bright-magenta "[45;1m"
    :bg-bright-cyan    "[46;1m"
    :bg-bright-white   "[47;1m"

    :clear-screen          "[2J"
    :clear-screen-to-start "[1J"
    :clear-screen-to-end   "[0J"

    :clear-line            "[2K"
    :clear-line-to-start   "[1K"
    :clear-line-to-end     "[0K"

    :cursor-pos-save       "[s"
    :cursor-pos-restore    "[u"

    :cursor-left-1         "[1D"
    :cursor-left-2         "[2D"
    :cursor-left-3         "[3D"
    :cursor-left-4         "[4D"
    :cursor-left-5         "[5D"
    :cursor-left-1000      "[1000D"
})


;; -----------------------------------------------------------------------------
;; Cursor Navigation
;; -----------------------------------------------------------------------------

(defn cursor-up [rows] (str "[" rows "A"))
(defn cursor-down [rows] (str "[" rows "B"))
(defn cursor-right [cols] (str "[" cols "C"))
(defn cursor-left [cols] (str "[" cols "D"))

(defn cursor-down-start-of-line [rows] (str "[" rows "E"))
(defn cursor-up-start-of-line [col] (str "[" rows "F"))

(defn cursor-col [col] (str "[" col "G"))
(defn cursor-pos [row col] (str "[" row ";" col "H"))

(defn cursor-pos-save [] "[s")
(defn cursor-pos-restore [] "[u")



;; -----------------------------------------------------------------------------
;; Extended Colors
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(fg-color code")
     :doc """
          Defines an extended foreground color from the 256-color extended
          color set. The code ranges from 0 to 255.
          """
     :examples '("(ansi/fg-color 197)") }

  fg-color

  ([code] (str "[38;5;" code "m"))
  ([r g b] (str "[38;2;" r ";" g ";" b "m")))  ;; supported by some terminals


(defn
  ^{ :arglists '("(bg-color code")
     :doc """
          Defines an extended background color from the 256-color extended
          color set. The code ranges from 0 to 255.
          """
     :examples '("(ansi/bg-color 197)") }

  bg-color

  ([code] (str "[48;5;" code "m"))
  ([r g b] (str "[48;2;" r ";" g ";" b "m")))  ;; supported by some terminals


;; -----------------------------------------------------------------------------
;; Styling
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(style text styles)")
     :doc """
          Applies ANSI color and style to a text string.
          """
     :examples '(
          """(println (ansi/style "foo" :green))"""
          """(println (ansi/style "foo" :green :underline))"""
          """(println (ansi/style "foo" :green :bg-yellow :underline))"""
          """(println (ansi/style "foo" (ansi/fg-color 21) (ansi/bg-color 221) :underline))"""
          """(println (ansi/style "foo" nil))"""
        ) }

  style [text & styles]

  (str (apply str (map ansi/ansi styles)) text (ansi/ansi :reset)))


(defn
  ^{ :arglists '("(ansi style)")
     :doc """
          Output an ANSI escape code using a style key.
          If *use-ansi* is bound to false, outputs an empty string instead of an
          ANSI code.
          """
     :examples '(
          """(println (str (ansi/ansi :blue) "foo"))"""
          """(println (str (ansi/ansi :underline) "foo"))"""
          """(println (str (ansi/ansi (ansi/fg-color 33)) "foo"))"""
        ) }

  ansi [style]

  (if (and ansi/*use-ansi* core/*ansi-term*)
    (cond
      (keyword? style)  (str "\u001b" (get ansi/ANSI-CODES style (:reset ansi/ANSI-CODES)))
      (string? style)   (str "\u001b" style)
      :default          "")
    ""))


;; -----------------------------------------------------------------------------
;; Macros
;; -----------------------------------------------------------------------------

(defmacro
  ^{ :arglists '("(with-ansi & forms)")
     :doc """
          Runs the given forms with the *use-ansi* variable temporarily bound
          to true, to enable the production of any ANSI color codes specified
          in the forms.
          """
     :examples '(
          """(ansi/with-ansi (println (ansi/style "foo" :green)))"""
        ) }

  with-ansi [& forms]

  `(binding [ansi/*use-ansi* true] (do ~@forms)))


(defmacro
  ^{ :arglists '("(without-ansi & forms)")
     :doc """
          Runs the given forms with the *use-ansi* variable temporarily bound
          to false, to suppress the production of any ANSI color codes
          specified in the forms.
          """
     :examples '(
          """(ansi/without-ansi (println (ansi/style "foo" :green)))"""
        ) }

  without-ansi [& forms]

  `(binding [ansi/*use-ansi* false] (do ~@forms)))


;; -----------------------------------------------------------------------------
;; Progress utils
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(progress & options)")
     :doc """
          Returns a progress handler function that takes two args
            [1] progress (0..100%)
            [2] status {:start :progress :end :failed}
          that renders the progress as a percentage string.

          E.g: Download:  54%

          Options:
            :caption txt
                A caption text. Defaults to empty.
            :start-msg msg
                A start message. Defaults to 'started'.
            :end-msg msg
                An end message. Defaults to 'ok'.
            :failed-msg msg
                A failed message. Defaults to 'failed'.
          """
     :examples '("""
                 (io/download "https://foo.org/image.png"
                              :binary true
                              :user-agent "Mozilla"
                              :progress-fn (ansi/progress
                                              :caption     "Download: "
                                              :start-msg   "Download started"
                                              :end-msg     "Download ok"
                                              :failed-msg  "Download failed"))
                 """) }

  progress [& options]

  (let [options        (apply hash-map options)
        caption        (:caption options "")
        start-msg      (:start-msg options "started")
        end-msg        (:end-msg options "ok")
        failed-msg     (:failed-msg options "failed")
        percent-styles (:percent-styles options)]
    (if (and ansi/*use-ansi* core/*ansi-term*)
      (fn progress-handler [percent status]
          (let [percent (max 0 (min 100 percent))]
            (print (ansi/style "" :clear-line :cursor-left-1000))
            (case status
              :start    (print start-msg)
              :progress (print (str caption (str/format "%3s%%" percent) " "))
              :end      (print (str end-msg "\n"))
              :failed   (print (str failed-msg "\n"))
                        (print (str "Invalid status '" status "'\n")))
            nil))
      (fn progress-handler [percent status]
          (let [percent (max 0 (min 100 percent))]
            (case status
              :start    nil
              :progress nil
              :end      (println end-msg)
              :failed   (println failed-msg)
                        (println (str "Invalid status '" status "'")))
            nil)))))


(defn
  ^{ :arglists '("(progress-bar & options)")
     :doc """
          Returns a progress handler function that takes two args
            [1] progress (0..100%)
            [2] status {:start :progress :end :failed}
          that renders the progress as a percentage bar.

          E.g: Download: [#################        ]
               Download: [#################        ] 70%

          Options:
            :caption txt
                A caption text. Defaults to empty.
            :width val
                The width of the bar in chars. Defaults to 25.
            :start-msg msg
                A start message. Defaults to 'started'.
            :end-msg msg
                An end message. Defaults to 'ok'.
            :failed-msg msg
                A failed message. Defaults to 'failed'.
            :show-percent {true/false}
                If true ahows the percentage. Defaults to 'false'.
          """
     :examples '("""
                 (io/download "https://foo.org/image.png"
                              :binary true
                              :user-agent "Mozilla"
                              :progress-fn (ansi/progress-bar
                                              :caption      "Download: "
                                              :width        25
                                              :start-msg    "Download started"
                                              :end-msg      "Download ok"
                                              :failed-msg   "Download failed"
                                              :show-percent true))
                 """) }

  progress-bar [& options]

  (let [options       (apply hash-map options)
        caption       (:caption options "")
        caption-width (min 100 (max 0 (:caption-width options 0)))
        caption       (if (== caption-width 0)
                        caption
                        (-> (str/truncate caption caption-width :middle)
                            (str/expand caption-width " " :end)))
        width         (min (max (:width options 25) 10) 100)
        start-msg     (:start-msg options "started")
        end-msg       (:end-msg options "ok")
        failed-msg    (:failed-msg options "failed")
        show-percent  (:show-percent options false)
        bar           (fn [percent]
                        (let [w1 (/ (* percent width) 100)
                              w2 (- width w1)]
                          (str caption
                               "["
                               (str/repeat "#" w1)
                               (str/repeat " " w2)
                               "] "
                               (if show-percent (str percent "% ") "")))) ]
    (if (and ansi/*use-ansi* core/*ansi-term*)
      (fn progress-handler [percent status]
        (let [percent (max 0 (min 100 percent))]
          (print (ansi/style "" :clear-line :cursor-left-1000))
          (case status
            :start    (print start-msg)
            :progress (print (bar percent))
            :end      (println end-msg)
            :failed   (println failed-msg)
                      (println (str "Invalid status '" status "'")))
          nil))
      (fn progress-handler [percent status]
        (let [percent (max 0 (min 100 percent))]
          (case status
            :start    nil
            :progress nil
            :end      (println end-msg)
            :failed   (println failed-msg)
                      (println (str "Invalid status '" status "'")))
          nil)))))



;; -----------------------------------------------------------------------------
;; Demo
;; -----------------------------------------------------------------------------

(defn show-basic-colors []
  (let [colors-fg [
            :black :red     :green :yellow
            :blue  :magenta :cyan  :white ]
        colors-fg-bright [
            :bright-black :bright-red     :bright-green :bright-yellow
            :bright-blue  :bright-magenta :bright-cyan  :bright-white ]
        colors-bg [
            :bg-black :bg-red     :bg-green :bg-yellow
            :bg-blue  :bg-magenta :bg-cyan  :bg-white ]
        colors-bg-bright [
            :bg-bright-black :bg-bright-red     :bg-bright-green :bg-bright-yellow
            :bg-bright-blue  :bg-bright-magenta :bg-bright-cyan  :bg-bright-white ]
        labels [ "A", "B", "C", "D", "E", "F", "G", "H"]]

    (println "8 basic text and background colors")
    (docoll #(print (ansi/style (str " " (first %) " ") (second %)))
            (partition 2 (interleave labels colors-fg)))
    (print (ansi/style "" :reset))
    (println)

    (docoll #(print (ansi/style (str " " (first %) " ") (second %)))
            (partition 2 (interleave labels colors-bg)))
    (print (ansi/style "" :reset))
    (println)
    (println)


    (println "8 basic bright text and background colors")
    (docoll #(print (ansi/style (str " " (first %) " ") (second %)))
            (partition 2 (interleave labels colors-fg-bright)))
    (print (ansi/style "" :reset))
    (println)

    (docoll #(print (ansi/style (str " " (first %) " ") (second %)))
            (partition 2 (interleave labels colors-bg-bright)))
    (print (ansi/style "" :reset))
    (println)))


(defn show-all-text-colors []
  (println "Text colors")
  (docoll (fn [line]
            (docoll (fn [col]
                      (print (ansi/style (str/format " %3s " (str col))
                                          (ansi/fg-color col))))
                      line)
            (println))
          (partition 16 (range 0 256)))

  (print (ansi/style "" :reset))
  (println))


(defn show-all-background-colors []
  (println "Background colors")
  (docoll (fn [line]
            (docoll (fn [col]
                      (print (ansi/style (str/format " %3s " (str col))
                                          (ansi/bg-color col))))
                      line)
            (println))
          (partition 16 (range 0 256)))

  (print (ansi/style "" :reset))
  (println))


(defn show-decorations []
  (println "Font styles")
  (print (ansi/style " bold " :bold))
  (print (ansi/style " underline " :underline))
  (print (ansi/style " reversed " :reverse))
  (println)
)


(defn demo-cursor []
  (let [text1  "hello world"
        text2  "HELLO WORLD"
        len    (count text1)]
    (println "Cursor demo")
    (print text1)
    (print (ansi/style "" (ansi/cursor-left 1)))
    (dotimes [n len]
      (do
        (print (ansi/style (nth text2 (- len n 1)) :reverse))
        (print (ansi/style "" (ansi/cursor-left 2)))
        (sleep 200)))
    (ansi/cursor-right len)
    (println)))

(defn demo-progress []
  (let [pg (ansi/progress
               :caption     "Download: "
               :start-msg   "Download started"
               :end-msg     "Download ok"
               :failed-msg  "Download failed")]

    (println "Progress demo")
    (pg 0 :start)
    (docoll (fn [x] (pg x :progress) (sleep 100)) (range 0 101))
    (pg 100 :end)))


(defn demo-progress-bar []
  (let [pg (ansi/progress-bar
               :width        25
               :caption      "Download: "
               :start-msg    "Download started"
               :end-msg      "Download ok"
               :failed-msg   "Download failed"
               :show-percent true)]

    (println "Progress bar demo")
    (pg 0 :start)
    (docoll (fn [x] (pg x :progress) (sleep 100)) (range 0 101))
    (pg 100 :end)))


(defn demo []
  (let [features [show-basic-colors
                  show-all-text-colors
                  show-all-background-colors,
                  show-decorations
                  demo-progress,
                  demo-progress-bar]]
    (docoll (fn [f] (f) (sleep 2 :seconds) (println "\n")) features)))
