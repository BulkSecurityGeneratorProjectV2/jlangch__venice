;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; ansi utilities

;;;; see: http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html#colors

(ns ansi)


(def-dynamic *use-ansi* true)

;; ---------------------------------------------------------------------------
;; constants
;; ---------------------------------------------------------------------------

(def ANSI-CODES
  { ;; decorations
    :reset              "[0m"
    :bold               "[1m"
    :blink-slow         "[5m"
    :underline          "[4m"
    :underline-off      "[24m"
    :inverse            "[7m"
    :inverse-off        "[27m"
    :strikethrough      "[9m"
    :strikethrough-off  "[29m"

    ;; default color
    :default "[39m"

    ;; basic 8 foreground colors
    :black   "[30m"
    :red     "[31m"
    :green   "[32m"
    :yellow  "[33m"
    :blue    "[34m"
    :magenta "[35m"
    :cyan    "[36m"
    :white   "[37m"

    ;; bright 8 foreground colors
    :bright-black   "[30m;1"
    :bright-red     "[31m;1"
    :bright-green   "[32m;1"
    :bright-yellow  "[33m;1"
    :bright-blue    "[34m;1"
    :bright-magenta "[35m;1"
    :bright-cyan    "[36m;1"
    :bright-white   "[37m;1"

    ;; basic 8 background colors
    :bg-black   "[40m"
    :bg-red     "[41m"
    :bg-green   "[42m"
    :bg-yellow  "[43m"
    :bg-blue    "[44m"
    :bg-magenta "[45m"
    :bg-cyan    "[46m"
    :bg-white   "[47m"
    :bg-default "[49m"

   ;; bright 8 background colors
    :bg-bright-black   "[40m;1"
    :bg-bright-red     "[41m;1"
    :bg-bright-green   "[42m;1"
    :bg-bright-yellow  "[43m;1"
    :bg-bright-blue    "[44m;1"
    :bg-bright-magenta "[45m;1"
    :bg-bright-cyan    "[46m;1"
    :bg-bright-white   "[47m;1"

  })


;; -----------------------------------------------------------------------------
;; Cursor Navigation
;; -----------------------------------------------------------------------------

(defn cursor-up [rows] (str "[" rows "A"))
(defn cursor-down [rows] (str "[" rows "B"))
(defn cursor-right [cols] (str "[" cols "C"))
(defn cursor-left [cols] (str "[" cols "D"))


(defn
  ^{ :arglists '("(fg-color code")
     :doc """
          Defines an extended foreground color from the 256-color extended
          color set. The code ranges from 0 to 255.
          """
     :examples '("(ansi/fg-color 197)") }

  fg-color [code]

  (str "[38;5;" code "m"))


(defn
  ^{ :arglists '("(bg-color code")
     :doc """
          Defines an extended background color from the 256-color extended
          color set. The code ranges from 0 to 255.
          """
     :examples '("(ansi/bg-color 197)") }

  bg-color [code]

  (str "[48;5;" code "m"))


(defmacro
  ^{ :arglists '("(with-ansi & forms)")
     :doc """
          Runs the given forms with the *use-ansi* variable temporarily bound
          to true, to enable the production of any ANSI color codes specified
          in the forms.
          """
     :examples '("""(ansi/with-ansi )""") }

  with-ansi [& forms]

  `(binding [*use-ansi* true] (do ~@forms)))


(defmacro
  ^{ :arglists '("(without-ansi & forms)")
     :doc """
          Runs the given forms with the *use-ansi* variable temporarily bound
          to false, to suppress the production of any ANSI color codes
          specified in the forms.
          """
     :examples '("(ansi/without-ansi )") }

  without-ansi [& forms]

  `(binding [*use-ansi* false] (do ~@forms)))


(defn
  ^{ :arglists '("(style text styles)")
     :doc """
          Applies ANSI color and style to a text string.
          """
     :examples '(
          """(ansi/style "foo" :blue)"""
          """(ansi/style "foo" :blue :underline)"""
          """(ansi/style "foo" :blue :bg-white :underline)"""
          """(ansi/style "foo" (ansi/fg-color 21) (ansi/bg-color 221)) :underline"""
        ) }

  style [text & styles]

  (str (apply str (map ansi/ansi styles)) text (ansi :reset)))


(defn
  ^{ :arglists '("(ansi style)")
     :doc """
          Output an ANSI escape code using a style key.
          If *use-ansi* is bound to false, outputs an empty string instead of an
          ANSI code.
          """
     :examples '("(ansi/ansi :blue)"
                 "(ansi/ansi :underline)"
                 "(ansi/ansi (ansi/fg-color 21))") }

  ansi [style]

  (if *use-ansi*
    (if (string? style)
      (str "\u001b" style)
      (str "\u001b" (get ansi/ANSI-CODES style (:reset ansi/ANSI-CODES))))
    ""))


;; -----------------------------------------------------------------------------
;; Progress utils
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(progress & options)")
     :doc """
          Returns a progress handler function that takes three args
            [1] progress (0..100%)
            [2] total bytes (may be -1 if unknown)
            [3] status {:start :progress :end :failed}
          that renders the progress as a percentage string.

          E.g: 54%

          Options:
            :start-msg msg
                A start message. Defaults to 'started'.
            :end-msg msg
                An end message. Defaults to 'ok'.
            :failed-msg msg
                A failed message. Defaults to 'failed'.
          """
     :examples '("""
                 (io/download "https://foo.org/image.png"
                              :binary true
                              :user-agent "Mozilla"
                              :progress-fn (ansi/progress
                                              :start-msg   "Download started"
                                              :end-msg     "Download ok"
                                              :failed-msg  "Download failed"))
                 """) }

  progress [& options]

  (let [options    (apply hash-map options)
        start-msg  (:start-msg options "started")
        end-msg    (:end-msg options "ok")
        failed-msg (:failed-msg options "failed")]
    (fn progress-handler [percent size status])
        (let [draw      (fn [text] (print (ansi/style text (ansi/cursor-left 1000))))
              clean     (fn []     (draw (str/repeat " " (max 30 (count start-msg)))))
              overprint (fn [text] (do (clean) (draw text)))]
          (case status
            "start"    (print start-msg)
            "progress" (overprint (str percent "%"))
            "end"      (overprint (str end-msg "\n"))
            "failed"   (overprint (str failed-msg "\n"))
                       (overprint (str "Invalid status '" status "'\n"))))))


(defn
  ^{ :arglists '("(progress-bar & options)")
     :doc """
          Returns a progress handler function that takes three args
            [1] progress (0..100%)
            [2] total bytes (may be -1 if unknown)
            [3] status {:start :progress :end :failed}
          that renders the progress as a percentage bar.

          E.g: [#################        ]

          Options:
            :width val
                The width of the bar in chars. Defaults to 25.
            :start-msg msg
                A start message. Defaults to 'started'.
            :end-msg msg
                An end message. Defaults to 'ok'.
            :failed-msg msg
                A failed message. Defaults to 'failed'.
          """
     :examples '("""
                 (io/download "https://foo.org/image.png"
                              :binary true
                              :user-agent "Mozilla"
                              :progress-fn (ansi/progress-bar
                                              :start-msg   "Download started"
                                              :end-msg     "Download ok"
                                              :failed-msg  "Download failed"))
                 """) }

  progress-bar [& options]

  (let [options    (apply hash-map options)
        width      (min (max (:width options 25) 10) 100)
        start-msg  (:start-msg options "started")
        end-msg    (:end-msg options "ok")
        failed-msg (:failed-msg options "failed")]
    (fn progress-handler [percent size status]
      (let [draw      (fn [text] (print (ansi/style text (ansi/cursor-left 1000))))
            clean     (fn []     (draw (str/repeat " " (max width (count start-msg)))))
            overprint (fn [text] (do (clean) (draw text)))
            bar       (fn [perc] (let [w1 (/ (* percent width) 100)
                                       w2 (- width w)]
                                   (str "[" (str/repeat "#" w1) (str/repeat " " w2) "]")))]
        (case status
          "start"    (print start-msg)
          "progress" (overprint (bar percent))
          "end"      (overprint (str end-msg "\n"))
          "failed"   (overprint (str failed-msg "\n"))
                     (overprint (str "Invalid status '" status "'\n")))))))
