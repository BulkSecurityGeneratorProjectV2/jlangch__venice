;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Math utils


(ns math)


(defonce math/bigint-zero (. :java.math.BigInteger :ZERO))
(defonce math/bigint-one (. :java.math.BigInteger :ONE))


(defn
   ^{ :arglists '("(math/bigint x)")
      :doc "Creates a new big integer from a string, a long, or a double"
      :examples '("(math/bigint \"686686783535435353535353\")") }

   math/bigint

   [x]
      (cond
         (math/bigint? x) x
         (long? x)        (. :java.math.BigInteger :valueOf x)
         (int? x)         (. :java.math.BigInteger :valueOf (long x))
         (string? x)      (. :java.math.BigInteger :new x)
         (double? x)      (. :java.math.BigInteger :valueOf (long x))
         :else (throw (str/format
                          "Invalid parameter (%s) to create a new big integer"
                          (type x)))))


(defn
   ^{ :arglists '("(math/bigint? x)")
      :doc "Returns true if x is a big integer"
      :examples '("(math/bigint? (math/bigint 1000000))") }

   math/bigint? [x]

   (instance? :java.math.BigInteger x))


(defn
   ^{ :arglists '("(math/bigint-add x)")
      :doc "Returns the sum of two bigints"
      :examples '("(math/bigint-add (math/bigint \"100\") (math/bigint \"200\"))") }

   math/bigint-add [x y]

   (. (math/bigint x) :add (math/bigint y)))


(defn
   ^{ :arglists '("(math/bigint-sub x y)")
      :doc "Subtracts y from x"
      :examples '("(math/bigint-sub (math/bigint \"100\") (math/bigint \"200\"))") }

   math/bigint-sub [x y]

   (. (math/bigint x) :subtract (math/bigint y)))


(defn
   ^{ :arglists '("(math/bigint-mul x y)")
      :doc "Returns the product of two bigints"
      :examples '("(math/bigint-mul (math/bigint \"100\") (math/bigint \"200\"))") }

   math/bigint-mul [x y]

   (. (math/bigint x) :multiply (math/bigint y)))

(defn
   ^{ :arglists '("(math/bigint-div x y)")
      :doc "Returns x divided by y"
      :examples '("(math/bigint-div (math/bigint \"100\") (math/bigint \"200\"))") }

   math/bigint-div [x y]

   (. (math/bigint x) :divide (math/bigint y)))


(defn
   ^{ :arglists '("(math/bigint-neg x)")
      :doc "Negates x"
      :examples '("(math/bigint-neg (math/bigint \"100\"))") }

   math/bigint-neg [x]

   (. (math/bigint x) :negate))


(defn
   ^{ :arglists '("(math/bigint-sig x)")
      :doc "Returns the signum of x"
      :examples '("(math/bigint-sig (math/bigint \"-100\"))") }

   math/bigint-sig [x]

   (. (math/bigint x) :signum))


(defn
   ^{ :arglists '("(math/bigint-abs x)")
      :doc "Returns the absolute value of x"
      :examples '("(math/bigint-abs (math/bigint \"-100\"))") }

   math/bigint-abs [x]

   (. (math/bigint x) :abs))


(defn
   ^{ :arglists '("(math/bigint-to-long x)")
      :doc "Converts the big integer x to a long"
      :examples '("(math/bigint-to-long (math/bigint \"-100\"))") }

   math/bigint-to-long [x]

   (. (math/bigint x) :longValue))
