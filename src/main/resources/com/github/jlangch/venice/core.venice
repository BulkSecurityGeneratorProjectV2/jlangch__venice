;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice core macros & functions


(ns core)

(defmacro
  ^{ :arglists '("(comment & body)")
     :doc "Ignores body, yields nil"
     :examples (list
          """
          (comment
            (println 1)
            (println 5))
          """ ) }

   comment [& body] nil)


(defmacro
  ^{ :arglists '("(assert expr)" "(assert expr message)")
     :doc "Evaluates expr and throws an exception if it does not evaluate to logical true." }

  assert [expr message]

  `(if ~message
       (when-not ~expr
         (throw (. :com.github.jlangch.venice.AssertionException
                   :new
                   (str "Assert failed (" ~message "): " (pr-str '~expr)))))
       (when-not ~expr
         (throw (. :com.github.jlangch.venice.AssertionException
                   :new
                   (str "Assert failed: " (pr-str '~expr)))))))


(defmacro
  ^{ :arglists '(
          "(defn name [args*] condition-map? expr*)"
          "(defn name ([args*] condition-map? expr*)+)")
     :doc """
          Same as (def name (fn name [args*] condition-map? expr*)) or
          (def name (fn name ([args*] condition-map? expr*)+))
          """
     :examples '(
          "(defn sum [x y] (+ x y))"
          "(defn sum [x y] { :pre [(> x 0)] } (+ x y))") }

   defn [name & forms]

   (if (vector? (first forms))
      `(def ~name (fn ~name ~(first forms) ~@(rest forms)))
      `(def ~name (fn ~name ~@forms))))


(defmacro
  ^{ :arglists '(
          "(defn- name [args*] condition-map? expr*)"
          "(defn- name ([args*] condition-map? expr*)+)")
     :doc "Same as defn, yielding non-public def"
     :examples '("(defn- sum [x y] (+ x y))") }

   defn- [name & forms]

   (list* `defn (with-meta name (assoc (meta name) :private true)) forms))


(defmacro
  ^{ :arglists '("(and x)" "(and x & next)")
     :doc "Ands the predicate forms"
     :examples '("(and true true)", "(and true false)") }

  and

  ([] true)
  ([x] x)
  ([x & next] `(let [cond# ~x]
                  (if cond# (and ~@next) cond#))))


(defmacro
  ^{ :arglists '("(or x)" "(or x & next)")
     :doc "Ors the predicate forms"
     :examples '("(or true false)", "(or false false)") }

  or

  ([] false)
  ([x] x)
  ([x & next] `(let [cond# ~x]
                  (if cond# cond# (or ~@next)))))


(defmacro
  ^{ :arglists '("(cond & clauses)")
     :doc """
          Takes a set of test/expr pairs. It evaluates each test one at a time.
          If a test returns logical true, cond evaluates and returns the value
          of the corresponding expr and doesn't evaluate any of the other tests
          or exprs. (cond) returns nil.
          """
     :examples (list
          """
          (let [n 5]
            (cond
              (< n 0) "negative"
              (> n 0) "positive"
              :else "zero"))
          """ ) }

  cond [& clauses]

  (when (not-empty? clauses)
    (list 'if (first clauses)
          (if (rest clauses)
              (second clauses)
              (throw "cond requires an even number of forms"))
          (cons 'cond (rest (rest clauses))))))


(defmacro
  ^{ :arglists '("(condp pred expr & clauses)")
     :doc """
          Takes a binary predicate, an expression, and a set of clauses.
          Each clause can take the form of either:
              test-expr result-expr
              test-expr :>> result-fn
          Note :>> is an ordinary keyword.
          For each clause, (pred test-expr expr) is evaluated. If it returns
          logical true, the clause is a match. If a binary clause matches, the
          result-expr is returned, if a ternary clause matches, its result-fn,
          which must be a unary function, is called with the result of the
          predicate as its argument, the result of that call being the return
          value of condp. A single default expression can follow the clauses,
          and its value will be returned if no clause matches. If no default
          expression is provided and no clause matches, a VncException
          is thrown.
          """
     :examples (list
          """
          (condp some [1 2 3 4]
             #{0 6 7} :>> inc
             #{4 5 9} :>> dec
             #{1 2 3} :>> #(* % 10))
          """,
          """
          (condp some [-10 -20 0 10]
            pos?  1
            neg? -1
            (constantly true)  0)
          """ ) }

  condp [pred expr & clauses]

  (let [gpred (gensym "pred__")
        gexpr (gensym "expr__")
        emit (fn emit [pred expr args]
               (let [[[a b c :as clause] more]
                       (split-at (if (== :>> (second args)) 3 2) args)
                       n (count clause)]
                 (cond
                  (== 0 n) `(throw (. :VncException :new (str "No matching clause: " ~expr)))
                  (== 1 n) a
                  (== 2 n) `(if (~pred ~a ~expr)
                              ~b
                              ~(emit pred expr more))
                  :else (let [p (gensym "pred__")]
                           `(if-let [~p (~pred ~a ~expr)]
                              (~c ~p)
                              ~(emit pred expr more))))))]
    `(let [~gpred ~pred
           ~gexpr ~expr]
       ~(emit gpred gexpr clauses))))


(defmacro
  ^{ :arglists '("(case expr & clauses)")
     :doc """
          Takes an expression and a set of clauses. Each clause takes the form
          of test-constant result-expr
          """
     :examples (list
          """
          (case (+ 1 9)
            10  :ten
            20  :twenty
            30  :thirty
            :dont-know)
          """ ) }

     ;; rewrites to (let [e (+ 1 9)]
     ;;                (cond
     ;;                  (== e 10) :ten
     ;;                  (== e 20) :twenty
     ;;                  (== e 30) :thirty
     ;;                  :else :dont-know))

  case [expr & clauses]

  (let [expr-sym (gensym "expr_")
        default_ (if (odd? (count clauses)) (last clauses) nil)
        pairs_ (partition 2 (if (odd? (count clauses)) (butlast clauses) clauses))]
    `(let [~expr-sym ~expr]
       (cond
         ~@(mapcat (fn [[test-const_ result-expr_]]
                       `((== ~expr-sym ~test-const_) ~result-expr_))
                      pairs_)
         :else ~default_))))


(defmacro
  ^{ :arglists '(
          "(if-not then)",
          "(if-not then else)")
     :doc """
          Evaluates test. If logical false, evaluates and returns then expr,
          otherwise else expr, if supplied, else nil.
          """
     :examples '(
          "(if-not (== 1 2) 100 0)",
          "(if-not (== 1 2) 100)") }

  if-not

  ([test then] `(if-not ~test ~then nil))
  ([test then else] `(if (not ~test) ~then ~else)))


(defmacro
  ^{ :arglists '("(when test & body)")
     :doc "Evaluates test. If logical true, evaluates body in an implicit do."
     :examples '("(when (== 1 1) true)") }

  when [test & body]

  `(if ~test (do ~@body)))


(defmacro
  ^{ :arglists '("(when-not test & body)")
     :doc "Evaluates test. If logical false, evaluates body in an implicit do."
     :examples '("(when-not (== 1 2) true)") }

  when-not [test & body]

  `(if ~test nil (do ~@body)))


(defmacro
  ^{ :arglists '(
          "(if-let bindings then)"
          "(if-let bindings then else)")
     :doc """
          bindings is a vector with 2 elements: binding-form test.
          If test is true, evaluates then with binding-form bound to the value
          of test, if not, yields else
          """
     :examples (list
          """
          (if-let [value (* 100 2)]
            (str "The expression is true. value=" value)
            (str "The expression is false."))
          """ ) }

  if-let [bindings then else]

  (let [temp (gensym "temp_")
        form (first bindings)
        tst (second bindings)]
    `(let [~temp ~tst]
      (if ~temp
        (let [~form ~temp]
          ~then)
        ~else))))


(defmacro
  ^{ :arglists '("(dotimes bindings & body)")
     :doc "Repeatedly executes body with name bound to integers from 0 through n-1."
     :examples '("""(dotimes [n 3] (println (str "n is " n)))""" ) }

  dotimes [bindings & body]

  (let [i (first bindings)
        n (second bindings)]
      `(let [k# (long ~n)]
          (loop [~i 0]
            (when (< ~i k#)
                ~@body
                (recur (inc ~i)))))))


(defmacro
  ^{ :arglists '("(while test & body)")
     :doc """
          Repeatedly executes body while test expression is true. Presumes some
          side-effect will cause test to become false/nil. Returns nil.
          """
     :examples (list
          """
          (do
            (def a (atom 5))
            (while (pos? (deref a))
              (do (println (deref a)) (swap! a dec))))
          """ ) }

  while [test & body]

  `(loop []
      (when ~test
        ~@body
        (recur))))


(defmacro
  ^{ :arglists '("(doto x & forms)")
     :doc """
          Evaluates x then calls all of the methods and functions with the value
          of x supplied at the front of the given arguments. The forms are
          evaluated in order. Returns x.
          """
     :examples (list
          """
          (doto (. :java.util.HashMap :new)
                (. :put :a 1)
                (. :put :b 2))
          """ ) }

  doto [x & forms]

  (let [gx (gensym)]
    `(let [~gx ~x]
       ~@(map (fn [f] `(~(first f) ~gx ~@(rest f))) forms)
       ~gx)))


(defmacro
  ^{ :arglists '("(-> x & forms)")
     :doc """
          Threads the x through the forms. Inserts x as the second item in the
          first form, making a list of it if it is not a list already.
          If there are more forms, inserts the first form as the second item in
          second form, etc.
          """
     :examples (list
          """
          (-> 5 (+ 3) (/ 2) (- 1))
          """
          """
          (do
            (def person
                 {:name "Peter Meier"
                  :address {:street "Lindenstrasse 45"
                            :city "Bern"
                            :zip 3000}})

            (-> person :address :street))
          """ ) }

  -> [x & forms]

  (loop [x x, forms forms]
    (if forms
      (let [form (first forms)
            threaded (if (list? form)
                       `(~(first form) ~x ~@(empty-to-nil(rest form)))
                       (list form x))]
        (recur threaded (empty-to-nil(rest forms))))
      x)))


(defmacro
  ^{ :arglists '("(->> x & forms)")
     :doc """
          Threads the x through the forms. Inserts x as the last item in the
          first form, making a list of it if it is not a list already. If there
          are more forms, inserts the first form as the last item in second
          form, etc.
          """
     :examples (list
          "(->> 5 (+ 3) (/ 32) (- 1))"
          """
          (->> [ {:a 1 :b 2} {:a 3 :b 4} {:a 5 :b 6} {:a 7 :b 8} ]
               (map (fn [x] (get x :b)))
               (filter (fn [x] (> x 4)))
               (map inc))))
          """ ) }

  ->> [x & forms]

   (loop [x x, forms forms]
     (if forms
       (let [form (first forms)
             threaded (if (list? form)
                         `(~(first form) ~@(empty-to-nil(rest form)) ~x)
                         (list form x))]
         (recur threaded (empty-to-nil(rest forms))))
       x)))


(defmacro
  ^:private

  ;; serves the macro -<>. Inserts x in place of '<>' in form

  -<>* [form x]

  (let [substitute-pos (fn [form_] (replace {'<> x} form_))
        count-pos (fn [form_] (count (filter #(== % '<>) form_)))
        c (cond
            (or (set? form) (list? form) (vector? form)) (count-pos form)
            (map? form) (count-pos (mapcat concat form))
            :otherwise 0)]
    (cond
      (not (== c 1))   (throw (. :VncException :new "-<> macro: one position per form is required."))
      (symbol? form)   `(~form ~x)
      (vector? form)   (substitute-pos form)
      (map? form)      (apply hash-map (mapcat substitute-pos form))
      :else            `(~(first form) ~@(substitute-pos (rest form))))))

(defmacro
  ^{ :arglists '("(-<> x & forms)")
     :doc """
          Threads the x through the forms. Inserts x at position of the <>
          symbol of the first form, making a list of it if is not a list
          already. If there are more forms, inserts the first form at position
          of the <> symbol in second form, etc.
          """
     :examples (list
          """
          (-<> 5
               (+ <> 3)
               (/ 2 <>)
               (- <> 1))
          """ ) }

  -<>

  ([x] x)
  ([x form] `(-<>* ~form ~x))
  ([x form & forms] `(-<> (-<> ~x ~form) ~@forms)))


(defmacro
  ^{ :arglists '("(as-> expr name & forms)")
     :doc """
          Binds name to expr, evaluates the first form in the lexical context of
          that binding, then binds name to that result, repeating for each
          successive form, returning the result of the last form. This allows a
          value to thread into any argument position.
          """
     :examples (list
          """
          ; allows to use arbitrary positioning of the argument
          (as-> [:foo :bar] v
                (map name v)
                (first v)
                (str/subs v 1))
          """
          """
          ; allows the use of if statements in the thread
          (as-> {:a 1 :b 2} m
                (update m :a #(+ % 10))
                (if true
                  (update m :b #(+ % 10))
                  m))
          """ ) }

  as-> [expr name & forms]

  `(let [~name ~expr
         ~@(interleave (repeat (count forms) name) (butlast forms))]
      ~(if (empty? forms)
           name
           (last forms))))


(defmacro
  ^{ :arglists '("(list-comp seq-exprs body-expr)")
     :doc """
          List comprehension. Takes a vector of one or more binding-form /
          collection-expr pairs, each followed by zero or more modifiers, and
          yields a collection of evaluations of expr.
          Supported modifiers are: :when predicate
          """
     :examples '(
          "(list-comp [x (range 10)] x)"
          "(list-comp [x (range 5)] (* x 2))"
          "(list-comp [x (range 10) :when (odd? x)] x)"
          "(list-comp [x (range 10) :when (odd? x)] (* x 2))"
          "(list-comp [x (list \"abc\") y [0 1 2]] [x y])") }

  list-comp [[binding_ coll-expr & bindings] body-expr]

  (cond (not binding_)
    `(list ~body-expr)

    (== :when binding_)
      `(when ~coll-expr (list-comp ~bindings ~body-expr))

    :else
      `(mapcat (fn [~binding_] (list-comp ~bindings ~body-expr))
                ~coll-expr)))


(defmacro
  ^{ :arglists '("(time expr)")
     :doc "Evaluates expr and prints the time it took.  Returns the value of expr."
     :examples '("(time (+ 100 200))") }

  time [expr]

  `(let [start# (nano-time)
         ret# ~expr
         end# (nano-time)
         elapsed# (- end# start#)]
     (printf "Elapsed time: %s%n" (format-nano-time elapsed# :precision 2))
     ret#))


(defmacro
  ^{ :arglists '("(perf expr warmup-iterations test-iterations)")
     :doc """
          Performance test with the given expression.

          Runs the test in 3 phases:
             1. Runs the expr in a warmup phase to allow the HotSpot compiler
                to do optimizations.
             2. Runs the garbage collector.
             3. Runs the expression under profiling. Returns nil.

          After a test run metrics data can be obtained with (prof :data-formatted)
          """
     :examples (list
          """
          (do
            (perf (+ 120 200) 12000 1000)
            (println (prof :data-formatted)))
          """ ) }

  perf [expr warmup-iterations test-iterations]

  `(do
     (prof :on)
     (prof :clear)
     (let [fn-perf-warmup# (fn _warmup [] (dorun ~warmup-iterations ~expr))
           fn-perf-gc# (fn _warmup-gc [] (dorun 2 (gc)))
           fn-perf-test# (fn _test [] (dorun ~test-iterations ~expr))]
       (fn-perf-warmup#)
       (fn-perf-gc#)
       (prof :clear-all-but ["_warmup" "_warmup-gc"])
       (fn-perf-test#)
       (prof :off))
     nil))


(defmacro
  ^{ :arglists '("(load-string s)")
     :doc "Sequentially read and evaluate the set of forms contained in the string."
     :examples (list
          """
          (do
            (load-string "(def x 1)")
            (+ x 2))
          """ ) }

  load-string [s]

  `(eval (read-string (str "(do " ~s ")"))))


(defmacro
  ^{ :arglists '(
          "(load-file file)",
          "(load-file file force)")
     :doc """
          Sequentially read and evaluate the set of forms contained in the file.
          The global var *load-path* holds a list of paths that are tried to
          load the file. If *load-path* is empty the file is loaded from the
          current working directory.
          """
     :examples '(
          """(load-file "coffee")""",
          """(load-file "coffee.venice")""",
          """(load-file "beverages/coffee")""" ) }

  load-file

  ([file]
    `(load-file ~file false))

  ([file force]
    `(let [fc# (name ~file)]
       (when (or force (not-contains? core/*loaded-files* fc#))
         (let [code# (str "(do " (*load-file fc# core/*load-path*) ")")
               parsed# (read-string code# fc#)
               expanded# (if core/*macroexpand-on-load*
                           (macroexpand-all parsed#)
                           parsed#)]
           (cons! fc# core/*loaded-files*)
           (eval expanded#)
           fc#)))))


(defmacro
  ^{ :arglists '(
          "(load-classpath-file name)",
          "(load-classpath-file name force)")
     :doc """
          Sequentially read and evaluate the set of forms contained in the
          classpath file. The function is restricted to classpath files with
          the extension '.venice'.
          """
     :examples (list
          """
          (do
            (load-classpath-file "com/github/jlangch/venice/test.venice")
            (test/test-fn "hello"))
          """,
          """
          (do
            (load-classpath-file "com/github/jlangch/venice/test.venice")
            (test/test-fn "hello")
            ; reload the classpath file
            (ns-remove test)
            (load-classpath-file "com/github/jlangch/venice/test.venice" true)
            (test/test-fn "hello"))
          """ ) }

  load-classpath-file

  ([file]
    `(load-classpath-file ~file false))

  ([file force]
    `(when (or ~force (not-contains? core/*loaded-files* (name ~file)))
       (let [code# (str "(do " (*load-classpath-file ~file) ")")
             parsed# (read-string code# ~file)
             expanded# (if core/*macroexpand-on-load*
                         (macroexpand-all parsed#)
                         parsed#)]
         (cons! (name ~file) core/*loaded-files*)
         (eval expanded#)
         ~file))))


(defmacro
  ^{ :arglists '(
          "(load-module m)",
          "(load-module m force)")
     :doc "Loads a Venice predefined extension module."
     :examples '(
           """
           (load-module :math)
           """,
           """
           (do
             (load-module :math)
             ; reload the module
             (ns-remove math)
             (load-module :math true))
           """) }

  load-module

  ([m]
    `(load-module ~m false))

  ([m force]
    `(when (or ~force (not-contains? core/*loaded-modules* (keyword (name ~m))))
       (let [code# (str "(do " (*load-module ~m) ")")
             parsed# (read-string code# ~m)]
         (cons! (keyword (name ~m)) core/*loaded-modules*)
         (eval parsed#)
         (keyword (name ~m))))))


(defmacro
  ^{ :arglists '("(with-sh-dir dir & forms)")
     :doc "Sets the directory for use with sh, see sh for details."
     :examples '("""(with-sh-dir "/tmp" (sh "ls" "-l"))""") }

  with-sh-dir [dir & forms]

  `(do
      (when-not (io/exists-dir? (io/file ~dir))
         (throw (. :VncException
                   :new
                   (str/format "The dir '%s' does not exist" ~dir))))
      (binding [*sh-dir* ~dir] (do ~@forms))))


(defmacro
  ^{ :arglists '("(with-sh-env env & forms)")
     :doc "Sets the environment for use with sh, see sh for details."
     :examples '("""(with-sh-env {"NAME" "foo"} (sh "ls" "-l"))""") }

  with-sh-env [env & forms]

  `(do (binding [*sh-env* ~env] (do ~@forms))))


(defmacro
  ^{ :arglists '("(with-sh-throw forms)")
     :doc """
          If true throws an exception if the spawned shell process returns an
          exit code other than 0. If false return the exit code. Defaults to
          false. For use with sh, see sh for details.
          """
     :examples '("""(with-sh-throw (sh "ls" "-l"))""") }

  with-sh-throw [& forms]

  `(do (binding [*sh-throw-ex* true] (do ~@forms))))


(defmacro
  ^{ :arglists '("(with-out-str & forms)")
     :doc """
          Evaluates exprs in a context in which *out* is bound to a capturing
          output stream. Returns the string created by any nested printing
          calls.
          """
     :examples '("""(with-out-str (println "a string"))""") }

  with-out-str [& forms]

  `(do
      (binding [*out* (. :com.github.jlangch.venice.util.CapturingPrintStream :create)]
         (do ~@forms)
         (. *out* :getOutput))))


(defmacro
  ^{ :arglists '("(delay & body)")
     :doc """
          Takes a body of expressions and yields a Delay object that will invoke
          the body only the first time it is forced (with force or deref/@), and
          will cache the result and return it on all subsequent force calls.
          """
     :examples '(
          """
          (do
            (def x (delay (println "working...") 100))
            (deref x))
          """) }

  delay [& body]

  `(. :com.github.jlangch.venice.impl.types.concurrent.Delay
      :new
      (fn [] (do ~@body))))


(defn
  ^{ :arglists '("(print & xs)")
     :doc """
          Prints to stdout, with no args, prints the empty string. With one
          arg x, prints x.toString(). With more than one arg, prints the
          concatenation of the str values of the args with delimiter ' '.
          Returns nil.
          """
     :examples '("(print [10 20 30])") }

  print

  ([] nil)
  ([x] (. *out* :append (str (coalesce x "nil"))) nil)
  ([& xs] (. *out* :append (str/join " " (map #(str (coalesce % "nil")) xs))) nil))


(defn
  ^{ :arglists '("(printf fmt & args)")
     :doc "Prints formatted output, as per format."
     :examples '(
          """(printf "%s: %d" "abc" 100)"""
          """(printf "line 1: %s%nline 2: %s%n" "123" "456")""" ) }

  printf

  [fmt & args] (print (apply str/format fmt args)))


(defn
  ^{ :arglists '("(println & xs)")
     :doc """
          Prints to stdout with a tailing linefeed, with no args, prints the
          empty string. With one arg x, prints x.toString(). With more than one
          arg, prints the concatenation of the str values of the args with
          delimiter ' '. Returns nil.
          """
     :examples '(
          """
          (do
            (println 200)
            (println [10 20 30]))
          """) }

  println

  ([] (newline))
  ([& xs] (do (apply print xs) (newline) nil)))


(defn
  ^{ :arglists '("(newline)")
     :doc "Writes a platform-specific newline to *out*"
     :examples '("(newline)") }

  newline

  [] (do (. *out* :append *newline*) nil))


(defn
  ^{ :arglists '("(flush)", "(flush os)")
     :doc """
          Without arg flushes the output stream that is the current value
          of *out*. With arg flushes the passed output stream.
          """
     :examples '("(flush)", "(flush *out*)") }

  flush

  [os] (let [out (coalesce os *out*)] (. out :flush) nil))


(defn
  ^{ :arglists '("(not x)")
     :doc "Returns true if x is logical false, false otherwise."
     :examples '("(not true)"
                 "(not (== 1 2))") }

  not

  [x] (if x false true))

(defn
  ^{ :arglists '("(complement f)")
     :doc """
          Takes a fn f and returns a fn that takes the same arguments as f has
          the same effects, if any, and returns the opposite truth value.
          """
     :examples '("(complement even?)"
                 "(filter (complement even?) '(1 2 3 4))") }

  complement

  [f] (fn
         ([] (not (f)))
         ([x] (not (f x)))
         ([x y] (not (f x y)))
         ([x y & zs] (not (apply f x y zs)))))

(defn
  ^{ :arglists '("(identity x)")
     :doc "Returns its argument."
     :examples '(
          "(identity 4)"
          "(filter identity [1 2 3 nil 4 false true 1234])") }

  identity

  [x] x)


(defn
  ^{ :arglists '("(rf-first)")
     :doc "Returns a reducing function for a transducer that returns the first item."
     :examples '(
          "(transduce (filter number?) rf-first [false 1 2])"
          "(transduce identity rf-first [nil 1 2])") }

  rf-first

  ([] nil)
  ([x] x)
  ([x y] (reduced y)))


(defn
  ^{ :arglists '("(rf-last)")
     :doc "Returns a reducing function for a transducer that returns the last item."
     :examples '(
          "(transduce (filter number?) rf-last [false 1 2])"
          "(transduce identity rf-last [1 2 1.2])") }

  rf-last

  ([] nil)
  ([x] x)
  ([x y] y))


(defn
  ^{ :arglists '("(rf-any? pred)")
     :doc """
          Returns a reducing function for a transducer that returns true if the
          predicate is true for at least one the items, false otherwise.
          """
     :examples '(
          "(transduce (filter number?) (rf-any? pos?) [true -1 1 2 false])") }

  rf-any?

  [pred] (fn
           ([] false)
           ([x] x)
           ([x y] (if (pred y) (reduced true) x))))


(defn
  ^{ :arglists '("(rf-every? pred)")
     :doc """
          Returns a reducing function for a transducer that returns true if the
          predicate is true for all the items, false otherwise.
          """
     :examples '(
          "(transduce (filter number?) (rf-every? pos?) [1 2 3])") }

  rf-every?

  [pred] (let [empty_ (volatile true)]
            (fn
              ([] false)
              ([x] x)
              ([x y] (do
                       (let [r (if @empty_ (pred y) (and x (pred y)))]
                         (reset! empty_ false)
                         (if r r (reduced r))))))))


(defn
  ^{ :arglists '("(constantly x)")
     :doc """
          Returns a function that takes any number of arguments and returns
          always the value x.
          """
     :examples '(
          """
          (do
            (def fix (constantly 10))
            (fix 1 2 3)
            (fix 1)
            (fix ))
          """) }

  constantly

  [x] (fn [& args] x))


(defn
  ^{ :arglists '("(zipmap keys vals)")
     :doc "Returns a map with the keys mapped to the corresponding vals."
     :examples '("(zipmap [:a :b :c :d :e] [1 2 3 4 5])"
                 "(zipmap [:a :b :c] [1 2 3 4 5])") }

  zipmap [keys vals]

  (loop [omap (ordered-map)
         ks (seq keys)
         vs (seq vals)]
     (if (and (not-empty? ks) (not-empty? vs))
        (recur (assoc omap (first ks) (first vs))
               (rest ks)
               (rest vs))
        omap)))


(defn
  ^{ :arglists '("(memoize f)")
     :doc "Returns a memoized version of a referentially transparent function."
     :examples (list
          """
          (do
            (def fibonacci
              (memoize
                (fn [n]
                  (cond
                    (<= n 0) 0
                    (< n 2) 1
                    :else (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))))

            (time (fibonacci 25)))
          """ ) }

  memoize

  [f]
    (let [mem_ (atom {})]
      (fn [& args]
        (if-let [e (find @mem_ args)]
          (val e)
          (let [ret (apply f args)]
            (swap! mem_ assoc args ret)
            ret)))))


(defn
  ^{ :arglists '("(trampoline f)" "(trampoline f & args)")
     :doc """
          trampoline can be used to convert algorithms requiring mutual
          recursion without stack consumption. Calls f with supplied args,
          if any. If f returns a fn, calls that fn with no arguments, and
          continues to repeat, until the return value is not a fn, then
          returns that non-fn value. Note that if you want to return a fn
          as a final value, you must wrap it in some data structure and
          unpack it after trampoline returns.
          """ }

  trampoline

  ([f]
    (loop [f f]
      (let [ret (f)]
        (if (fn? ret)
          (recur ret)
          ret))))
  ([f & args]
     (trampoline #(apply f args))))


(defn
  ^{ :arglists '("(runtime-exception msg)" "(runtime-exception msg ex)")
     :doc "Creates a java.lang.RuntimeException"
     :examples '("""(throw (runtime-exception "test"))""") }

   runtime-exception

   ([msg] (. :RuntimeException :new msg))
   ([msg ex] (. :RuntimeException :new msg ex)))


(defn
  ^{ :arglists '("(venice-exception msg)" "(venice-exception msg ex)")
     :doc "Creates a com.github.jlangch.venice.VncException"
     :examples '("""(throw (venice-exception "test"))""") }

   venice-exception

   ([msg] (. :VncException :new msg))
   ([msg ex] (. :VncException :new msg ex)))


(defn-
  ^{ :arglists '("(walk inner outer form)")
     :doc """
          Traverses form, an arbitrary data structure. inner and outer are
          functions. Applies inner to each element of form, building up a
          data structure of the same type, then applies outer to the result.

          Do not call this function directly use core/postwalk or
          core/prewalk instead.
          """ }

  walk [inner outer form]

  (cond
    (list? form) (outer (apply list (map inner form)))
    (map-entry? form) (outer (map-entry (inner (key form)) (inner (val form))))
    (coll? form) (outer (into (empty form) (map inner form)))
    :else (outer form)))


(defn
  ^{ :arglists '("(postwalk f form)")
     :doc """
          Performs a depth-first, post-order traversal of form. Calls f on
          each sub-form, uses f's return value in place of the original.
          """
     :examples (list
          """
          (postwalk (fn [x] (println "Walked:" (pr-str x)) x)
                    '(1 2 {:a 1 :b 2}))
          """) }

  postwalk [f form]

  (core/walk (partial postwalk f) f form))


(defn
  ^{ :arglists '("(prewalk f form)")
     :doc """
          Performs a depth-last, pre-order traversal of form. Calls f on
          each sub-form, uses f's return value in place of the original.
          """
     :examples (list
          """
          (prewalk (fn [x] (println "Walked:" (pr-str x)) x)
                   '(1 2 {:a 1 :b 2}))
          """) }

  prewalk [f form]

  (core/walk (partial prewalk f) identity (f form)))


(defn
  ^{ :arglists '("(macroexpand-all form)")
      :doc "Recursively expands all macros in the form."
      :examples (list
          "(macroexpand-all '(and true true))",
          "(macroexpand-all '(and true (or true false) true))"
          "(macroexpand-all '(let [n 5] (cond (< n 0) -1 (> n 0) 1 :else 0)))" ) }

  macroexpand-all [form]

  (core/prewalk (fn [x] (if (list? x) (macroexpand x) x)) form))
