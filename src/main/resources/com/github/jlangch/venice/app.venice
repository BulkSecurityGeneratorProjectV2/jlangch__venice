;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice application archive functions


(ns app)

(defn
  ^{ :arglists '("(app/build name main-file file-map dest-dir)")
     :doc """
          Creates a Venice application archive.

          E.g.:

          (app/build "test"
                     "chart.venice"
                     { "chart.venice" "./foo/chart.venice"
                       "utils.venice" "./foo/utils.venice" }
                     ".")
          """ }

  app/build [name main-file file-map dest-dir]

  (when-not (io/exists-dir? (io/file dest-dir))
    (throw (. :VncException :new
              (str/format "The dest-dir '%s' does not exist." dest-dir))))

  (-<> (json/write-str { :manifest-version "1.0"
                         :app-name name
                         :main-file main-file
                         :created-by (str "Venice " (version))})
       (bytebuf-from-string <> :utf-8)
       (list "MANIFEST.MF" <>)
       (into <> file-map)
       (flatten <>)
       (apply io/zip <>)
       (io/spit (io/file dest-dir (str name ".zip")) <>)))

(defn
  ^{ :arglists '("(app/manifest app)")
     :doc "Returns the manifest of a Venice application archive." }

  app/manifest [app]

  (when-not (io/exists-file? (io/file app))
    (throw (. :VncException :new
              (str/format "The application archive '%s' does not exist."
                          (io/file-path (io/file app))))))

  (try
    (-<> (io/file app)
         (io/unzip <> "MANIFEST.MF")
         (bytebuf-to-string <> :utf-8)
         (json/read-str <> :key-fn keyword))
    (catch :Exception ex
      (throw (. :VncException :new
                (str/format "Failed to load manifest from application archive '%s'."
                            (io/file-path (io/file app)))
                ex)))))
