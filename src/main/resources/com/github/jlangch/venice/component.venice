;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice component module


(ns component)


(defprotocol Component
  ;; Begins operation of this component. Synchronous, does not return
  ;; until the component is started. Returns an updated version of this
  ;; component.
  (start [component] )

  ;; Ceases operation of this component. Synchronous, does not return
  ;; until the component is stopped. Returns an updated version of this
  ;; component.
  (stop [component] )

  ;; Injects a map of dependent components. Dependent components are injected
  ;; before this component is started. Returns an updated version of this
  ;; component.
  (inject [component component-map] ))


(deftype :system [name         :string
                  components   :map
                  dependencies :dag/dag]
  Component
    (start [system]
      (start-system system))
    (stop [system]
      (stop-system system))
    (inject [system component-map]
      system))


(deftype :component-info [id          :keyword
                          system-name :string
                          components  :map]
  component/Component
    (start [this] this)
    (stop [this] this)
    (inject [this deps] this))


(deftype :component-ex [message       :string
                        reason        :keyword
                        component-key :any
                        system        :system
                        cause         :com.github.jlangch.venice.VncException?])


(defn
  ^{ :arglists '("(system-map name keyval*)")
     :doc """
          Returns a system constructed of components given as key/value pairs.
          The system has default implementations of the Lifecycle 'start' and
          'stop' methods which recursively starts/stopss all components in the
          system.
          """
     :examples '(
          """
          (do
            (load-module :component)

            (deftype :server [port       :long
                              components :map]
               component/Component
                 (start [this] (println ":server started") this)
                 (stop [this] (println ":server stopped") this)
                 (inject [this deps] (assoc this :components deps)))

            (deftype :database [user       :string
                                password   :string
                                components :map]
               component/Component
                 (start [this] (println ":database started") this)
                 (stop [this] (println ":database stopped") this)
                 (inject [this deps] (assoc this :components deps)))

            (component/system-map
                 "test"
                 :server (server. 4600 {})
                 :store  (database. "foo" "123" {})))
          """ )
     :see-also '( "component/system-using" ) }

  system-map [name & keyvals]

  (when-not (even? (count keyvals))
    (throw (ex :VncException
               """
               Function 'component/system' requires an even number of component
               keyvals!
               """)))
  (system. name (apply ordered-map keyvals) (dag/dag)))


(defn
  ^{ :arglists '("(system-using system dependency-map)")
     :doc """
          Associates a component dependency graph with the system.
          `dependency-map` is a map of keys in the system to maps or vectors
          specifying the dependencies of the component at that key in the
          the system.
          """
     :examples '(
          """
          (do
            (load-module :component)

            (deftype :server [port       :long
                              components :map]
               component/Component
                 (start [this] (println ":server started") this)
                 (stop [this] (println ":server stopped") this)
                 (inject [this deps] (assoc this :components deps)))

            (deftype :database [user       :string
                                password   :string
                                components :map]
               component/Component
                 (start [this] (println ":database started") this)
                 (stop [this] (println ":database stopped") this)
                 (inject [this deps] (assoc this :components deps)))

            (defn create-system []
              (-> (component/system-map
                     "test"
                     :server (server. 4600 {})
                     :store  (database. "foo" "123" {}))
                  (component/system-using {:server [:store]})))

            (-> (create-system)
                (component/start)
                ((fn [s] (println "  sleeping...") (sleep 2 :seconds) s))
                (component/stop)))
          """ )
     :see-also '( "component/system-map" ) }

  system-using [system dependency-map]

  (let [deps (reduce-kv (fn [dag_ k v]
                          (->> (interleave (repeat k) v)
                               (partition 2)
                               (apply dag/add-edges dag_)))
                        (dag/dag)
                        dependency-map)]
    (assoc system :dependencies deps)))


(defn-
  ^{ :arglists '("(start-system system)")
     :doc """
          Recursively starts the components in the system in dependency order.
          """ }

  start-system [system]

  (let [graph      (:dependencies system)
        components (:components system)]
    (->> (reduce (fn [components key]
                   (assoc components
                          key
                          (let [dep-keys (dag/direct-children graph key)]
                            (-> (get-component components key system)
                                (inject (get-component-dependency-map key
                                                                      system
                                                                      components
                                                                      dep-keys))
                                (start-component system key)))))
                 components
                 (reverse (dag/topological-sort graph)))
         (assoc system :components))))


(defn-
  ^{ :arglists '("(stop-system system)")
     :doc "Recursively stops the components in the system in dependency order." }

  stop-system [system]

  (let [graph      (:dependencies system)
        components (:components system)]
    (->> (reduce (fn [components key]
                   (assoc components key
                          (-> (get-component components key system)
                              (stop-component system key))))
                 components
                 (dag/topological-sort graph))
         (assoc system :components))))


(defn- get-component-dependency-map [key system components dep-keys]
  (assoc (zipmap dep-keys
                 (map #(get-dependency components % system) dep-keys))
         :component-info
         (component-info. key (:name system) {})))


(defn- get-dependency [components key system]
 (let [component (get components key :not-found)]
   (when (nil? component)
     (throw (ex :VncException
                """
                Component ~{key} was nil in system '~(:name system)'; maybe
                it returned nil from start or stop!
                """)))
   (when (= :not-found component)
     (throw (ex :VncException
                "Missing dependency ~{key} in system '~(:name system)'!")))
   component))


(defn- get-component [components key system]
  (let [component (get components key :not-found)]
    (when (nil? component)
      (throw (ex :VncException
                 """
                 Component ~{key} was nil in system '~(:name system)'; maybe
                 it returned nil from start or stop!
                 """)))
    (when (= :not-found component)
      (throw (ex :VncException
                 "Missing component ~{key} in system '~(:name system)'!")))
    component))


(defn- start-component [component system key]
  (try (start component)
       (catch :VncException e
              (throw (ex :VncException
                         "Failed to start component ~{key} in system '~(:name system)'!"
                         e)))))


(defn- stop-component [component system key]
  (try (stop component)
       (catch :VncException e
              (throw (ex :VncException
                         "Failed to stop component ~{key} in system '~(:name system)'!"
                         e)))))
