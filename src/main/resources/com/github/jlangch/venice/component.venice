;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice component module


(ns component)


(defprotocol Lifecycle
  (start [component]
    """
    Begins operation of this component. Synchronous, does not return
    until the component is started. Returns an updated version of this
    component.
    """)
  (stop [component]
    """
    Ceases operation of this component. Synchronous, does not return
    until the component is stopped. Returns an updated version of this
    component.
    """))


(deftype :system [name :string
                  components :ordered-map
                  dependencies :dag/dag]
  Lifecycle
  (start [system]
    (start-system system))
  (stop [system]
    (stop-system system)))


(defn system-map [name & keyvals]
  (when-not (even? (count keyvals))
    (throw (ex :VncException
               "Function 'component/system' requires an even number of component keyvals")))
  (system. name (apply ordered-map keyvals) (dag/dag)))


(defn
  ^{ :arglists '("(system dependency-map)")
     :doc """
          Associates dependency graph with the system.
          `dependency-map` is a map of keys in the system to maps or vectors
          specifying the dependencies of the component at that key in the
          the system.
          """
     :examples '(
          """
          (do
            (load-module :component)
            (deftype :server [port :long]
                     component/Lifecycle
                       (start [this] this)
                       (stop [this] this))
            (deftype :database [user :string, password :string ]
                     component/Lifecycle
                       (start [this] this)
                       (stop [this] this))

            (-> (component/system-map
                   "test"
                   :server (server. 4600)
                   :store  (database. "foo" "123"))
                (component/system-using {:server [:store]})))
          """ ) }

  system-using [system dependency-map]

  (let [d (reduce-kv (fn [dag_ k v]
                       (->> (interleave (repeat k) v)
                            (partition 2)
                            (apply dag/add-edges dag_)))
                     (dag/dag)
                     dependency-map)]
  (assoc system :dependencies d)))


;; IN WORK
