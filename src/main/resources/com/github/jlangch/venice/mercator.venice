;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; The Mercator projection is a cylindrical map projection. It can be used
;;;; to map IP locations to a world map.
;;;;
;;;; See: https://en.wikipedia.org/wiki/Mercator_projection
;;;;
;;;; World coordinates are given by a latitude and a longitude.
;;;;
;;;; Latitude specifies the north-south position of a point on the Earth's
;;;; surface. Latitude is an angle which ranges from 0° at the equator to +90°
;;;; at north and -90° at south pole.
;;;;
;;;; Longitude specifies the east-west position of a point on the Earth's
;;;; surface. Longitude is an angle which ranges from 0° at the prime meridian
;;;; to +180° eastward and -180° westward.

;;;; https://commons.wikimedia.org/wiki/File:World_map_(Miller_cylindrical_projection,_blank).svg

;;;; ---------------------------------------------------------------------------
;;;;
;;;;                        W O R K   I N    P R O G R E S S
;;;;
;;;; ---------------------------------------------------------------------------


(ns mercator)

(import :javax.imageio.ImageIO)
(import :java.awt.Color)
(import :java.awt.RenderingHints)


;; Some cities (https://www.laengengrad-breitengrad.de/)
(defonce zurich [47.37174, 8.54226])
(defonce new-york [40.712778, -74.005833])
(defonce tokyo [35.6894875, 139.6917064])
(defonce perth [-31.953513, 115.857047])
(defonce honolulu [21.3069444, -157.8583333])
(defonce montevideo [-34.9011127, -56.1645314])


;; major and the minor radius of Earth measured in meters
(defonce earth-radius-major 6378137.0)
(defonce earth-radius-minor 6356752.3142)

(defonce pi (. :java.lang.Math :PI))

;; spherical mercator projection bounding box
(defonce spherical-box-top 44927335.42)
(defonce spherical-box-right 20037508.34)
(defonce spherical-box-bottom -44927335.42)
(defonce spherical-box-left -20037508.34)

;; elliptical mercator projection bounding box
(defonce elliptical-box-top 34619289.37)
(defonce elliptical-box-right 20037508.34)
(defonce elliptical-box-bottom -34619289.37)
(defonce elliptical-box-left -20037508.34)


(defn- limit [val min max]
  (core/min max (core/max min val)))

(defn spherical-x-axis [longitude]
  (* (to-radians longitude) earth-radius-major))

(defn spherical-y-axis [latitude]
  (-<> (to-radians (limit latitude -89.9 89.9))
       (/ <> 2.0)
       (+ <> (/ pi 4.0))
       (tan <>)
       (log <>)
       (* <> earth-radius-major)))

(defn elliptical-x-axis [longitude]
  (* (to-radians longitude) earth-radius-major))

(defn elliptical-y-axis [latitude]
  (let [latitude-radians
            (to-radians (limit latitude -89.6 89.6))
        earth-dimensional-rate-normalized
            (- 1.0  (square (/ earth-radius-minor earth-radius-major)))
        latitude-on-earth-proj
            (* (sqrt earth-dimensional-rate-normalized)
               (sin latitude-radians))
        latitude-on-earth-proj
            (pow (/ (- 1.0 latitude-on-earth-proj)
                    (+ 1.0 latitude-on-earth-proj))
                 (* 0.5 (sqrt earth-dimensional-rate-normalized)))
        latitude-on-earth-proj-normalized
            (/ (tan (* 0.5 (- (* pi 0.5) latitude-radians)))
               latitude-on-earth-proj)]
      (* -1.0 earth-radius-major (log latitude-on-earth-proj-normalized))))

(defn spherical-x-axis-normalize [x]
  (/ (- x spherical-box-left)
     (- spherical-box-right spherical-box-left)))

(defn spherical-y-axis-normalize [y]
  (/ (- y spherical-box-bottom)
     (- spherical-box-top spherical-box-bottom)))

(defn spherical-mapper [map-width map-height]
  (fn [longitude latitude]
    { :longitude longitude
      :latitude latitude
      :x (long (* map-width (spherical-x-axis-normalize (spherical-x-axis longitude))))
      :y (long (* map-height (spherical-y-axis-normalize (spherical-y-axis latitude)))) }))

(defn load-image [file]
  (. :ImageIO :read (io/file file)))

(defn save-image [image file]
  (. :ImageIO :write image "PNG" (io/file file)))

(defn image-dimensions [image]
  [ (. image :getWidth nil) (. image :getHeight nil)])

(defn color [r g b a]
  (. :Color :new r g b a))

(defn draw-circle [image x y radius fill-color border-color]
  (let [g (. image :createGraphics)]
    (. g :setRenderingHints { (. :RenderingHints :KEY_ANTIALIASING)
                              (. :RenderingHints :VALUE_ANTIALIAS_ON) } )
    (. g :setColor fill-color)
    (. g :fillOval (- x radius) (- y radius) (* 2 radius) (* 2 radius))
    (. g :setColor border-color)
    (. g :drawOval (- x radius) (- y radius) (* 2 radius) (* 2 radius)))
  image)

(defn draw [image]
  (let [dim (image-dimensions image)
        width (first dim)
        height (second dim)
        c1 (color 0I 0I 255I 120I)
        c2 (color 128I 128I 255I 120I)
        mapper (spherical-mapper width height)
        render (fn [pos] (draw-circle image (:x pos) (- height (:y pos)) 10 c2 c1))]
    (render (mapper (second zurich) (first zurich)))
    (render (mapper (second new-york) (first new-york)))
    (render (mapper (second tokyo) (first tokyo)))
    (render (mapper (second perth) (first perth)))
    (render (mapper (second honolulu) (first honolulu)))
    (render (mapper (second montevideo) (first montevideo))))
  image)
