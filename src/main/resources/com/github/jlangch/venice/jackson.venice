;; Jackson JSON utils (requires the Jackson JSON libs on the classpath)

(defn
   ^{ :arglists '("(jackson/available?)")
      :doc "Returns true if Jackson JSON is available (libs on classpath) otherwise false"
      :examples '("(jackson/available?)") }

   jackson/available?

   [] (some? (. :com.fasterxml.jackson.databind.ObjectMapper :class)))

(defn
  ^{ :arglists '("(jackson/available-jdk8-module?)")
     :doc "Returns true if Jackson JSON jdk8 is available otherwise false"
     :examples '("(jackson/available-jdk8-module?)") }

   jackson/available-jdk8-module?

   [] (some? (. :com.fasterxml.jackson.datatype.jdk8.Jdk8Module :class)))

(defn
   ^{ :arglists '("(jackson/pretty-print json)")
      :doc "Pretty prints JSON"
      :examples '("(jackson/pretty-print (jackson/to-json {:a 100 :b 100}))") }

   jackson/pretty-print

   [json] (jackson/to-pretty-json (jackson/parse json)))

(defn
   ^{ :arglists '("(jackson/to-json val)")
      :doc "Converts the val to JSON"
      :examples '("(jackson/to-json {:a 100 :b 100})") }

   jackson/to-json

   [val] (let [ mapper (. :com.fasterxml.jackson.databind.ObjectMapper :new) ]
           (when (jackson/available-jdk8-module?)
               (. mapper :registerModule (. :com.fasterxml.jackson.datatype.jdk8.Jdk8Module :new)))
            (-> mapper
                (. :setDateFormat (. :com.fasterxml.jackson.databind.util.StdDateFormat :new))
                (. :writeValueAsString val))))

(defn
   ^{ :arglists '("jackson/to-pretty-json  val")
      :doc "Converts the val to pretty printed JSON"
      :examples '("(jackson/to-pretty-json {:a 100 :b 100})") }

   jackson/to-pretty-json

   [val] (let [ mapper (. :com.fasterxml.jackson.databind.ObjectMapper :new) ]
            (when (jackson/available-jdk8-module?)
                  (. mapper :registerModule (. :com.fasterxml.jackson.datatype.jdk8.Jdk8Module :new)))
            (-> mapper
                (. :disable :com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)
                (. :setDateFormat (. :com.fasterxml.jackson.databind.util.StdDateFormat :new))
                (. :writerWithDefaultPrettyPrinter)
                (. :writeValueAsString val))))

(defn
   ^{ :arglists '("(jackson/parse s)")
      :doc "Parses a JSON string"
      :examples '("(jackson/parse (jackson/to-json [{:a 100 :b 100}]))") }

   jackson/parse

   [text] (let [ mapper (. :com.fasterxml.jackson.databind.ObjectMapper :new) ]
            (when (jackson/available-jdk8-module?)
                  (. mapper :registerModule (. :com.fasterxml.jackson.datatype.jdk8.Jdk8Module :new)))
            (-> mapper
                (. :disable :com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)
                (. :readValue text (. :java.lang.Object :class)))))
