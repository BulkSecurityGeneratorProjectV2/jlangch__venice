;; Kira - a simple templating library

;; Thanks to James Reeves and his clojure 'comb' project
;; (https://github.com/weavejester/comb). Venice's Kira
;; templating library builds on the ideas of 'comb'.

(defn- kira/read-source [source]
  (if (string? source)
    source
    (io/slurp source)))

(def kira/delimiters ["<%" "%>"])

(defn
  kira/parser-regex
  [delimiters]
  (regex/pattern
        (str "(?s)\\A"
             "(?:" "(.*?)"
             "\\Q" (first delimiters) "\\E" "(.*?)" "\\Q" (last delimiters) "\\E"
             ")?"
             "(.*)\\z")))

(def kira/parser-regex-memo (memoize kira/parser-regex))

(defn kira/emit-string [s]
  (when (not-empty? s)
    (print (str "(print " (pr-str s) ")"))))

(defn kira/emit-expr [expr]
  (if (str/starts-with? expr "=")
    (print (str "(print " (str/trim (str/subs expr 1)) ")"))
    (print expr)))

(defn kira/parse-string [source delimiters]
  (let [regex (kira/parser-regex delimiters)]
    (with-out-str
      (print "(do ")
      (loop [src source]
        (let [[_ before expr after] (regex/matches regex src)]
          (if expr
            (do (kira/emit-string before)
                (kira/emit-expr expr)
                (recur after))
            (do (kira/emit-string after)
                (print ")"))))))))

(defn kira/compile-fn [args src delimiters]
  (eval
   `(fn ~args
      (with-out-str
        ~(-> src kira/read-source (kira/parse-string delimiters) read-string)))))

(defmacro
  ^{ :doc (str/strip-indent """\
        Compile a template into a function that takes the supplied arguments.
        The template source may be a string, or an I/O source such as a File,
        Reader or InputStream.""" ) }
  kira/fn
  ([args source]
    `(kira/compile-fn '~args ~source ~kira/delimiters))
  ([args source delimiters]
    `(kira/compile-fn '~args ~source ~delimiters)))

(defn
  ^{ :doc (str/strip-indent """\
        Evaluate a template using the supplied bindings. The template source
        may be a string, or an I/O source such as a File, Reader or
        InputStream.""" ) }
  kira/eval
  ([source]
     (kira/eval source kira/delimiters {}))
  ([source bindings]
     (kira/eval source kira/delimiters bindings))
  ([source delimiters bindings]
     (let [keys (map (comp symbol name) (keys bindings))
           func (kira/compile-fn [{:keys (into [] keys)}] source delimiters)]
        (func bindings))))
