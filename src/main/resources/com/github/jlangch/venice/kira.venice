;; Kira - a simple templating library

(defn- kira/read-source [source]
  (if (string? source)
    source
    (io/slurp source)))

(def kira/delimiters ["<%" "%>"])

(def kira/parser-regex
  (regex/pattern
    (str "(?s)\\A"
         "(?:" "(.*?)"
         (first kira/delimiters) "(.*?)" (last kira/delimiters)
         ")?"
         "(.*)\\z")))

(defn kira/emit-string [s]
  (when (not-empty? s)
    (print (str "(print " (pr-str s) ")"))))

(defn kira/emit-expr [expr]
  (if (str/starts-with? expr "=")
    (print (str "(print " (str/trim (str/subs expr 1)) ")"))
    (print expr)))

(defn kira/parse-string [source]
  (with-out-str
    (print "(do ")
    (loop [src source]
      (let [[_ before expr after] (regex/matches kira/parser-regex src)]
        (if expr
          (do (kira/emit-string before)
              (kira/emit-expr expr)
              (recur after))
          (do (kira/emit-string after)
              (print ")")))))))

(defn kira/compile-fn [args src]
  (eval
   `(fn ~args
      (with-out-str
        ~(-> src kira/read-source kira/parse-string read-string)))))

(defmacro
  ^{ :doc (str/strip-indent """\
        Compile a template into a function that takes the supplied arguments.
        The template source may be a string, or an I/O source such as a File,
        Reader or InputStream.""" ) }
  fn_
  [args source]
  `(kira/compile-fn '~args ~source))

(defn
  ^{ :doc (str/strip-indent """\
        Evaluate a template using the supplied bindings. The template source
        may be a string, or an I/O source such as a File, Reader or
        InputStream.""" ) }
  kira/eval
  ([source]
     (kira/eval source {}))
  ([source bindings]
     (let [keys (map (comp symbol name) (keys bindings))
           func (kira/compile-fn [{:keys (into [] keys)}] source)]
        (func bindings))))
