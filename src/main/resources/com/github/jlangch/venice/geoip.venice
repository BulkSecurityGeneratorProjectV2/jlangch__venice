;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; GEOIP functions. Maps IP adresses to country and location (latitude,
;;;; longitude).
;;;;
;;;; E.g.: "91.223.55.1"  => ["91.223.55.1", "PL", "Poland", ["51.919438", "19.145136"]]
;;;;
;;;;
;;;; To download the free MaxMind GeoLite databases you need a license key that
;;;; can be obtained from the MaxMind 'https://www.maxmind.com/en/home' home
;;;; page.
;;;; Doc: https://dev.maxmind.com/geoip/geoip2/geoip2-city-country-csv-databases/
;;;;
;;;; You can use Venice's :mercator extension module to create a world map with
;;;; the IP locations:
;;;;
;;;;      (do
;;;;        (load-module :mercator)
;;;;        (load-module :geoip)
;;;;
;;;;        (defn draw [format file locations]
;;;;          (-> (mercator/load-mercator-image)
;;;;              (mercator/draw-locations locations)
;;;;              (mercator/crop-image 400 600)
;;;;              (mercator/save-image format file)))
;;;;
;;;;        (def rv (geoip/ip-to-country-loc-resolver
;;;;                         "resources/geoip-country.zip"
;;;;                         (geoip/download-google-country-db)))
;;;;
;;;;        (->> ["91.223.55.1" "220.100.34.45" "167.120.90.10"]
;;;;             (map rv)
;;;;             (map :loc)
;;;;             (map geoip/map-location-to-numerics)
;;;;             (draw :png "./world-map.png")))
;;;;


(ns geoip)

(import :java.net.Inet4Address)
(import :java.net.Inet6Address)

;; MaxMind GEO IP database download URL.
;;
;; Placeholders:
;;   {db}  the DB type. One of GeoLite2-Country-CSV, GeoLite2-City-CSV
;;   {key} your MaxMind license key. There is a license for a light
;;         version of the databases that is free.
(def geoip/maxmind-geoip-url
       "https://download.maxmind.com/app/geoip_download?edition_id={db}&license_key={key}&suffix=zip")


;; Google country GPS data
;;
;; See: https://developers.google.com/public-data/docs/canonical/countries_csv
;;      https://github.com/google/dspl/tree/master/samples/google/canonical
(def geoip/google-country-url
       "https://raw.githubusercontent.com/google/dspl/master/samples/google/canonical/countries.csv")



(defn
  ^{ :arglists '("(geoip/ip-to-country-loc-resolver geoip-zip location-csv)")
     :doc """
          Returns a resolve function that resolves IP address to its \
          associated country and latitude/longitude location. The resolve \
          function returns the country and the latitude/longitude or nil \
          if no data is found.

          The MindMax country geoip-zip may be a bytebuf, a file, \
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 country and the Google \
          country database and caches the data for IP address resolves.
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-country-loc-resolver
                                    "resources/geoip-country.zip"
                                    (geoip/download-google-country-db)))

             (rv "91.223.55.1")) ;; => {:ip "91.223.55.6"
                                 ;;     :loc ["51.919438" "19.145136"]
                                 ;;     :country-name "Poland"
                                 ;;     :country-iso "PL"}
           """
           ) }

  geoip/ip-to-country-loc-resolver [geoip-zip location-csv]

  (let [ip-to-country (geoip/ip-to-country-resolver geoip-zip)
        country-to-loc (geoip/country-to-location-resolver location-csv)]
    (memoize (fn resolve-ip-to-country [ip]
               (let [country (ip-to-country ip)]
                 (when (some? country)
                   (assoc country
                          :ip ip
                          :loc (country-to-loc (:country-iso country)))))))))


(defn
  ^{ :arglists '("(geoip/ip-to-city-loc-resolver geoip-zip)")
     :doc """
          Returns a resolve function that resolves IP address to its \
          associated city and latitude/longitude location. The resolve \
          function returns the city and the latitude/longitude or nil \
          if no data is found.

          The MindMax city geoip-zip may be a bytebuf, a file, \
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 city database and \
          caches the data for IP address resolves.

          Note:
          The MaxMind city IPv4 and IPv6 databases have 200MB of size. It \
          takes considerable time to load and lookup the data. If you can \
          live with the lower accuracy of the country database use the \
          country locations!
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-city-loc-resolver "resources/geoip-city.zip"))

             (rv "91.223.55.1")) ;; => {:ip "91.223.55.6"
                                 ;;     :loc ["51.919438" "19.145136"]
                                 ;;     :country-name "Poland"
                                 ;;     :country-iso "PL"
                                 ;;     :region "xxxx"
                                 ;;     :city "xxx"}
           """
           ) }

  geoip/ip-to-city-loc-resolver [geoip-zip location-csv]

  (let [cities (geoip/parse-maxmind-city-db geoip-zip)
        ip4-data (geoip/parse-maxmind-city-ip-db :IPv4 geoip-zip nil)
        ip6-data (geoip/parse-maxmind-city-ip-db :IPv6 geoip-zip nil)]
    (memoize (fn resolve-ip-to-city [ip]
                (cond
                  (geoip/ip4? ip) (geoip/find-ip-country ip ip4-data)
                  (geoip/ip6? ip) (geoip/find-ip-country ip ip6-data)
                  :else nil)))))


(defn
  ^{ :arglists '("(geoip/country-to-location-resolver location-csv)")
     :doc """
          Returns a resolve function that resolves countries given by a country \
          2-digit ISO code to its latitude/longitude location. The resolve \
          function returns the latitude/longitude or nil if the country is \
          not supported.

          The resolver loads Google country database and caches the data \
          for location resolves.
          """
     :examples '(
           """
           (do
             (def rv (geoip/country-to-location-resolver geoip/download-google-country-db))
             (rv "PL")) ;; => ["51.919438", "19.145136"]
           """
           ) }

  geoip/country-to-location-resolver [location-csv]

  (let [locations (geoip/parse-google-countries-csv location-csv)]
    (memoize (fn resolve-country-to-location [country-iso]
                (get locations country-iso)))))


(defn
  ^{ :arglists '("(geoip/ip-to-country-resolver geoip-zip)")
     :doc """
          Returns a resolve function that resolves IP addresses to its \
          associated countries. The resolve function returns the country \
          information for a given IP address.

          The MindMax country geoip-zip may be a bytebuf, a file, \
          a string (file path) or an InputStream.

          The resolver loads the MindMax IPv4 and IPv6 country databases and \
          caches the data for subsequent IP resolves.
          """
     :examples '(
           """
           (do
             (def rv (geoip/ip-to-country-resolver "resources/geoip-country.zip"))
             (rv "91.223.55.1")) ;; => { :country-name "Poland"
                                 ;;      :country-iso "PL" }
           """
           ) }

  geoip/ip-to-country-resolver [geoip-zip]

  (let [countries (geoip/parse-maxmind-country-db geoip-zip)
        ip4-data (geoip/parse-maxmind-country-ip-db :IPv4 geoip-zip countries)
        ip6-data (geoip/parse-maxmind-country-ip-db :IPv6 geoip-zip countries)]
    (memoize (fn resolve-ip-to-country [ip]
                (cond
                  (geoip/ip4? ip) (geoip/find-ip-country ip ip4-data)
                  (geoip/ip6? ip) (geoip/find-ip-country ip ip6-data)
                  :else nil)))))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-country-ip-db ip-type zip maxmind-countries)")
     :doc """
          Parses the MaxMind country IP blocks database. Expects a Maxmind \
          country IP database zip. ip-type is either :IPv4 or :IPv6. The zip \
          may be a bytebuf, a file, a string (file path) or an InputStream.

          The maxmind-countries are optional and map the geoname-id to country \
          data.

          maxmind-countries:
             { "49518" {:country-iso "RW" :country-name "Rwanda"}
               "51537" {:country-iso "SO" :country-name "Somalia"} }

          Return:
            [["223.255.254.0/24" {:country-iso "SG" :country-name"Singapore"}]
             ["223.255.255.0/24" {:country-iso "AU" :country-name"Australia"}]]
          """
     :examples '(
           """
           (geoip/parse-maxmind-country-ip-db
               :IPv4
               "resources/geoip-country.zip"
               nil)
           """,
           """
           (geoip/parse-maxmind-country-ip-db
               :IPv6
               "resources/geoip-country.zip"
               (geoip/parse-maxmind-country-db "resources/geoip-country.zip"))
           """,
           ) }
  ;; Format MaxMind country IP blocks DB:
  ;;
  ;; network,geoname_id,registered_country_geoname_id,represented_country_geoname_id,is_anonymous_proxy,is_satellite_provider
  ;; 1.0.0.0/24,2077456,2077456,,0,0
  ;; 1.0.1.0/24,1814991,1814991,,0,0

  geoip/parse-maxmind-country-ip-db [ip-type zip maxmind-countries]

  (let [zip-entry-name (if (= ip-type :IPv6)
                           "GeoLite2-Country-Blocks-IPv6.csv"
                           "GeoLite2-Country-Blocks-IPv4.csv")
        ip-blocks (->> (geoip/unzip-entry zip zip-entry-name)
                       (csv/read)
                       (filter #(and (not (nil? (nth % 1)))
                                     (= "0" (nth % 4))
                                     (= "0" (nth % 5)))))]
    (if (some? maxmind-countries)
      (map (juxt #(nth % 0)
                 #(get maxmind-countries (nth % 1)))
           ip-blocks)
      (map (juxt #(nth % 0)
                 #(hash-map ))
           ip-blocks))))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-city-ip-db ip-type zip maxmind-cities)")
     :doc """
          Parses the MaxMind city IP blocks database. Expects a MaxMind \
          city IP database zip. ip-type is either :IPv4 or :IPv6. The zip may \
          be a bytebuf, a file, a string (file path) or an InputStream.

          The maxmind-countries are optional and map the geoname-id to country \
          data.

          maxmind-cities:
          { "2643743" {:country-iso "GB" :country-name "England"
                       :region "England"  :city "London"}
            "2661881" {:country-iso "CH" :country-name "Switzerland"
                       :region "Aargau"  :city "Aarau"} }

          Return:
            [["223.255.254.0/24" {:loc ["10.0000" "8.0000"]
                                  :country-iso "GB" :country-name "England"
                                  :region "England"  :city "London"}]
             ["223.255.255.0/24" {:loc ["-15.0000" "30.0000"]
                                  :country-iso "CH" :country-name "Switzerland"
                                  :region "Aargau"  :city "Aarau"}]]

            [["2c0f:fff0::/32" {:loc ["10.0000" "8.0000"]
                                :city-id "2643743"}]
             ["2c0f:feb8::/32" {:loc ["-15.0000" "30.0000"]
                                :city-id "2661881"}]]
          """
     :examples '(
           """
           (geoip/parse-maxmind-city-ip-db
               :IPv4
               "resources/geoip-city.zip"
               nil)
           """,
           """
           (geoip/parse-maxmind-city-ip-db
               :IPv6
               "resources/geoip-country.zip"
               (geoip/parse-maxmind-city-db "resources/geoip-city.zip"))
           """,
           ) }
  ;; Format MaxMind city IP blocks DB:
  ;;
  ;; network,geoname_id,registered_country_geoname_id,represented_country_geoname_id,is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius
  ;; 0.60.48.124/30,5164706,6252001,,0,0,44720,40.7961,-81.3798,200
  ;; 70.60.48.128/29,5164706,6252001,,0,0,44720,40.7961,-81.3798,200

  geoip/parse-maxmind-city-ip-db [ip-type zip maxmind-cities]

  (let [zip-entry-name (if (= ip-type :IPv6)
                           "GeoLite2-City-Blocks-IPv6.csv"
                           "GeoLite2-City-Blocks-IPv4.csv")
        ip-blocks (->> (geoip/unzip-entry zip zip-entry-name)
                       (csv/read)
                       (filter #(and (not (nil? (nth % 1)))
                                     (= "0" (nth % 4))
                                     (= "0" (nth % 5)))))]
    (if (some? maxmind-cities)
      (map (juxt #(nth % 0)
                 #(assoc (get maxmind-cities (nth % 1))
                         :loc [(nth % 7) (nth % 8)]))
           ip-blocks)
      (map (juxt #(nth % 0)
                 #(hash-map :loc [(nth % 7) (nth % 8)] :city-id (nth % 1)))
           ip-blocks))))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-country-db zip)")
     :doc """
          Parses the MaxMind country-location CSV file. Returns a map with \
          geoname-id as key and the country data as value.

          Return:
             { "49518" {:country-iso "RW" :country-name "Rwanda"}
               "51537" {:country-iso "SO" :country-name "Somalia"} }
          """ }
  ;; format:
  ;;
  ;; geoname_id,locale_code,continent_code,continent_name,country_iso_code,country_name,is_in_european_union
  ;; 49518,en,AF,Africa,RW,Rwanda,0
  ;; 51537,en,AF,Africa,SO,Somalia,0

  geoip/parse-maxmind-country-db [zip]

  (->> (geoip/unzip-entry zip "GeoLite2-Country-Locations-en.csv")
       (csv/read)
       (map (juxt #(nth % 0)
                  #(hash-map :country-iso (nth % 4)
                             :country-name (nth % 5))))
       (into {})))


(defn
  ^{ :arglists '("(geoip/parse-maxmind-city-db zip)")
     :doc """
          Parses the MaxMind city-location CSV file. Returns a map with \
          key = geoname-id and the country/city data as value.

          Return:
            { "2643743" {:country-iso "GB" :country-name "England"
                         :region "England"  :city "London"}
              "2661881" {:country-iso "CH" :country-name "Switzerland"
                         :region "Aargau"  :city "Aarau"} }
          """ }
  ;; format:
  ;;
  ;; geoname_id,locale_code,continent_code,continent_name,country_iso_code,country_name,subdivision_1_iso_code,subdivision_1_name,subdivision_2_iso_code,subdivision_2_name,city_name,metro_code,time_zone,is_in_european_union
  ;; 2643743,en,EU,Europe,GB,"United Kingdom",ENG,England,,,London,,Europe/London,1
  ;; 2661881,en,EU,Europe,CH,Switzerland,AG,Aargau,,,Aarau,,Europe/Zurich,0

  geoip/parse-maxmind-city-db [zip]

  (->> (geoip/unzip-entry zip "GeoLite2-City-Locations-en.csv")
       (csv/read)
       (map (juxt #(nth % 0)
                  #(hash-map :country-iso (nth % 4)
                             :country-name (nth % 5)
                             :region (nth % 7)
                             :city (nth % 10))))
       (into {})))


(defn
  ^{ :arglists '("(geoip/ip4? ip)")
     :doc """
          Returns true if the ip (a string or a java.net.InetAddress) is an \
          IP-4 internet address.
          """ }

  geoip/ip4? [ip]

  (cond
    (string? ip)               (str/contains? ip ".")
    (instance? :Inet4Address)  true
    (instance? :Inet6Address)  false
    false))


(defn
  ^{ :arglists '("(geoip/ip6? ip)")
     :doc """
          Returns true if the ip (a string or a java.net.InetAddress) is an \
          IP-6 internet address.
          """ }

  geoip/ip6? [ip]

  (cond
    (string? ip)               (str/contains? ip ":")
    (instance? :Inet4Address)  false
    (instance? :Inet6Address)  true
    false))


(defn
  ^{ :arglists '("(geoip/download-google-country-db-to-csvfile csvfile)")
     :doc "Downloads the Google country-gps database to the given CSV file." }

  geoip/download-google-country-db-to-csvfile [csvfile]

  (io/spit csvfile (geoip/download-google-country-db)))


(defn
  ^{ :arglists '("(geoip/download-google-country-db)")
     :doc """
          Downloads the Google country database. The database holds a mapping \
          form country to location (latitude/longitude). Returns the data \
          as CSV file.
          """ }

  geoip/download-google-country-db []

  (io/download geoip/google-country-url :binary false))


(defn
  ^{ :arglists '("(geoip/download-maxmind-db-to-zipfile zipfile type lic-key)")
     :doc """
          Downloads the MaxMind country or city GEO IP database to the given \
          ZIP file. The type is either :country or :city.

          The download requires your personal MaxMind license key.
          """ }

  geoip/download-maxmind-db-to-zipfile [zipfile db-type lic-key]

  (io/spit zipfile (geoip/download-maxmind-db db-type lic-key)))


(defn
  ^{ :arglists '("(geoip/download-maxmind-db type lic-key)")
     :doc """
          Downloads the MaxMind country or city GEO IP database. Returns the \
          DB as bytebuffer. The type is either :country or :city.

          The download requires your personal MaxMind license key.
          """ }

  geoip/download-maxmind-db [type lic-key]

  (case type
    :country (io/download (geoip/build-maxmind-country-db-url lic-key) :binary true)
    :city    (io/download (geoip/build-maxmind-city-db-url lic-key) :binary true)
    (throw (venice-exception (str "Invalid DB type " type "!")))))


(defn
  ^{ :arglists '("(geoip/build-maxmind-country-db-url lic-key)")
     :doc """
          Build the URL for the MaxMind country GEO IP database. The download \
          requires a license key that is sent as part of the URL.

          The download requires your personal MaxMind license key.
          """ }

  geoip/build-maxmind-country-db-url [lic-key]

  (-> (str/replace-all geoip/maxmind-geoip-url "{db}" "GeoLite2-Country-CSV")
      (str/replace-all  "{key}" lic-key)))


(defn
  ^{ :arglists '("(geoip/build-maxmind-city-db-url lic-key)")
     :doc """
          Build the URL for the MaxMind city GEO IP database. The download \
          requires your personal MaxMind license key that is sent as part of \
          the URL.
          """ }

  geoip/build-maxmind-city-db-url [lic-key]

  (-> (str/replace-all geoip/maxmind-geoip-url "{db}" "GeoLite2-City-CSV")
      (str/replace-all  "{key}" lic-key)))


(defn
  ^{ :arglists '("(map-location-to-numerics loc)")
     :doc """
          Maps a location to numerical coordinates. A location \
          is given as a vector of a latitude and a longitude.
          """ }

  map-location-to-numerics [loc]

  [(double (first loc)) (double (second loc))])



;; - private -------------------------------------------------------------------

(defn- geoip/find-ip-country [ip ip-data]
  (let [inet (cidr/inet-addr ip)]
    (some (fn [x] (if (cidr/in-range? inet (first x)) (second x) nil)) 
          ip-data)))


(defn- geoip/parse-google-countries-csv [csv]
  ;; Format Google country location CSV:
  ;;
  ;; country,latitude,longitude,name
  ;; AD,42.546245,1.601554,Andorra
  ;; BE,50.503887,4.469936,Belgium
  ;;
  ;; returns { "AD" [42.546245, 1.601554]
  ;;           "BE" [50.503887, 4.469936] }
  (->> (csv/read csv)
       (map (juxt #(nth % 0) #(vector (nth % 1) (nth % 2))))  ; [iso, [lat, lon]]
       (into {})))


(defn- geoip/unzip-entry [zip entry-name]
 (let [entry (->> (io/zip-list-entry-names zip)
                  (filter #(str/ends-with? % entry-name))
                  (first))]
   (bytebuf-to-string (io/unzip (io/file zip) entry) :utf-8)))
