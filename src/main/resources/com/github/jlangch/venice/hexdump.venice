;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.


(ns hexdump)


(defn ascii? [val]
  (and (< 0x1F val) (< val 0x7F)))


(defn ascii [val]
  (let [v (mod (long val) 256)]
    (if (ascii? v) (char v) (char "."))))


(defn hex-ascii-lines [s]
  (->> (map #(mod (long %) 256) s)
       (map #(str/format "%02x" %))
       (partition 2)
       (interpose " ")
       flatten
       (apply str)
       (seq)
       (partition 40 40 (repeat 40 " "))
       (map #(apply str %))))


(defn ascii-lines [s]
  (->> (map #(ascii %) s)
       (partition 16 16 (repeat 16 " "))
       (map #(apply str %))))


(defn hexdump-lines [s opts]
  (cond
    (string? s)  (hexdump-lines (io/slurp s :binary true) opts)
    (io/file? s) (hexdump-lines (io/slurp s :binary true) opts)
    (bytebuf? s) (hexdump-lines (bytebuf-to-list s) opts)
    (coll? s)    (let [{:keys [offset size] :or {offset 0 size :all}} opts
                       index (fn [s] (map vector (lazy-seq 0 inc) s))
                       vals (->> (index s)
                                 (drop-while #(< (first %) offset))
                                 (#(if (= size :all) % (take size %)))
                                ; (take (if (= :all size) (count s) size))
                                 (map second))
                       byte-offsets (map #(str/format "%08x: " %) (map #(* 16 %) (lazy-seq 0 inc)))
                       hex-ascii-lines (hex-ascii-lines vals)
                       ascii-lines (ascii-lines vals)
                       parts-seq (map list
                                      byte-offsets
                                      hex-ascii-lines
                                      (lazy-seq (fn [] " "))
                                      ascii-lines
                                      (lazy-seq (fn [] "\n")))]
                   (map #(apply str %) parts-seq))
    :else (throw (. :VncException :new
                    """
                    Can only hexdump a collection, a java.io.File or a String \
                    representing a path to a file.
                    """))))

(defn
  ^{ :arglists '("(hexdump & opts)")
     :doc """
          Prints a hexdump of the given argument to *out*. Optionally supply \
          byte offset (:offset, default: 0) and size (:size, default: :all) \
          arguments. Can create hexdump from a collection of values, a \
          bytebuf, a java.io.File, or a string representing a path to a file.
          """
     :examples (list
          "(hexdump/hexdump (range 1000))"
          "(hexdump/hexdump (range 10000) :offset 9000 :size 256)"
          """(hexdump/hexdump "./img.png")""",
          """(hexdump/hexdump "./img.png" :offset 0 :size 64)""") }

  hexdump [s & opts]

  (let [options (apply hash-map opts)
        hexdump-lines (hexdump-lines s options)
        hexdump-str (apply str hexdump-lines)]
    (println hexdump-str)))
