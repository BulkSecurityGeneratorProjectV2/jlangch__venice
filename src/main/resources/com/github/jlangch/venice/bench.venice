;;;   __    __         _
;;;   \ \  / /__ _ __ (_) ___ ___
;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;     \  /  __/ | | | | (_|  __/
;;;      \/ \___|_| |_|_|\___\___|
;;;
;;;
;;; Copyright 2017-2019 Venice
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;;; benchmarking

(defn- warmup [iterations expr] (dorun iterations expr))

(defn- run-gc [iterations] (dorun iterations (gc)))

(defn- run-bench [iterations expr] (dorun iterations expr))

(defn- print-stats [stats] nil)


(defn
   ^{ :arglists '("(bench expr warmup-iterations iterations)")
      :doc "Benchmarks the given expression. \n\nRuns the benchmark in 4 phases: \n   1. Runs the expr in a warmup phase to allow the HotSpot compiler to do optimizations. \n   2. Runs the garbage collector \n   3. Runs the expression benchmark. \n   4. Prints the benchmark statistics."
      :examples '("(bench (+ 120 200) 12000 1000)") }

   bench [expr warmup-iterations iterations]

   (do
     (warmup warmup-iterations expr)
     (run-gc 2)
     (->> (run-bench iterations expr)
          (print-stats)))
