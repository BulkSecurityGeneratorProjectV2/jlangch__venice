;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice tracing functions


(ns trace)


(def-dynamic *trace-depth* 0)


(defn- tracer [name value]
  (println (str "TRACE" (when name (str " " name)) ": " value)))


(defn trace-indent []
  (apply str (repeat *trace-depth* "| ")))


(defn trace-fn-call [name f args]
  (let [id (gensym "t")]
    (tracer id (str (trace-indent) (pr-str (cons name args))))
    (binding [*trace-depth* (inc *trace-depth*)]
      (let [result (apply f args)]
        (tracer id (str (trace-indent) "=> " (pr-str result)))
        result))))


(defmacro trace-var [sym]
  `(let [ns (var-ns ~sym)
         n  (var-name ~sym)
         s  (str ns "/" n)
         f  (var-get (symbol s))]
     (if (fn? f)
       (do
         (println "Tracing function" s)
         (alter-var! (symbol s)
                     (fn tracing-wrapper [& args]
                       (trace-fn-call (symbol s) f args))))
       (println "Not a function:" s "!"))
     nil))
