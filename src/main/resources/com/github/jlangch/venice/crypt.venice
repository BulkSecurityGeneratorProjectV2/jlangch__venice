;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice crypt functions


(ns crypt)

(import :java.security.MessageDigest)

(import :com.github.jlangch.venice.impl.util.crypt.MD5_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.SHA1_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.SHA512_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.PBKDF2_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.CipherSuiteFactory)
(import :com.github.jlangch.venice.impl.util.crypt.CipherSuite)


(defn- to-bytes [data]
  (if (string? data) (bytebuf-from-string data :UTF-8) data))

(defn
  ^{ :arglists '("(crypt/md5-hash data)")
     :doc """
          Hashes a string or a bytebuf using MD5.

          Note: MD5 is not safe any more use PBKDF2!
          """
     :examples (list
          """
          (-> (crypt/md5-hash "hello world")
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/md5-hash [data]

  (assert (or (string? data) (bytebuf? data))
          "The passed data must be either a string or a bytebuf")

  (try
    (let [md (. :MessageDigest :getInstance "MD5")]
      (. md :reset)
      (. md :update (to-bytes data))
      (. md :digest))
    (catch :Exception ex
           (throw (. :VncException :new "Failed to compute MD5 hash." ex)))))


(defn
  ^{ :arglists '("(crypt/sha1-hash data)"
                 "(crypt/sha1-hash data salt)")
     :doc "Hashes a string or a bytebuf using SHA1 with an optional salt."
     :examples (list
          """
          (-> (crypt/sha1-hash "hello world")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/sha1-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/sha1-hash

  ([data]
    (sha1-hash data nil))

  ([data salt]
    (assert (or (string? data) (bytebuf? data))
            "The passed data must be either a string or a bytebuf")
    (assert (or (string? salt) (bytebuf? salt) (nil? salt))
            "The passed salt must be either a string, a bytebuf or nil")
    (try
      (let [md (. :MessageDigest :getInstance "SHA-1")]
        (. md :reset)
        (when (some? salt)
          (. md :update (to-bytes salt)))
        (. md :update (to-bytes data))
        (. md :digest))
      (catch :Exception ex
             (throw (. :VncException :new "Failed to compute SHA1 hash." ex))))))


(defn
  ^{ :arglists '("(crypt/sha512-hash data)"
                 "(crypt/sha512-hash data salt)")
     :doc "Hashes a string or a bytebuf using SHA512 with an optional salt."
     :examples (list
          """
          (-> (crypt/sha512-hash "hello world")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/sha512-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/sha512-hash

  ([data]
    (sha1-hash data nil))

  ([data salt]
    (assert (or (string? data) (bytebuf? data))
            "The passed data must be either a string or a bytebuf")
    (assert (or (string? salt) (bytebuf? salt) (nil? salt))
            "The passed salt must be either a string, a bytebuf or nil")
    (try
      (let [md (. :MessageDigest :getInstance "SHA-512")]
        (. md :reset)
        (when (some? salt)
          (. md :update (to-bytes salt)))
        (. md :update (to-bytes data))
        (. md :digest))
      (catch :Exception ex
             (throw (. :VncException :new "Failed to compute SHA512 hash." ex))))))


(defn
  ^{ :arglists '("(crypt/pbkdf2-hash data salt)"
                 "(crypt/pbkdf2-hash data salt iterations key-length)")
     :doc """
          Hashes a string using PBKDF2. iterations default to 1000, key-length \
          defaults to 256.
          """
     :examples (list
          """
          (-> (crypt/pbkdf2-hash "hello world" "-salt-")
              (str/bytebuf-to-hex :upper))
          """,
          """
          (-> (crypt/pbkdf2-hash "hello world" "-salt-" 1000 256)
              (str/bytebuf-to-hex :upper))
          """ ) }

  crypt/pbkdf2-hash

  ([text salt]
    (crypt/pbkdf2-hash text salt 1000 256))

  ([text salt iterations key-length]
    (assert (string? text)
            "The passed text must be a string")
    (assert (or (string? salt) (nil? salt))
            "The passed salt must be either a string or nil")
    (assert (or (long? iterations) (int? iterations))
            "The passed iterations must be either a long or an integer")
    (assert (or (long? key-length) (int? key-length))
            "The passed key-length must be either a long or an integer")
    (. :PBKDF2_Hash :hash text salt iterations key-length)))


(defn
  ^{ :arglists '("(crypt/encrypt algorithm passphrase & options)")
     :doc """
          Returns a new function to encrypt a string or a bytebuf given \
          the algorithm and passphrase. If a string is passed it is \
          encrypted and returned as a base64 encoded string. If a bytebuf \
          is passed the encryped bytebuf is returned.

          Supported algorithms: "DES", "3DES", "AES256"

          Options:
            :url-safe enabled
                The boolean option directs the base64 encoder to emit
                standard or URL safe base64 enoded strings.
                If enabled (true) the base64 encoder will emit '-' and '_'
                instead of the usual '+' and '/' characters.
                Defaults to false.
                Note: no padding is added when encoding using the
                      URL-safe alphabet.
          """
     :examples (list
          """
          (do
            (load-module :crypt)
            (def encrypt (crypt/encrypt "3DES" "secret" :url-safe true))
            (encrypt "hello") ; => "ndmW1NLsDHA"
            (encrypt "world") ; => "KPYjndkZ8vM"
            (encrypt (bytebuf [1 2 3 4 5])))
          """ ) }

  crypt/encrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)
        suite (. :CipherSuiteFactory :create algorithm passphrase url-safe)]
    (fn [data] (. suite :encrypt data))))


(defn
  ^{ :arglists '("(crypt/decrypt algorithm passphrase & options)")
  :doc """
       Returns a new function to decrypt a string or a bytebuf given the \
       algorithm and passphrase. If a string is passed it is base64 decoded, \
       decrypted, and returned as string. If a bytebuf is passed the decrypted \
       bytebuf is returned.

       Supported algorithms: "DES", "3DES", "AES256"

       Options:
         :url-safe enabled
             The boolean option directs the base64 decoder to decode
             standard or  URL safe base64 encoded strings.
             If enabled (true) the base64 decoder will convert '-' and '_'
             characters back to '+' and '/' before decoding.
             Defaults to false.
       """
     :examples (list
          """
          (do
            (load-module :crypt)
            (def decrypt (crypt/encrypt "3DES" "secret" :url-safe true))
            (decrypt "ndmW1NLsDHA") ; => "hello"
            (decrypt "KPYjndkZ8vM") ; => "world"
            (decrypt  (bytebuf [234 220 237 189 12 176 242 147])))
          """ ) }

  crypt/decrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)
        suite (. :CipherSuiteFactory :create algorithm passphrase url-safe)]
     (fn [data] (. suite :decrypt data))))
