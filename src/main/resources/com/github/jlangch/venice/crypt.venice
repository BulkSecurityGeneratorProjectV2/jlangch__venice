;; Venice crypt functions

(import :com.github.jlangch.venice.impl.util.crypt.MD5_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.SHA512_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.PBKDF2_Hash)
(import :com.github.jlangch.venice.impl.util.crypt.CipherSuiteFactory)
(import :com.github.jlangch.venice.impl.util.crypt.CipherSuite)


(defn
  ^{ :arglists '("(crypt/md5-hash data)")
     :doc "Hashes a string or a bytebuf using MD5. Note: MD5 is not safe any more use PBKDF2."
     :examples (list (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (str/bytebuf-to-hex
                         |    (crypt/md5-hash "hello world")
                         |    :upper)) """ )) }

  crypt/md5-hash [text]

  (. :MD5_Hash :hash text))


(defn
  ^{ :arglists '("(crypt/sha512-hash data)", "(crypt/sha512-hash data salt)")
     :doc "Hashes a string or a bytebuf using SHA512 with an optional salt."
     :examples (list (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (str/bytebuf-to-hex
                         |    (crypt/sha512-hash "hello world")
                         |    :upper)) """ )
                     (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (str/bytebuf-to-hex
                         |    (crypt/sha512-hash "hello world" "-salt-")
                         |    :upper)) """ )) }

  crypt/sha512-hash

  ([text] (. :SHA512_Hash :hash text nil))
  ([text salt] (. :SHA512_Hash :hash text salt)))


(defn
  ^{ :arglists '("(crypt/pbkdf2-hash text salt)",
                 "(crypt/pbkdf2-hash text salt iterations key-length)")
     :doc "Hashes a string using PBKDF2. iterations default to 1000, key-length defaults to 256"
     :examples (list (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (str/bytebuf-to-hex
                         |    (crypt/pbkdf2-hash "hello world" "-salt-")
                         |    :upper)) """ )
                     (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (str/bytebuf-to-hex
                         |    (crypt/pbkdf2-hash "hello world" "-salt-" 1000 256)
                         |    :upper)) """ )) }

  crypt/pbkdf2-hash

  ([text salt]
      (crypt/pbkdf2-hash text salt 1000 256))
  ([text salt iterations key-length]
      (. :PBKDF2_Hash :hash text salt iterations key-length)))


(defn
  ^{ :arglists '("(crypt/encrypt algorithm passphrase & options)")
     :doc (str/strip-margin
             """Returns a new function to encrypt a string or a bytebuf given
               |the algorithm and passphrase. If a string is passed it is
               |encrypted and returned as a base64 encoded string. If a bytebuf
               |is passed the encryped bytebuf is returned.
               |Supported algorithms: "DES", "3DES", "AES256"
               |
               |Options:
               |  :url-safe bool - If true this base64 encoder will emit '-' and '_'
               |                   instead of the usual '+' and '/' characters.
               |                   Defaults to false.
               |                   Note: no padding is added when encoding using
               |                         the URL-safe alphabet.""")
     :examples (list (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (def encrypt (crypt/encrypt "3DES" "secret" :url-safe true))
                         |  (encrypt "hello") ; => "ndmW1NLsDHA"
                         |  (encrypt "world") ; => "KPYjndkZ8vM"
                         |  (encrypt (bytebuf [1 2 3 4 5]))) """ )) }

  crypt/encrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)
        suite (. :CipherSuiteFactory :create algorithm passphrase url-safe)]
    (fn [data] (. suite :encrypt data))))


(defn
  ^{ :arglists '("(crypt/decrypt algorithm passphrase :url-safe)")
  :doc (str/strip-margin
          """Returns a new function to decrypt a string or a bytebuf given the
            |algorithm and passphrase. If a string is passed it is base64
            |decoded, decrypted, and returned as string. If a
            |bytebuf is passed the decrypted bytebuf is returned.
            |Supported algorithms: "DES", "3DES", "AES256"
            |
            |Options:
            |  :url-safe bool - If true this base64 decoder will convert '-' and '_'
            |                   characters back to '+' and '/' before decoding.
            |                   Defaults to false.""")
     :examples (list (str/strip-margin
                       """(do
                         |  (load-module :crypt)
                         |  (def decrypt (crypt/encrypt "3DES" "secret" :url-safe true))
                         |  (decrypt "ndmW1NLsDHA") ; => "hello"
                         |  (decrypt "KPYjndkZ8vM") ; => "world"
                         |  (decrypt  (bytebuf [234 220 237 189 12 176 242 147]))) """ )) }

  crypt/decrypt

  [algorithm passphrase & options]

  (let [url-safe (:url-safe (apply hash-map options) false)
        suite (. :CipherSuiteFactory :create algorithm passphrase url-safe)]
     (fn [data] (. suite :decrypt data))))
