;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2019 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice walk functions


(ns walk)

(defn
  ^{ :arglists '("(comment & body)")
     :doc "Ignores body, yields nil"
     :examples (list
          """
          (comment
            (println 1)
            (println 5))
          """ ) }

  walk [inner outer form]

  (cond
    (list? form) (outer (apply list (map inner form)))
    (map-entry? form) (outer (map-entry (inner (key form)) (inner (val form))))
    (coll? form) (outer (into (empty form) (map inner form)))
    :else (outer form)))


(defn postwalk [f form]
  (walk/walk (partial postwalk f) f form))


(defn prewalk [f form]
  (walk/walk (partial prewalk f) identity (f form)))


(defn postwalk-dump [form]
  (walk/postwalk (fn [x] (println "Walked:" (pr-str x)) x) form))


(defn prewalk-dump [form]
  (walk/prewalk (fn [x] (println "Walked:" (pr-str x)) x) form))


(defn
  ^{ :arglists '("(keywordize-keys form)")
     :doc "Recursively transforms all map keys from strings to keywords."
     :examples (list """(walk/keywordize-keys '(1 2 {"a" 1 "b" 2}))""") }

  keywordize-keys [form]

  (let [f (fn [[k v]] (if (string? k) [(keyword k) v] [k v]))]
    ;; only apply to maps
    (walk/postwalk (fn [x] (if (map? x) (into {} (map f x)) x)) form)))


(defn
  ^{ :arglists '("(stringify-keys form)")
     :doc "Recursively transforms all map keys from keywords to strings."
     :examples (list """(walk/keywordize-keys '(1 2 {"a" 1 "b" 2}))""") }

  stringify-keys [form]

  (let [f (fn [[k v]] (if (keyword? k) [(name k) v] [k v]))]
    ;; only apply to maps
    (postwalk (fn [x] (if (map? x) (into {} (map f x)) x)) form)))


(defn
  ^{ :arglists '("(macroexpand-all form)")
     :doc "Recursively expands all macros in the form."
     :examples (list
          """
          (macroexpand-all (let [x 2]
                             (cond
                               (= x 0) "0"
                               (= x 1) "1"
                               :else "else")))
          """ ) }

  macroexpand-all [form]

  (walk/prewalk (fn [x] (if (list? x) (macroexpand x) x)) form))
