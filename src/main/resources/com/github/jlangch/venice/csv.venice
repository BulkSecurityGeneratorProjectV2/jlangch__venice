;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; CSV reader / writer


(ns csv)

(import :java.io.Writer)
(import :java.io.StringWriter)


(defn
  ^{ :arglists '("(csv/read source & options)")
     :doc """
          Reads CSV-data from a source. The source may be a a string, a bytebuf,
          a file, a Java InputStream, or a Java Reader

          Options:
            :encoding enc - used when reading from a binary data source
                            e.g :encoding :utf-8, defaults to :utf-8
            :separator val - e.g. ",", defaults to a comma
            :quote val - e.g. "'", defaults to a double quote
          """
     :examples '(
          """
          (do
            (load-module :csv)
            (csv/read "1,\\"ab\\",false"))
          """,
          """
          (do
            (load-module :csv)
            (csv/read "1:::'ab':false" :separator ":" :quote "'"))
          """ ) }

  csv/read [source & options]

  (let [data (if (string? source)
                source
                (io/slurp source (conj options :binary false)))
        opts (apply hash-map options)
        separator (str (coalesce (:separator opts) csv/comma))
        quote (str (coalesce (:quote opts) csv/double-quote))
        two-quotes (str quote quote)
        pattern (regex/pattern (csv/make-regex separator quote))]

    (map #(csv/parse-line % pattern separator quote two-quotes)
         (str/split-lines data))))


(defn
  ^{ :arglists '("(csv/write writer records & options)")
     :doc """
          Writes data to a writer in CSV format. The writer is a
          Java java.io.Writer

          Options:
            :separator val - e.g. ",", defaults to a comma
            :quote val - e.g. "'", defaults to a double quote
            :newline val (:lf (default) or :cr+lf)
          """
     :examples '(
          """
          (do
            (load-module :csv)

            (let [fs (. :java.io.FileOutputStream :new (io/file "test.csv"))]
              (try-with [writer (. :java.io.OutputStreamWriter :new fs "utf-8")]
                (csv/write writer [[1 "AC" false] [2 "WS" true]])
                (. writer :flush))))
          """ ) }

  csv/write [writer records & options]

  (let [opts (apply hash-map options)
        separator (str (coalesce (:separator opts) csv/comma))
        quote (str (coalesce (:quote opts) csv/double-quote))
        newline (:newline opts :lf)]
    (csv/write* writer
                records
                separator
                quote
                (csv/newlines newline))))


(defn
  ^{ :arglists '("(csv/write-str records & options)")
     :doc """
          Writes data to a string in CSV format.

          Options:
            :separator val - e.g. ",", defaults to a comma
            :quote val - e.g. "'", defaults to a double quote
            :newline val (:lf (default) or :cr+lf)
          """
     :examples '(
          """
          (do
            (load-module :csv)
            (csv/write-str [[1 "AC" false] [2 "WS" true]]))
          """ ) }

  csv/write-str [records & options]

  (let [opts (apply hash-map options)
        separator (str (coalesce (:separator opts) csv/comma))
        quote (str (coalesce (:quote opts) csv/double-quote))
        newline (:newline opts :lf)]
    (try-with [writer (. :StringWriter :new)]
      (csv/write* writer
                  records
                  separator
                  quote
                  (csv/newlines newline))
      (. writer :flush)
      (str writer))))


(def csv/double-quote (char 34))
(def csv/comma (char 44))
(def csv/newlines {:lf "\n" :cr+lf "\r\n"})


(defn- csv/make-regex [separator quote]
  (str/format "[%c]|[^%c%c]+|[%c](?:[^%c]|[%c][%c])*[%c]"
              (char separator)
              (char separator)
              (char quote)
              (char quote)
              (char quote)
              (char quote)
              (char quote)
              (char quote)))

(defn- csv/split [s pattern]
  (regex/find-all (regex/matcher pattern s)))

(defn- csv/unquote [s quote two-quotes]
  (if (and (str/starts-with? s quote) (str/ends-with? s quote))
      (-> (str/strip-end (str/strip-start s quote) quote)
          (str/replace-all two-quotes quote))
      s))

(defn- csv/parse-line [s pattern separator quote two-quotes]
  (let [elements (csv/split s pattern)]
    (loop [items elements values []]
       (let [head (first items)]
         (cond
           (nil? head) values
           (== head separator) (recur (rest items) (conj values nil))
           :else (recur (rest (rest items))
                        (conj values (csv/unquote head quote two-quotes))))))))

(defn- csv/escape [s quote]
  (->> (str/split s (str "[" quote "]"))
       (str/join (str quote quote))))

(defn- csv/quote? [s quote separator]
  (or (str/contains? s " ")
      (str/contains? s quote)
      (str/contains? s separator)))

(defn- csv/quote [s quote separator]
  (if (csv/quote? s quote separator)
      (str quote (csv/escape s quote) quote)
      s))

(defn- csv/write-record [writer record separator quote]
  (when (some? record)
     (. writer :write
        (str/join separator
                  (map #(csv/quote (str %) quote separator) record)))))

(defn- csv/write* [writer records separator quote newline]
  (if-let [record (first records)]
    (do
      (write-record writer record separator quote)
      (loop [records (rest records)]
        (when-not (empty? records)
          (. writer :write newline)
          (write-record writer (first records) separator quote)
          (recur (rest records)))))))
