;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Simple GREP in Venice

(ns grep)

(deftype :named-file [name :string, data :any])

(defn numbered-lines [lines]
  (map vector (lazy-seq 1 inc) lines))

(defn filter-lines [line-matcher lines]
  (filter #(regex/matches? line-matcher (second %)) lines))

(defn read-lines [line-matcher file]
  (->> (io/slurp-lines file)
       (numbered-lines)
       (filter-lines line-matcher)))

(defn grep-in-file [line-matcher nfile]
  { (:name nfile) (read-lines line-matcher (:data nfile)) })

(defn grep-in-files [line-matcher nfiles]
  (->> (map #(grep-in-file line-matcher %) nfiles)
       (apply merge {})
       (filter-kv (fn [k v] (not-empty? v)))
       (flatten-matches)))

(defn grep-in-dir [dir file-glob line-matcher]
  (->> (io/list-files-glob dir file-glob)
       (map (fn [f] (named-file. (str/strip-start (io/file-path f) dir)
                                 f)))
       (grep-in-files line-matcher)))

(defn grep-in-zipfile [zip file-glob line-matcher]
  (->> (io/unzip-all file-glob zip)
       (map (fn [f] (named-file. (str (io/file-name zip) "!" (key f))
                                 (val f))))
       (grep-in-files line-matcher)))

(defn flatten-matches [matches]
  ;; return a list of tuples [file-name line-no matched-line]
  (->> (map #(cartesian-product (list (key %)) (val %)) matches)
       (apply concat)
       (map flatten)))

(defn sort-matches [matches]
  ;; sort by filename and line number
  (sort-by #(str (first %) (second %)) matches))

(defn print-matches [matches]
  (doseq [[file-name line-no matched-line] matches]
         (printf "%s:%s:%s\n" file-name line-no matched-line)))

(defn process-matches [print? matches]
  (if print?
    (do
      (print-matches matches)
      (println *err* "Done.")
      nil)
    matches))


(defn
  ^{ :arglists '(
        "(grep/grep-zip dir zipfile-glob file-glob line-pattern & options)")
     :doc
        """
        Search for lines that match a regular expression in text files within
        ZIP files. The search chooses all files in the ZIP that match a
        globbing pattern.
        The search starts from a base directory and chooses all ZIP files that
        match the zipfile globbing pattern.

        Options:

        | :print b    | e.g :print false, defaults to true |
        """
    :examples '(
       """
       (do
         (load-module :grep)
         (grep/grep-zip "/Users/foo/logs" "logs*.zip" "**/*.log" ".*Error.*"))
       """ )
    :see-also '("io/file-matches-glob?") }

  grep-zip [dir zipfile-glob file-glob line-pattern & options]

  (let [opts    (apply hash-map options)
        print?  (:print opts true)
        matcher (regex/matcher line-pattern "")]
    (->> (io/list-files-glob dir zipfile-glob)
         (map #(grep-in-zipfile % file-glob matcher))
         (apply concat)
         (sort-matches)
         (process-matches print?))))


(defn
  ^{ :arglists '("(grep dir file-glob line-pattern & options)")
     :doc
        """
        Search for lines that match a regular expression in text files. The
        search starts from a base directory and chooses all files that match
        a globbing pattern.

        Options:

        | :print b    | e.g :print false, defaults to true |
        """
     :examples '(
        """
        (do
          (load-module :grep)
          (grep/grep "/Users/foo/logs" "*.log" ".*Error.*"))
        """ )
     :see-also '("io/file-matches-glob?") }

  grep [dir file-glob line-pattern & options]

  (let [opts    (apply hash-map options)
        print?  (:print opts true)
        matcher (regex/matcher line-pattern "")]
    (->> (grep-in-dir dir file-glob matcher)
         (sort-matches)
         (process-matches print?))))
