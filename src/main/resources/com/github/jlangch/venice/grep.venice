;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Simple GREP in Venice

(ns grep)

(deftype :named-file [name :string, data :any])

(defn numbered-lines [lines]
  (map vector (range) lines))

(defn filter-lines [lines pattern]
  (vector (filter #(regex/matches pattern (second %)) lines)))

(defn read-lines [nfile]
  (->> (io/slurp-lines (:data nfile))
       (numbered-lines)
       (assoc nfile :data)))

(defn grep-in-file [pattern nfile]
  { (:name nfile) (filter-lines (:data (read-lines nfile)) pattern) })

(defn grep-in-dir [pattern dir file-glob]
  (let [files (map (fn [f] (named-file. (first f) (second f)))
                   (io/list-files-glob dir file-glob))]
    (apply merge (map #(grep-in-file pattern %) files))))

(defn grep-in-zipfile [pattern zip file-pattern]
  (let [files (filter (io/unzip-all zip)
  (let [files (map (fn [f] (named-file. (str (io/file-name zip) ":::" (first f))
                                        (second f)))
                   (io/unzip-all zip))]
    (apply merge (map #(grep-in-file pattern %) files))))

(defn print-matches [matches]
  (doseq [[fname submatches] matches
    [line-no match] submatches]
    (printf "%s:%s:%s\n" fname line-no match)))

(defn grep-zip [zip file-glob pattern]
    ;; (load-module :grep ['grep :as 'g])
    ;; (g/grep /users/foo/logs/logs.zip" "*.log" ".*remove")
    (print-matches (grep-in-zip zip file-glob (regex/pattern pattern)))
    (println *err* "Done."))

(defn grep [dir file-glob pattern]
    ;; (load-module :grep ['grep :as 'g])
    ;; (g/grep /users/foo/logs "*.log" ".*remove")
    (print-matches (grep-in-dir dir file-glob (regex/pattern pattern)))
    (println *err* "Done."))
