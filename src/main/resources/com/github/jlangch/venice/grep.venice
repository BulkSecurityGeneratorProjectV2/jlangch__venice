;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2022 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Simple GREP in Venice  (in progress: NOT YET TESTED!)

(ns grep)

(deftype :named-file [name :string, data :any])

(defn numbered-lines [lines]
  (map vector (range) lines))

(defn filter-lines [line-matcher lines]
  (filter #(regex/matches? line-matcher (second %)) lines))

(defn read-lines [line-matcher file]
  (->> (io/slurp-lines file)
       (numbered-lines)
       (filter-lines line-matcher)))

(defn grep-in-file [line-matcher nfile]
  { (:name nfile) (read-lines line-matcher (:data nfile)) })

(defn grep-in-dir [dir file-glob line-matcher]
  (let [files (map (fn [f] (named-file. (str/strip-start (io/file-path f) dir) f))
                   (io/list-files-glob dir file-glob))]
    (apply merge (map #(grep-in-file line-matcher %) files))))

(defn grep-in-zipfile [zip file-glob line-matcher]
  (->> (io/unzip-all zip file-glob)
       (map (fn [f] (named-file. (str (io/file-name zip) "!" (first f))
                                 (second f))))
       (apply merge (map #(grep-in-file line-matcher %)))))

(defn print-matches [matches]
  (doseq [[fname submatches] matches
    [line-no match] submatches]
    (printf "%s:%s:%s\n" fname line-no match)))

(defn grep-zip [zip file-glob line-pattern]
    ;; (load-module :grep ['grep :as 'g])
    ;; (g/grep /users/foo/logs/logs.zip" "*.log" ".*Session removed.*")
    (print-matches (grep-in-zip zip file-glob (regex/matcher line-pattern "")))
    (println *err* "Done."))

(defn grep [dir file-glob line-pattern]
    ;; (load-module :grep ['grep :as 'g])
    ;; (g/grep /users/foo/logs "*.log" ".*Session removed.*")
    (print-matches (grep-in-dir dir file-glob (regex/matcher line-pattern "")))
    (println *err* "Done."))
