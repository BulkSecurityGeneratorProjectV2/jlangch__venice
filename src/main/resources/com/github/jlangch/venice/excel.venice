;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Venice Excel functions

;;;; Required 3rd party libraries
;;;;   org.apache.poi:poi:4.1.2
;;;;   org.apache.poi:ooxml:4.1.2
;;;;   org.apache.poi:ooxml-schemas:4.1.2
;;;;   commons-codec:commons-codec:1.15
;;;;   org.apache.commons:commons-collections4:4.4
;;;;   org.apache.commons:commons-compress:1.20
;;;;   org.apache.xmlbeans:xmlbeans:3.1.0

(ns excel)

(import :com.github.jlangch.venice.util.excel.ExcelReader)
(import :com.github.jlangch.venice.util.excel.ExcelSheetReader)
(import :com.github.jlangch.venice.util.excel.ExcelBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelSheetBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelFontBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelCellStyleBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelColumnBuilder)
(import :com.github.jlangch.venice.util.excel.ExcelColumnBuilder)
(import :com.github.jlangch.venice.util.excel.DataRecord)
(import :java.io.File)
(import :java.io.OutputStream)
(import :java.io.InputStream)
(import :java.io.FileOutputStream)


(def colors { :BLACK1                  0
              :WHITE1                  1
              :RED1                    2
              :BRIGHT_GREEN1           3
              :BLUE1                   4
              :YELLOW1                 5
              :PINK1                   6
              :TURQUOISE1              7
              :BLACK                   8
              :WHITE                   9
              :RED                    10
              :BRIGHT_GREEN           11
              :BLUE                   12
              :YELLOW                 13
              :PINK                   14
              :TURQUOISE              15
              :DARK_RED               16
              :GREEN                  17
              :DARK_BLUE              18
              :DARK_YELLOW            19
              :VIOLET                 20
              :TEAL                   21
              :GREY_25_PERCENT        22
              :GREY_50_PERCENT        23
              :CORNFLOWER_BLUE        24
              :MAROON                 25
              :LEMON_CHIFFON          26
              :LIGHT_TURQUOISE1       27
              :ORCHID                 28
              :CORAL                  29
              :ROYAL_BLUE             30
              :LIGHT_CORNFLOWER_BLUE  31
              :SKY_BLUE               40
              :LIGHT_TURQUOISE        41
              :LIGHT_GREEN            42
              :LIGHT_YELLOW           43
              :PALE_BLUE              44
              :ROSE                   45
              :LAVENDER               46
              :TAN                    47
              :LIGHT_BLUE             48
              :AQUA                   49
              :LIME                   50
              :GOLD                   51
              :LIGHT_ORANGE           52
              :ORANGE                 53
              :BLUE_GREY              54
              :GREY_40_PERCENT        55
              :DARK_TEAL              56
              :SEA_GREEN              57
              :DARK_GREEN             58
              :OLIVE_GREEN            59
              :BROWN                  60
              :PLUM                   61
              :INDIGO                 62
              :GREY_80_PERCENT        63
              :AUTOMATIC              64 } )



;; #############################################################################
;;
;;                                Excel Writer
;;
;; #############################################################################


;; -----------------------------------------------------------------------------
;; ExcelBuilder
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(excel-builder type)")
     :doc """
          Creates a new Excel builder for the given type :xls or :xlsx.
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xls)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xls")))
          """,
          """
           """ )
     :see-also '(
        "excel/add-sheet", "excel/add-font", "excel/add-style",
        "excel/write-file", "excel/write-stream", "excel/write-bytebuf" )}

  excel-builder [type]

  (case type
    :xls  (. :ExcelBuilder :createXls)
    :xlsx (. :ExcelBuilder :createXlsx)
    (throw (. :VncException :new
              (str "Invalid Excel type " type ". Use :xls or :xlsx")))))


(defn
  ^{ :arglists '("(wirte-data builder sheet-name data)")
     :doc "Writes the data of a 2D array to the excel."
     :examples '(
         """
         (do
           (load-module :excel)
           (let [wbook (excel/excel-builder :xlsx)
                 dt    (time/local-date 2021 1 1)
                 ts    (time/local-date-time 2021 1 1 15 30 45)]
             (excel/write-data wbook "Data" [[100  101  102  103  104  105]
                                             [200  "ab" 1.23 dt   ts   false]])
             (excel/write-file wbook "sample.xlsx")))
         """ )
     :see-also '("excel/write-stream", "excel/write-bytebuf")}

  write-data [builder sheet-name data ]

  { :pre [(instance-of? :ExcelBuilder builder)
          (string? sheet-name) ] }

  (let [sheet (excel/add-sheet builder sheet-name { :no-header-row true })
        cell  (fn [r c val] (excel/cell-value sheet (inc r) (inc c) val))]
    (map-indexed (fn [row rv] (map-indexed (fn [col cv] (cell row col cv)) rv))
                 data)))


(defn
  ^{ :arglists '("(write-file builder f)")
     :doc "Writes the excel to a file."
     :examples '(
         """
         (do
           (load-module :excel)
           (let [data  [ {:first "John" :last "Doe"   :age 28 }
                         {:first "Sue"  :last "Ford"  :age 26 } ]
                 wbook (excel/excel-builder :xlsx)
                 sheet (excel/add-sheet wbook "Sheet 1")]
             (excel/add-column sheet "First Name" { :data-field :first })
             (excel/add-column sheet "Last Name" { :data-field :last })
             (excel/add-column sheet "Age" { :data-field :age })
             (excel/render-items sheet data)
             (excel/auto-size-columns sheet)
             (excel/write-file wbook "sample.xlsx")))
         """ )
     :see-also '("excel/write-stream", "excel/write-bytebuf")}

  write-file [builder f]

  { :pre [(instance-of? :ExcelBuilder builder)
          (or (string? f) (instance-of? :File f)) ] }

  (. builder :write (. :FileOutputStream :new f)))


(defn
  ^{ :arglists '("(write-stream builder os)")
     :doc "Writes the excel to a Java :OutputStream."
     :examples '(
         """
         (do
           (load-module :excel)
           (let [os    (. :java.io.FileOutputStream :new "sample.xlsx")
                 data  [ {:first "John" :last "Doe"   :age 28 }
                         {:first "Sue"  :last "Ford"  :age 26 } ]
                 wbook (excel/excel-builder :xlsx)
                 sheet (excel/add-sheet wbook "Sheet 1")]
             (excel/add-column sheet "First Name" { :data-field :first })
             (excel/add-column sheet "Last Name" { :data-field :last })
             (excel/add-column sheet "Age" { :data-field :age })
             (excel/render-items sheet data)
             (excel/auto-size-columns sheet)
             (excel/write-stream os)))
         """ )
     :see-also '("excel/write-file", "excel/write-bytebuf")}

  write-stream [builder os]

  { :pre [(instance-of? :ExcelBuilder builder)
          (instance-of? :OutputStream os)] }

  (. builder :write os))


(defn
  ^{ :arglists '("(write-bytebuf builder os)")
     :doc "Writes the excel to a bytebuf. Returns the bytebuf."
     :examples '(
         """
         (do
           (load-module :excel)
           (let [data  [ {:first "John" :last "Doe"   :age 28 }
                         {:first "Sue"  :last "Ford"  :age 26 } ]
                 wbook (excel/excel-builder :xlsx)
                 sheet (excel/add-sheet wbook "Sheet 1")]
             (excel/add-column sheet "First Name" { :data-field :first })
             (excel/add-column sheet "Last Name" { :data-field :last })
             (excel/add-column sheet "Age" { :data-field :age })
             (excel/render-items sheet data)
             (excel/auto-size-columns sheet)
             (excel/write-bytebuf)))
         """ )
     :see-also '("excel/write-file", "excel/write-stream")}

  write-bytebuf [builder]

  { :pre [(instance-of? :ExcelBuilder builder)] }

  (. builder :writeToBytes))



;; -----------------------------------------------------------------------------
;; ExcelSheetBuilder
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '("(render-items builder items)")
     :doc "Render the passed data items"
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "excel/render-item", "excel/cell-value", "excel/cell-formula",
          "excel/auto-size-columns", "excel/auto-size-column",
          "excel/reader") }

  render-items [builder items]

  { :pre [(instance-of? :ExcelSheetBuilder builder)] }

  (->> (map #(. :DataRecord :of %) items)
       (into (. :java.util.ArrayList :new))
       (. builder :renderItems)))


(defn
  ^{ :arglists '("(render-item builder item)")
     :doc "Render a single data item"
     :examples '(
          """
          (do
            (load-module :excel)
            (let [wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-item sheet {:first "John" :last "Doe"   :age 28 })
              (excel/render-item sheet {:first "Sue"  :last "Ford"  :age 26 })
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "excel/render-items", "excel/cell-value", "excel/cell-formula",
          "excel/auto-size-columns", "excel/auto-size-column",
          "excel/reader") }

  render-item [builder item]

  { :pre [(instance-of? :ExcelSheetBuilder builder) (map? item)] }

  (->> (. :DataRecord :of item)
       (. builder :renderItem)))


(defn
  ^{ :arglists '("(cell-value builder row col val)")
     :doc "Set a value for a specific cell given by its row and col."
     :examples '(
          """
          (do
            (load-module :excel)
            (let [wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/cell-value sheet 1 1 "John")
              (excel/cell-value sheet 1 2 "Doe")
              (excel/cell-value sheet 1 3 28)
              (excel/cell-value sheet 2 1 "Sue")
              (excel/cell-value sheet 2 2 "Ford")
              (excel/cell-value sheet 2 3 26)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """,
          """
          (do
            (load-module :excel)
            (let [wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-font wbook :italic { :italic true })
              (excel/add-font wbook :bold { :bold true })
              (excel/add-style wbook :italic { :font :italic })
              (excel/add-style wbook :bold { :font :bold })
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/cell-value sheet 1 1 "John" :italic)
              (excel/cell-value sheet 1 2 "Doe"  :italic)
              (excel/cell-value sheet 1 3 28     :bold)
              (excel/cell-value sheet 2 1 "Sue"  :italic)
              (excel/cell-value sheet 2 2 "Ford" :italic)
              (excel/cell-value sheet 2 3 26     :bold)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "excel/render-items", "excel/render-item", "excel/cell-formula",
          "excel/auto-size-columns", "excel/auto-size-column",
          "excel/reader") }

  cell-value

  ([builder row col val]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col)] }
    (. builder :value row col val))

  ([builder row col val style]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col) (keyword? style)] }
    (. builder :value row col val (name style))))


(defn
  ^{ :arglists '("(cell-formula builder row col formula)")
     :doc "Set a formula for a specific cell given by its row and col."
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:a 100 :b 200 }
                          {:a 101 :b 201 }
                          {:a 102 :b 202 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row true })]
              (excel/add-column sheet "A" { :data-field :a })
              (excel/add-column sheet "B" { :data-field :b })
              (excel/add-column sheet "C" { :data-field :c })
              (excel/render-items sheet data)
              (excel/cell-formula sheet 1 3 "SUM(A1,B1)")
              (excel/cell-formula sheet 2 3 "SUM(A2,B2)")
              (excel/cell-formula sheet 3 3 "SUM(A3,B3)")
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """,
          """
          (do
            (load-module :excel)
            (let [data  [ {:a 100 :b 200 }
                          {:a 101 :b 201 }
                          {:a 102 :b 202 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row true })]
              (excel/add-font wbook :bold { :bold true })
              (excel/add-style wbook :bold { :font :bold })
              (excel/add-column sheet "A" { :data-field :a })
              (excel/add-column sheet "B" { :data-field :b })
              (excel/add-column sheet "C" { :data-field :c })
              (excel/render-items sheet data)
              (excel/cell-formula sheet 1 3 "SUM(A1,B1)" :bold)
              (excel/cell-formula sheet 2 3 "SUM(A2,B2)" :bold)
              (excel/cell-formula sheet 3 3 "SUM(A3,B3)" :bold)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "cell-address", "sum-formula", "render-items", "render-item",
          "cell-value", "auto-size-columns", "auto-size-column", "reader") }

  cell-formula

  ([builder row col formula]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col) (string? formula)] }
    (. builder :formula row col formula))

  ([builder row col formula style]
    { :pre [(instance-of? :ExcelSheetBuilder builder)
            (long? row) (long? col) (string? formula) (keyword? style)] }
    (. builder :formula row col formula (name style))))


(defn
  ^{ :arglists '("(sum-formula builder row-from row-to col-from col-to)")
     :doc "Returns a sum formula"
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:a 100 :b 200 }
                          {:a 101 :b 201 }
                          {:a 102 :b 202 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row true })]
              (excel/add-column sheet "A" { :data-field :a })
              (excel/add-column sheet "B" { :data-field :b })
              (excel/add-column sheet "C" { :data-field :c })
              (excel/render-items sheet data)
              (excel/cell-formula sheet 1 3 (excel/sum-formula sheet 1 1 1 2))
              (excel/cell-formula sheet 2 3 (excel/sum-formula sheet 2 2 1 2))
              (excel/cell-formula sheet 3 3 (excel/sum-formula sheet 3 3 1 2))
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '("excel/cell-address") }

  sum-formula [builder row-from row-to col-from col-to]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? row-from) (long? row-to)
          (long? col-from) (long? col-to)] }

  (. builder :sumFormula row-from row-to col-from col-to))


(defn
  ^{ :arglists '("(cell-address builder row col)")
     :doc "Returns the cell address for a cell at row/col in a sheet"
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:a 100 :b 200 }
                          {:a 101 :b 201 }
                          {:a 102 :b 202 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row true })
                  addr  (fn [r c] (excel/cell-address sheet r c))]
              (excel/add-column sheet "A" { :data-field :a })
              (excel/add-column sheet "B" { :data-field :b })
              (excel/add-column sheet "C" { :data-field :c })
              (excel/render-items sheet data)
              (excel/cell-formula sheet 1 3 "SUM(~(addr 1 1),~(addr 1 2))")
              (excel/cell-formula sheet 2 3 "SUM(~(addr 2 1),~(addr 2 2))")
              (excel/cell-formula sheet 3 3 "SUM(~(addr 3 1),~(addr 3 2))")
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '("excel/cell-formula") }

  cell-address [builder row col]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? row) (long? col)] }

  (. builder :cellAddress row col))


(defn
  ^{ :arglists '("(auto-size-columns builder)")
     :doc "Auto size the width of all columns."
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "excel/auto-size-column", "excel/render-items", "excel/render-item",
          "excel/cell-value", "excel/cell-formula", "excel/reader") }

  auto-size-columns [builder]

  { :pre [(instance-of? :ExcelSheetBuilder builder)] }

  (. builder :autoSizeColumns))


(defn
  ^{ :arglists '("(auto-size-column builder col)")
     :doc "Auto size the width of column col (1..n)."
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-items sheet data)
              (excel/auto-size-column sheet 1)
              (excel/auto-size-column sheet 2)
              (excel/auto-size-column sheet 3)
              (excel/write-file wbook "sample.xlsx")))
          """ )
     :see-also '(
          "excel/auto-size-columns", "excel/render-items", "excel/render-item",
          "excel/cell-value", "excel/cell-formula", "excel/reader") }

  auto-size-column [builder col]

  { :pre [(instance-of? :ExcelSheetBuilder builder)
          (long? col)] }

  (. builder :autoSizeColumn col))


(defn
  ^{ :arglists '("(reader builder)")
     :doc "Return a sheet reader for the sheet builder."
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:a 100 :b 200 }
                          {:a 101 :b 201 }
                          {:a 102 :b 202 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1"
                                         { :no-header-row true })]
              (excel/add-column sheet "A" { :data-field :a })
              (excel/add-column sheet "B" { :data-field :b })
              (excel/add-column sheet "C" { :data-field :c })
              (excel/render-items sheet data)
              (excel/cell-formula sheet 1 3 "SUM(A1,B1)")
              (excel/cell-formula sheet 2 3 "SUM(A2,B2)")
              (excel/cell-formula sheet 3 3 "SUM(A3,B3)")
              (let [reader (excel/reader sheet)]
                (excel/evaluate-formulas reader)
                (excel/cell-long-val reader 1 1))))
            """ )
       :see-also '(
            "excel/render-items", "excel/render-item",
            "excel/cell-value", "excel/cell-formula",
            "excel/auto-size-columns", "excel/auto-size-column",
            "excel/reader") }

  evaluate-formulas [builder]

  { :pre [(instance-of? :ExcelSheetBuilder builder)] }

  (. builder :reader))



;; -----------------------------------------------------------------------------
;; Sheet
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(add-sheet excel-builder title)"
          "(add-sheet excel-builder title options)" )
     :doc """
          Adds a sheet with optional attributes to an Excel.

          Options:
          no-header-row b         - without header row, e.g. true, false
          default-column-width n  - default column width in points, e.g. 100
          default-header-style s  - default header style, e.g. :header
          default-body-style s    - default body style, e.g. :body
          default-footer-style s  - default footer style, e.g. :footer
          merged-region r         - merged region [row-from row-to col-from col-to],
                                    e.g. [1 1 4 10]
          display-zeros b         - display zeros, e.g. true, false
                                    Set whether a cell should show 0 (zero) when
                                    containing zero value. When false, cells with
                                    zero value appear blank instead of showing
                                    the number zero.
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)
                  sheet (excel/add-sheet wbook "Sheet 1")]
              (excel/add-column sheet "First Name" { :data-field :first })
              (excel/add-column sheet "Last Name" { :data-field :last })
              (excel/add-column sheet "Age" { :data-field :age })
              (excel/render-items sheet data)
              (excel/auto-size-columns sheet)
              (excel/write-file wbook "sample.xlsx")))
          """,
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)]
              (excel/add-font wbook :bold { :bold true })
              (excel/add-font wbook :italic { :italic true })
              (excel/add-style wbook :header { :font :bold })
              (excel/add-style wbook :body { :font :italic })
              (excel/add-style wbook :footer { :font :bold })

              (let [sheet (excel/add-sheet wbook "Sheet 1"
                                           { :no-header-row false
                                             :default-column-width 100
                                             :default-header-style :header
                                             :default-body-style :body
                                             :default-footer-style :footer
                                             :display-zeros true})]
                (excel/add-column sheet "First Name" { :data-field :first })
                (excel/add-column sheet "Last Name" { :data-field :last })
                (excel/add-column sheet "Age" { :data-field :age })
                (excel/render-items sheet data)
                (excel/auto-size-column sheet 1)
                (excel/auto-size-column sheet 2)
                (excel/auto-size-column sheet 3)
                (excel/write-file wbook "sample.xlsx"))))
          """ )
     :see-also '("excel/add-column", "excel/add-font", "excel/add-style") }

  add-sheet

  ([excel-builder title]
    (add-sheet excel-builder title {}))

  ([excel-builder title options]
    { :pre [(instance-of? :ExcelBuilder excel-builder)
            (string? title)] }
    (let [builder (. excel-builder :withSheet (name title) (class :DataRecord))]
      (when-let [x (:no-header-row options)]
        (. builder :noHeader))
      (when-let [x (:default-column-width options)]
        (. builder :setDefaultColumnWidthInPoints x))
      (when-let [x (:default-header-style options)]
        (. builder :defaultHeaderStyle (name x)))
      (when-let [x (:default-body-style options)]
        (. builder :defaultBodyStyle (name x)))
      (when-let [x (:default-footer-style options)]
        (. builder :defaultFooterStyle (name x)))
      (when-let [x (:merged-region options)]
        (. builder :addMergedRegion (first x) (second x) (third x) (fourth x)))
      (when-let [x (:display-zeros options)]
        (. builder :displayZeros x))

      (. builder :end)
      builder)))



;; -----------------------------------------------------------------------------
;; Font
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(add-font excel-builder font-id)"
          "(add-font excel-builder font-id options)")
     :doc """
          Add font with optional attributes to an Excel.

          Options:
          name s              - font name, e.g. 'Arial'
          height n            - height in points, e.g. 12
          bold b              - bold, e.g. true, false
          italic b            - italic, e.g. true, false
          color c             - color, e.g. :excel/SKY_BLUE
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :age 28 }
                          {:first "Sue"  :last "Ford"  :age 26 } ]
                  wbook (excel/excel-builder :xlsx)]
              (excel/add-font wbook :header { :height 12
                                              :bold true
                                              :italic false
                                              :color (:SKY_BLUE excel/colors) })
              (excel/add-style wbook :header { :font :header })

              (let [sheet (excel/add-sheet wbook "Sheet 1"
                                           { :no-header-row false
                                             :default-header-style :header })]
                (excel/add-column sheet "First Name" { :data-field :first })
                (excel/add-column sheet "Last Name" { :data-field :last })
                (excel/add-column sheet "Age" { :data-field :age })
                (excel/render-items sheet data)
                (excel/auto-size-columns sheet)
                (excel/write-file wbook "sample.xlsx"))))
          """ )
     :see-also '("excel/add-sheet", "excel/add-style") }

  add-font

  ([excel-builder font-id]
    (add-font excel-builder font-key {}))

  ([excel-builder font-id options]
    { :pre [(instance-of? :ExcelBuilder excel-builder)
            (keyword? font-id)] }
    (let [builder (. excel-builder :withFont (name font-id))]
      (when-let [x (:height options)] (. builder :heightInPoints x))
      (when-let [x (:bold options)]   (. builder :bold))
      (when-let [x (:italic options)] (. builder :italic))
      (when-let [x (:color options)]  (. builder :color x))

      (. builder :end)
      builder)))



;; -----------------------------------------------------------------------------
;; Style
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(add-style excel-builder style-id)"
          "(add-style excel-builder style-id options)")
     :doc """
          Add a style with optional attributes to an Excel.

          Options:
          format s            - format, e.g. "0#.##"
          font r              - font name, e.g. :header
          bg-color c          - background color, e.g. :excel/SKY_BLUE
          wrap-text b         - wrap text, e.g. true, false
          h-align e           - horizontal alignment {:left, :center, :right}
          v-align e           - vertical alignment {:top, :middle, :bottom}
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :weight 70.5 }
                          {:first "Sue"  :last "Ford"  :weight 54.2 } ]
                  wbook (excel/excel-builder :xlsx)]
              (excel/add-font wbook :header { :bold true })
              (excel/add-style wbook :header { :font :header
                                               :bg-color (:GREY_25_PERCENT excel/colors)
                                               :h-align :center })
              (excel/add-style wbook :weight { :format, "#,##0.0"
                                               :h-align :right })

              (let [sheet (excel/add-sheet wbook "Sheet 1"
                                           { :no-header-row false
                                             :default-header-style :header })]
                (excel/add-column sheet "First Name" { :data-field :first })
                (excel/add-column sheet "Last Name" { :data-field :last })
                (excel/add-column sheet "Weight" { :data-field :weight
                                                   :body-style :weight })
                (excel/render-items sheet data)
                (excel/auto-size-columns sheet)
                (excel/write-file wbook "sample.xlsx"))))
          """ )
     :see-also '("excel/add-sheet", "excel/add-font") }

  add-style

  ([excel-builder style-id]
    (add-style excel-builder style-id {}))

  ([excel-builder style-id options]
    { :pre [(instance-of? :ExcelBuilder excel-builder)
            (keyword? style-id)] }
    (let [builder (. excel-builder :withCellStyle (name style-id))]
      (when-let [x (:format options)]    (. builder :format x))
      (when-let [x (:font options)]      (. builder :font x))
      (when-let [x (:bg-color options)]  (. builder :bgColor x))
      (when-let [x (:wrap-text options)] (. builder :wrapText))
      (when-let [x (:h-align options)]
        (case x
          :left     (. builder :hAlignLeft)
          :center   (. builder :hAlignCenter)
          :right    (. builder :hAlignRight)
          (throw    (. :VncException :new
                    (str "Invalid horizontal alignment "
                         align
                         ". Use one of :left, :center, or :right")))))
      (when-let [x (:v-align options)]
        (case align
          :top      (. builder :vAlignTop)
          :midddle  (. builder :vAlignMiddle)
          :bottom   (. builder :hAlignBottom)
          (throw    (. :VncException :new
                    (str "Invalid vertical alignment "
                         align
                         ". Use one of :top, :middle, or :bottom")))))

      (. builder :end)
      builder)))



;; -----------------------------------------------------------------------------
;; Column
;; -----------------------------------------------------------------------------

(defn
  ^{ :arglists '(
          "(add-column sheet-builder title)"
          "(add-column sheet-builder title options)")
     :doc """
          Defines a column with optional attributes.

          Options:
          field f             - a field, e.g. :first-name
          width n             - width in points, e.g. 100
          hidden b            - hidden, e.g. true, false
          header-style r      - style name for header row, e.g. :header
          body-style r        - style name for body rows, e.g. :body
          footer-style r      - style name for footer row, e.g. :footer
          footer-value        - text or numeric value for the column's footer cell,
                                e.g. "done", 10000.00M, nil
          footer-aggregate e  - aggregation mode for the column's footer cell
                                value, e.g. {:min, :max, :avg, :sum, :none}
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (let [data  [ {:first "John" :last "Doe"   :weight 70.5 }
                          {:first "Sue"  :last "Ford"  :weight 54.2 } ]
                  wbook (excel/excel-builder :xlsx)]
              (excel/add-font wbook :header { :bold true })
              (excel/add-style wbook :header { :font :header
                                               :bg-color (:GREY_25_PERCENT excel/colors)
                                               :h-align :center })
              (excel/add-style wbook :weight { :format, "#,##0.0"
                                               :h-align :right })

              (let [sheet (excel/add-sheet wbook "Sheet 1"
                                           { :no-header-row false
                                             :default-header-style :header })]
                (excel/add-column sheet "First Name" { :data-field :first })
                (excel/add-column sheet "Last Name" { :data-field :last })
                (excel/add-column sheet "Weight" { :data-field :weight
                                                   :body-style :weight })
                (excel/render-items sheet data)
                (excel/auto-size-columns sheet)
                (excel/write-file wbook "sample.xlsx"))))
          """,
          """
          (excel/column "First Name"
                        { :data-field :first-name
                          :width 100
                          :hidden false
                          :header-style :header
                          :body-style :body
                          :footer-style :footer
                          :footer-value 10000.00M
                          :footer-aggregate :none })
          """ )
     :see-also '("excel/add-sheet") }

  add-column

  ([sheet-builder title]
    (add-columnn sheet-builder title {}))

  ([sheet-builder title options]
    { :pre [(instance-of? :ExcelSheetBuilder sheet-builder)
            (string? title)] }
    (let [builder (. sheet-builder :withColumn title)]
      (when-let [x (:data-field options)]   (. builder :colMapper x))
      (when-let [x (:width options)]        (. builder :widthInPoints x))
      (when-let [x (:hidden options)]       (. builder :hidden x))
      (when-let [x (:header-style options)] (. builder :headerStyle (name x)))
      (when-let [x (:body-style options)]   (. builder :bodyStyle (name x)))
      (when-let [x (:footer-style options)] (. builder :footerStyle (name x)))
      (when-let [x (:footer-value options)]
        (cond
          (nil? x)    nil
          (string? x) (. builder :footerTextValue x)
          (number? x) (. builder :footerNumberValue x)
          :else       (throw (. :VncException :new
                                (str "An explicit column footer value must be "
                                     "nil, a string, or a number")))))
      (when-let [x (:footer-aggregate options)]
        (case x
          :min  (. builder :footerMin)
          :max  (. builder :footerMax)
          :avg  (. builder :footerAverage)
          :sum  (. builder :footerSum)
          (throw (. :VncException :new
                    (str "Invalid aggregate mode "
                         x
                         ". Use one of :min, :max, :avg, or :sum")))))

      (. builder :end)
      builder)))



;; #############################################################################
;;
;;                                Excel Reader
;;
;; #############################################################################

(defn
  ^{ :arglists '("(open source)")
     :doc """
          Opens an Excel from a source and returns an Excel reader.

          Supported sources are string file path, bytebuf, :java.io.File,
          or :java.io.InputStrteam.
          """
     :examples '(
          """
          (do
            (load-module :excel)
            (excel/open "sample.xls"))
          """ )
     :see-also '(
          "excel/sheet-count", "excel/sheet", "excel/evaluate-formulas") }

  open [source]

  (cond
    (string? source)                    (. :ExcelReader :open (io/file source))
    (bytebuf? source)                   (. :ExcelReader :open source)
    (instance-of? :File source)         (. :ExcelReader :open source)
    (instance-of? :InputStream source)  (. :ExcelReader :open source)

    :else (throw (. :VncException :new
              (str "Invalid Excel open source " (type source) )))))


(defn
  ^{ :arglists '("(sheet-count wbook)")
     :doc "Returns the number of sheets in the Excel."
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))]
              (excel/sheet-count wbook)))
          """ )
     :see-also '("excel/sheet", "excel/evaluate-formulas") }

  sheet-count [wbook]

  (long (. wbook :getNumberOfSheets)))


(defn
  ^{ :arglists '("(evaluate-formulas wbook)")
     :doc "Evaluate all formulas in the Excel."
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))]
              (excel/evaluate-formulas wbook)))
          """ )
     :see-also '("excel/sheet-count", "excel/sheet") }

  evaluate-formulas [wbook]

  (. wbook :evaluateAllFormulas))


(defn
  ^{ :arglists '("(sheet wbook ref)")
     :doc
          """
          Returns a sheet from the Excel reader referenced by its name or
          sheet index.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data1" [[100 101 102] [200 201 202]])
                (excel/write-data wbook "Data2" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook  (excel/open (test-xls))
                  sheet1 (excel/sheet wbook "Data1")
                  sheet2 (excel/sheet wbook 2)]
              ))
          """ )
     :see-also '("excel/sheet-count", "excel/evaluate-formulas",
                 "excel/sheet-name", "excel/sheet-row-range",
                 "excel/sheet-col-range",
                 "excel/cell-empty?", "excel/cell-type",
                 "excel/cell-string-val", "excel/cell-boolean-val",
                 "excel/cell-long-val", "excel/cell-double-val",
                 "excel/cell-date-val") }

  sheet [wbook s]

  (cond
    (string? s)  (. wbook :getSheet s)
    (long? s)    (. wbook :getSheetAt s)

    :else (throw (. :VncException :new
              (str "Invalid Excel sheet reference type " (type s))))))


(defn
  ^{ :arglists '("(sheet-name sheet)")
     :doc
          """
          Returns a sheet from the Excel reader referenced by its name or
          sheet index.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/sheet-name sheet)))
          """ )
     :see-also '() }

  sheet-name [sheet]

  (. sheet :getName))


(defn
  ^{ :arglists '("(sheet-row-range sheet)")
     :doc
          """
          Returns the first and the last row with data in a sheet as vector.
          Returns -1 values if no row exists.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/sheet-row-range sheet)))
          """ )
     :see-also '("excel/sheet-col-range")}

  sheet-row-range [sheet]

  [(long (. sheet :getFirstRowNum)) (long (. sheet :getLastRowNum))])


(defn
  ^{ :arglists '("(sheet-col-range sheet)")
     :doc
          """
          Returns the first and the last col with data in a sheet row as vector.
          Returns -1 values if the row does notexists or the row does not have \
          any columns.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/sheet-col-range sheet 1)))
          """ )
     :see-also '("excel/sheet-row-range")}

  sheet-col-range [sheet row]

  [(long (. sheet :getFirstCellNum row)) (long (. sheet :getLastCellNum row))])


(defn
  ^{ :arglists '("(cell-empty? sheet row col)")
     :doc
          """
          Returns true if the sheet cell given by row/col is empty.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102] [200 201 202]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              [(excel/cell-empty? sheet 1 1)
               (excel/cell-empty? sheet 2 1)
               (excel/cell-empty? sheet 3 1)]))
          """ )
     :see-also '(
          "excel/cell-type", "excel/cell-string-val",
          "excel/cell-boolean-val", "excel/cell-long-val",
          "excel/cell-double-val", "excel/cell-date-val") }

  cell-empty? [sheet row col]

  (. sheet :isCellEmpty row col))


(defn
  ^{ :arglists '("(cell-type sheet row col)")
     :doc
          """
          Returns the sheet cell type as one of { :notfound, :blank, :string,
          :boolean, :numeric, :formula, :error, or :unknown }
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 "101" 102.0]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              [(excel/cell-type sheet 1 1)
               (excel/cell-type sheet 1 2)
               (excel/cell-type sheet 1 3)
               (excel/cell-type sheet 1 4)]))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-string-val",
          "excel/cell-boolean-val", "excel/cell-long-val",
          "excel/cell-double-val", "excel/cell-date-val") }

  cell-type [sheet row col]

  (case (. sheet :getCellType row col)
    "notfound"  :notfound
    "blank"     :blank
    "string"    :string
    "boolean"   :boolean
    "numeric"   :numeric
    "formula"   :formula
    "error"     :error
    "unknown"   :unknown
    :unknown))


(defn
  ^{ :arglists '("(cell-string-val sheet row col)")
     :doc
          """
          Returns the sheet cell value as string.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 "101" 102.0]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/cell-string-val sheet 1 2)))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-type",
          "excel/cell-boolean-val", "excel/cell-long-val",
          "excel/cell-double-val", "excel/cell-date-val")}

  cell-string-val [sheet row col]

  (. sheet :getString row col))


(defn
  ^{ :arglists '("(cell-boolean-val sheet row col)")
     :doc
          """
          Returns the sheet cell value as boolean.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 true 102]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/cell-boolean-val sheet 1 2)))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-type",
          "excel/cell-string-val", "excel/cell-long-val",
          "excel/cell-double-val", "excel/cell-date-val")}

  cell-boolean-val [sheet row col]

  (. sheet :getBoolean row col))


(defn
  ^{ :arglists '("(cell-long-val sheet row col)")
     :doc
          """
          Returns the sheet cell value as long.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101 102]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/cell-long-val sheet 1 2)))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-type",
          "excel/cell-string-val", "excel/cell-boolean-val",
          "excel/cell-double-val", "excel/cell-date-val")}

  cell-long-val [sheet row col]

  (. sheet :getInteger row col))


(defn
  ^{ :arglists '("(cell-double-val sheet row col)")
     :doc
          """
          Returns the sheet cell value as double.
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)]
                (excel/write-data wbook "Data" [[100 101.23 102]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              (excel/cell-double-val sheet 1 2)))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-type",
          "excel/cell-string-val", "excel/cell-boolean-val",
          "excel/cell-long-val", "excel/cell-date-val") }

  cell-double-val [sheet row col]

  (. sheet :getFloat row col))


(defn
  ^{ :arglists '("(cell-date-val sheet row col)")
     :doc
          """
          Returns the sheet cell value as a date (LocalDateTime).
          """
     :examples '(
          """
          (do
            (load-module :excel)

            (defn test-xls []
              (let [wbook (excel/excel-builder :xlsx)
                    dt    (time/local-date 2021 1 1)
                    ts    (time/local-date-time 2021 1 1 15 30 45)]
                (excel/write-data wbook "Data" [[100 dt ts 102]])
                (excel/write-bytebuf wbook)))

            (let [wbook (excel/open (test-xls))
                  sheet (excel/sheet wbook "Data")]
              [(excel/cell-date-val sheet 1 2)
               (excel/cell-date-val sheet 1 3)]))
          """ )
     :see-also '(
          "excel/cell-empty?", "excel/cell-type",
          "excel/cell-string-val", "excel/cell-boolean-val",
          "excel/cell-long-val", "excel/cell-double-val") }

  cell-date-val [sheet row col]

  (. sheet :getDate row col))
