;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; webDAV utils (requires Sardine library on classpath)

;;;; example
;;;;
;;;; (do
;;;;   (load-module :webdav)
;;;;
;;;;   (webdav/with {}
;;;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;;;           (do
;;;;              (webdav/exists? url)
;;;;              (webdav/get-as-file url "download.doc")
;;;;              (webdav/put-file! url "download.doc" "application/msword")))))
;;;;
;;;; (do
;;;;   (load-module :webdav)
;;;;
;;;;   (webdav/with {:username "jon.doe" :password "123456"}
;;;;      (let [url "http://0.0.0.0:8080/foo/webdav/document.doc" ]
;;;;           (do
;;;;              (webdav/exists? url)
;;;;              (webdav/get-as-file url "download.doc")))))


(ns webdav)

(import :com.github.sardine.DavResource)
(import :com.github.sardine.Sardine)
(import :com.github.sardine.SardineFactory)
(import :com.github.sardine.Version)

(import :java.io.FileOutputStream)


;; ---------------------------------------------------------------------------
;; check WebDav client libs are available
;; ---------------------------------------------------------------------------

(defn webdav/check-required-libs []
  (when-not (exists-class? :com.github.sardine.Sardine)
    (throw (. :VncException :new
              """
              The WebDav client libraries are not on the classpath!

              -------------------------------------------------------------------
              (do
                (load-module :maven)
                (maven/download "com.github.lookfirst:sardine:5.9")
                (maven/download "org.apache.httpcomponents:httpclient:4.5.12")
                (maven/download "org.apache.httpcomponents:httpmime:4.5.12")
                (maven/download "org.apache.httpcomponents:httpcore:4.4.13")
                (maven/download "org.apache.httpcomponents:httpcore-nio:4.4.13"))
                -----------------------------------------------------------------
              """))))

(defmacro
  webdav/with [props & body]
        `(let [{:keys [username password]} ~props]
            (thread-local :sardine (. :SardineFactory :begin username password))
            (try
               (do ~@body)
               (finally
                  (do
                     (. (get (thread-local) :sardine) :shutdown)
                     (dissoc (thread-local) :sardine))))))


(defn webdav/version []
  (. :Version :getSpecification))


(defn webdav/get-as-stream [url]
  (. (get (thread-local) :sardine) :get url))


(defn webdav/get-as-bytes [url]
   (try-with [is (webdav/get-as-stream url)]
             (io/slurp-stream is :binary true)))


(defn webdav/get-as-file [url file]
   (try-with [os (. :FileOutputStream :new file)]
             (io/spit-stream os
                             (webdav/get-as-bytes url)

                             :flush true)))

(defn webdav/exists? [url]
  (. (get (thread-local) :sardine) :exists url))


(defn webdav/put! [url data content-type]
   (. (get (thread-local) :sardine) :put url data content-type))


(defn webdav/put-file! [url file content-type]
   (webdav/put! url (io/slurp file :binary true) content-type))


(defn webdav/list [url depth]
  (. (get (thread-local) :sardine) :list url depth))


(defn webdav/delete! [url]
  (. (get (thread-local) :sardine) :delete url))


(defn webdav/createDirectory! [url]
  (. (get (thread-local) :sardine) :createDirectory url))


(defn webdav/move! [srcUrl dstUrl]
  (. (get (thread-local) :sardine) :move srcUrl dstUrl))


(defn webdav/copy! [srcUrl dstUrl]
  (. (get (thread-local) :sardine) :copy srcUrl dstUrl))


(defn webdav/lock! [url]
  (. (get (thread-local) :sardine) :lock url))


(defn webdav/unlock! [url token]
  (. (get (thread-local) :sardine) :unlock url token))
