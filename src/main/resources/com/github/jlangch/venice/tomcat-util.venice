;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2019 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Tomcat utilities


(ns tc-util)

(load-module :semver)

(def-dynamic tc-archive "http://archive.apache.org/dist/tomcat")
(def-dynamic tc-pid-file "catalina.pid")

(defn- process-running?
  [pid]
  (if (some? pid)
    (->> (sh "ps" :throw-ex true)
         (:out)
         (str/split-lines)
         (map #(first (str/split % " +")))
         (filter #(== % (str pid)))
         (not-empty?))
    false))

(defn- wait-for-process-exit
  [pid timeout]
  (loop [secs timeout]
    (when (and (pos? secs) (process-running? pid))
      (do
        (sleep 1 :seconds)
        (recur (dec secs))))))

(defn get-pid-file
  [tc-home]
  (if (io/exists-file? tc-pid-file)
    tc-pid-file
    (io/file tc-home "bin" tc-pid-file)))

(defn- tc-download-url
  [version]
  (str/format "%s/tomcat-%s/v%s/bin/apache-tomcat-%s.zip"
              tc-archive
              (:major (semver/parse version))
              version
              version))

(defn installed?
  [tc-home]
  (and (some? tc-home) (io/exists-dir? tc-home)))

(defn validate-installed
  [tc-home]
  (when-not (installed? tc-home)
    (throw (venice-exception
              (str "Tomcat is not installed at " tc-home)))))

(defn version
  [tc-home]
  (validate-installed tc-home)
  (-<> (sh "./version.sh" :dir (io/file tc-home "bin") :throw-ex true)
       (:out <>)
       (str/split-lines <>)
       (filter #(str/contains? % "Server number") <>)
       (first <>)
       (str/split <> " +")
       (fourth <>)))

(defn get-pid
  [tc-home]
  (validate-installed tc-home)
  (let [pid-file (get-pid-file tc-home)]
    (when (io/exists-file? pid-file)
      (let [pid (first (str/split-lines (io/slurp pid-file)))]
        (when (process-running? pid)
          pid)))))

(defn running?
  [tc-home]
  (validate-installed tc-home)
  (some? (get-pid tc-home)))

(defn clean-logs
  [tc-home]
  (validate-installed tc-home)
  (let [log-dir (io/file tc-home "logs")]
    (apply io/delete-file (io/list-files log-dir #(io/exists-file? %)))))

(defn clean
  [tc-home]
  (validate-installed tc-home)
  (when (running? tc-home)
    (throw (venice-exception "Tomcat running!")))
  (println "Cleaning Tomcat...")
  (clean-logs tc-home)
  (io/delete-file-tree (io/file tc-home "javamelody"))
  (io/delete-file-tree (io/file tc-home "work")))

(defn war-deployed?
  [tc-home]
  (validate-installed tc-home)
  (let [webapp-dir (io/file tc-home "webapps")]
    (not-empty? (io/list-files webapp-dir #(io/file-ext? % ".war")))))

(defn start
  [tc-home]
  (validate-installed tc-home)
  (when (and (not (running? tc-home)) (war-deployed? tc-home))
    (sh "/bin/sh"
        "-c"
        "./startup.sh &"
        :dir (io/file tc-home "bin")
        :throw-ex true)))

(defn stop
  [tc-home]
  (validate-installed tc-home)
  (let [pid (get-pid tc-home)]
    (when (some? pid)
      (do
        (println "Tomcat shutdown ...")
        (println (:out (sh "/bin/sh"
                           "-c"
                           "./shutdown.sh 2>&1"
                           :dir (io/file tc-home "bin")
                           :throw-ex true)))

        (sleep 1 :seconds)

        (when (process-running? pid)
          (do
            (println "Awaiting Tomcat shutdown ...")
            (wait-for-process-exit pid 20) ; gracefully wait max 20s

            (when (process-running? pid)
              (do
                (println "Tomcat killing ...")
                (sh "kill" "-9" pid :throw-ex true)))))))

    (println "Tomcat shutdown.")))

(defn deploy-war
  [tc-home war]
  (validate-installed tc-home)
  (let [source-war (io/file war)
        war-name   (io/file-name source-war)
        target-war (io/file tc-home "webapps" war-name)]

    (when-not (io/exists-file? source-war)
      (throw (venice-exception
               (str "The WAR " source-war " does not exist!"))))

    (when-not (io/file-ext? source-war ".war")
      (throw (venice-exception (str "Not a WAR file: " source-war))))

    (when (running? tc-home)
      (throw (venice-exception
               "Tomcat is running. Please stop it before deploying!")))

    (clean tc-home)
    (io/delete-file target-war)
    (->> (str/strip-end war-name ".war")
         (io/file tc-home "webapps")
         (io/delete-file-tree))

    (io/copy-file source-war target-war)

    (println "Tomcat deploying webapp done.")))

(defn install
  [install-dir tc-version & options]
  (let [options          (apply hash-map options)
        install-base-dir (io/file install-dir)
        dir-name         (str "apache-tomcat-" tc-version)
        tc-dir           (io/file install-base-dir dir-name)
        tc-dir-bin       (io/file tc-dir "bin")
        tc-dir-webapps   (io/file tc-dir "webapps")]

    (when-not (io/exists-dir? install-base-dir)
      (throw (venice-exception (str
        "The Tomcat install directory " install-base-dir
        " does not exist! Please create it first."))))
    (when (io/exists-dir? tc-dir)
      (throw (venice-exception (str
        "The Tomcat version " tc-version " is already installed!"))))

    (println (str "Downloading Tomcat " tc-version " ..."))
    (let [target (io/file install-base-dir "tc.zip")
          uri (tc-download-url tc-version)]
      (io/delete-file target)
      (io/spit target (io/download uri :binary true))
      (println "Downloading ok.")

      (println "Unpacking Tomcat archive ...")
      (io/unzip-to-dir target install-base-dir)

      (when (:remove-unix-files options false)
        (apply io/delete-file (io/list-files tc-dir-bin #(io/file-ext? % ".sh"))))

      (when (:remove-windows-files options false)
        (apply io/delete-file (io/list-files tc-dir-bin #(io/file-ext? % ".bat"))))

      (when (:remove-system-webapps options false)
        (apply io/delete-file-tree (io/list-files tc-dir-webapps)))

      (->> (io/list-files tc-dir-bin #(io/file-ext? % ".sh"))
           (docoll #(sh "chmod" "a+x" (io/file-path %) :throw-ex true)))

      (println "Cleanup ...")
      (io/delete-file target)
      (println (str "Tomcat " tc-version " has been installed successfully."))
    )))

(defn uninstall
  [tc-home]
  (validate-installed tc-home)
  (when (running? tc-home)
    (throw (venice-exception
             "Tomcat is running. Please stop it before uninstalling!")))
  (io/delete-file-tree tc-home))
