;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2019 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Tomcat utilities

;;;; The Tomcat utilities currently do not support Windows. As a starting
;;;; point for the commands:
;;;;   ps          (sh "tasklist")
;;;;   kill        (sh "cmd" "/C" "taskkill /PID <1234>")
;;;;   exec        (sh "cmd" "/C" <command>")
;;;;   exec nohup  (sh "cmd" "/C" "start /D <workingDir> /MIN <command>")


(ns tc-util)

(load-module :semver)

(def-dynamic tc-archive "http://archive.apache.org/dist/tomcat")
(def-dynamic tc-pid-file "catalina.pid")


(defn
  ^{ :arglists '("(require-mac-or-linux)")
     :doc "Validates if the OS is Mac OSX or Linux, throws an exception if not."
     :examples '("(require-mac-or-linux)") }

  require-mac-or-linux []

  (when-not (or (os-type? :mac-osx) (os-type? :linux))
    (throw (venice-exception "Can only run on Mac OSX or Linux!"))))


(defn-
  ^{ :arglists '("(process-running? pid)")
     :doc "Returns true if the pid represents a running process, false otherwise."
     :examples '("(process-running? 123)"
                 "(process-running? \"123\")") }

  process-running? [pid]

  (require-mac-or-linux)
  (if (some? pid)
    (->> (sh "ps" :throw-ex true)
         (:out)
         (str/split-lines)
         (map #(first (str/split (str/trim %) " +")))
         (filter #(== % (str pid)))
         (not-empty?))
    false))


(defn-
  ^{ :arglists '("(wait-for-process-exit pid timeout)")
     :doc "Waits until the process with the pid exits. Waits max timeout seconds."
     :examples '("(wait-for-process-exit 12345 20)"
                 "(wait-for-process-exit \"12345\" 20)") }

  wait-for-process-exit [pid timeout]

  (require-mac-or-linux)
  (loop [secs timeout]
    (when (and (pos? secs) (process-running? pid))
      (sleep 1 :seconds)
      (recur (dec secs))))
  (if (process-running? pid) pid nil))


(defn
  ^{ :arglists '("(get-pid-file tc-home)")
     :doc """
          Returns the pid file for the Tomcat instance. Uses the pid file defined by
          the dynamic var 'tc-pid-file'. Defaults to 'TC_HOME/bin/catalina.pid'
          """
     :examples '(
          "(get-pid-file \"/Users/tools/apache-tomcat-9.0.26\")") }

  get-pid-file [tc-home]

  (if (io/exists-file? tc-pid-file)
    tc-pid-file
    (io/file tc-home "bin" tc-pid-file)))


(defn-
  ^{ :arglists '("(tc-download-url version)")
     :doc "Returns the download URL for a Tomcat version"
     :examples '("(tc-download-url \"9.0.26\")") }

  tc-download-url [version]

  (str/format "%s/tomcat-%s/v%s/bin/apache-tomcat-%s.zip"
              tc-archive
              (:major (semver/parse version))
              version
              version))


(defn
  ^{ :arglists '("(list-tomcat9-archive)")
     :doc "Lists the available Tomcat 9 packages from the Tomcat archive"
     :examples '("(list-tomcat9-archive)") }

  list-tomcat9-archive []

  (->> (io/uri-stream "https://archive.apache.org/dist/tomcat/tomcat-9/")
       (io/slurp-stream)
       (regex/matcher "\"v[0-9]+[.][0-9]+[.][0-9]+/\"")
       (regex/find-all)
       (map #(str/strip-start % "\"v"))
       (map #(str/strip-end % "/\""))
       (sort #(semver/cmp %1 %2))
       (reverse)))


(defn
  ^{ :arglists '("(installed? tc-home)")
     :doc "Returns true if there is a Tomcat installation at the given path."
     :examples '("(installed? \"/Users/tools/apache-tomcat-9.0.26\")") }

  installed? [tc-home]

  (and (some? tc-home)
       (io/exists-dir? tc-home)
       (or (io/exists-file? (io/file tc-home "catalina.sh"))
           (io/exists-file? (io/file tc-home "catalina.bat")))))


(defn
  ^{ :arglists '("(validate-installed tc-home)")
     :doc "Throws an exception if there is not a Tomcat installation at the given path."
     :examples '("(validate-installed \"/Users/tools/apache-tomcat-9.0.26\")") }

  validate-installed [tc-home]

  (when-not (installed? tc-home)
    (throw (venice-exception
              (str "Tomcat is not installed at " tc-home)))))


(defn
  ^{ :arglists '("(version tc-home)")
     :doc """
          Returns the Tomcat version for the Tomcat installation at the given path.
          Throws an exception if there is not a Tomcat installation at the path.
          """
     :examples '(
          "(version \"/Users/tools/apache-tomcat-9.0.26\")") }

  version [tc-home]

  (require-mac-or-linux)
  (validate-installed tc-home)
  (-<> (sh "/bin/sh"
           "-c"
           "./version.sh"
           :dir (io/file tc-home "bin")
           :throw-ex true)
       (:out <>)
       (str/split-lines <>)
       (filter #(str/contains? % "Server number") <>)
       (first <>)
       (str/split <> " +")
       (third <>)))


(defn
  ^{ :arglists '("(get-pid tc-home)")
     :doc """
          Returns the pid of a running Tomcat process for the Tomcat installation at the
          given path. Returns nil if Tomcat is not running.
          """
     :examples '(
          "(get-pid \"/Users/tools/apache-tomcat-9.0.26\")") }

  get-pid [tc-home]

  (validate-installed tc-home)
  (let [pid-file (get-pid-file tc-home)]
    (when (io/exists-file? pid-file)
      (let [pid (first (str/split-lines (io/slurp pid-file)))]
        (when (process-running? pid)
          pid)))))


(defn
  ^{ :arglists '("(running? tc-home)")
     :doc "Returns true if the Tomcat process is running for the Tomcat installation."
     :examples '("(running? \"/Users/tools/apache-tomcat-9.0.26\")") }

  running? [tc-home]

  (validate-installed tc-home)
  (some? (get-pid tc-home)))


(defn
  ^{ :arglists '("(clean-logs tc-home)")
     :doc "Removes all log files from the Tomcat installation."
     :examples '("(clean-logs \"/Users/tools/apache-tomcat-9.0.26\")") }

  clean-logs [tc-home]

  (validate-installed tc-home)
  (let [log-dir (io/file tc-home "logs")]
    (apply io/delete-file (io/list-files log-dir #(io/exists-file? %)))))


(defn
  ^{ :arglists '("(clean tc-home)")
     :doc """
          Cleans a non running Tomcat installation. Removes the log files, the
          work directory and the javamelody directory if they exist.
          """
     :examples '(
          "(clean \"/Users/tools/apache-tomcat-9.0.26\")") }

  clean [tc-home]

  (validate-installed tc-home)
  (when (running? tc-home)
    (throw (venice-exception "Tomcat running!")))
  (println "Cleaning Tomcat...")
  (clean-logs tc-home)
  (io/delete-file-tree (io/file tc-home "javamelody"))
  (io/delete-file-tree (io/file tc-home "work")))


(defn
  ^{ :arglists '("(war-deployed? tc-home)")
     :doc "Returns true if at least one WAR file is deployed for the Tomcat installation."
     :examples '("(war-deployed? \"/Users/tools/apache-tomcat-9.0.26\")") }

  war-deployed? [tc-home]

  (validate-installed tc-home)
  (let [webapp-dir (io/file tc-home "webapps")]
    (not-empty? (io/list-files webapp-dir #(io/file-ext? % ".war")))))


(defn
  ^{ :arglists '("(start tc-home)")
     :doc "Starts Tomcat for the given Tomcat installation if its not yet running."
     :examples '("(start \"/Users/tools/apache-tomcat-9.0.26\")") }

  start [tc-home]

  (require-mac-or-linux)
  (validate-installed tc-home)
  (when (and (not (running? tc-home)) (war-deployed? tc-home))
    (sh "/bin/sh"
        "-c"
        "./startup.sh &"
        :dir (io/file tc-home "bin")
        :throw-ex true)))


(defn
  ^{ :arglists '("(stop tc-home)")
     :doc """
          Stops Tomcat for the given Tomcat installation if its running. If a the Tomcat
          process is still running after timeout seconds after the shutdown has been
          requested the process is killed. The timeout defaults to 20s. If timeout is 0
          it waits as long the process is running. If the timeout is -1 it returns
          immediately after the shutdown has been requested.
          """
     :examples '(
          "(stop \"/Users/tools/apache-tomcat-9.0.26\")",
          "(stop \"/Users/tools/apache-tomcat-9.0.26\" 60)") }

  (stop [tc-home]
    (stop tc-home 20))

  (stop [tc-home timeout]
    (require-mac-or-linux)
    (validate-installed tc-home)
    (let [pid (get-pid tc-home)]
      (when (some? pid)
        (println "Tomcat shutdown ...")
        (println (:out (sh "/bin/sh"
                           "-c"
                           "./shutdown.sh 2>&1"
                           :dir (io/file tc-home "bin")
                           :throw-ex true)))

        (sleep 1 :seconds)

        (when (process-running? pid)
          (when (pos? timeout)
            (println "Awaiting Tomcat shutdown ...")
            (wait-for-process-exit pid timeout) ; gracefully wait

            (when (process-running? pid)
              (println "Timeout: Killing Tomcat...")
              (sh "kill" "-9" pid :throw-ex true)
              (sleep 1 :seconds)))

          (when (neg? timeout)
            (loop []
              (when (process-running? pid)
                (sleep 1 :seconds)
                (recur )))))

        (when-not (process-running? pid)
           (println "Tomcat shutdown."))))))


(defn
  ^{ :arglists '("(deploy-war tc-home war)")
     :doc """
          Deploys a WAR file to a Tomcat installation. Throws an exception if the
          WAR does not exist or Tomcat is running.
          """
     :examples '(
          "(deploy-war \"/Users/tools/apache-tomcat-9.0.26\" \"/Users/tools/x.war\")") }

  deploy-war [tc-home war]

  (validate-installed tc-home)
  (let [source-war (io/file war)
        war-name   (io/file-name source-war)
        target-war (io/file tc-home "webapps" war-name)]

    (when-not (io/exists-file? source-war)
      (throw (venice-exception
               (str "The WAR " source-war " does not exist!"))))

    (when-not (io/file-ext? source-war ".war")
      (throw (venice-exception (str "Not a WAR file: " source-war))))

    (when (running? tc-home)
      (throw (venice-exception
               "Tomcat is running. Please stop it before deploying!")))

    (clean tc-home)
    (io/delete-file target-war)
    (->> (str/strip-end war-name ".war")
         (io/file tc-home "webapps")
         (io/delete-file-tree))

    (io/copy-file source-war target-war)

    (println "Tomcat deploying webapp done.")))


(defn
  ^{ :arglists '("(install install-dir tc-version & options)")
     :doc """
          Installs Tomcat to {install-dir}/{tc-version}.
          Options:
            :remove-unix-files true/false
                Removes the Unix scripts. Defaults to false.
            :remove-windows-files true/false
                Removes the Windows scripts. Defaults to false.
            :remove-system-webapps true/false
                Removes the system web apps. Defaults to false.
          """
     :examples '(
          "(install \"/Users/tools\" \"9.0.26\" :remove-system-webapps true)") }

  install [install-dir tc-version & options]

  (let [options          (apply hash-map options)
        install-base-dir (io/file install-dir)
        dir-name         (str "apache-tomcat-" tc-version)
        tc-dir           (io/file install-base-dir dir-name)
        tc-dir-bin       (io/file tc-dir "bin")
        tc-dir-webapps   (io/file tc-dir "webapps")]

    (when-not (io/exists-dir? install-base-dir)
      (throw (venice-exception (str
        "The Tomcat install directory " install-base-dir
        " does not exist! Please create it first."))))
    (when (io/exists-dir? tc-dir)
      (throw (venice-exception (str
        "The Tomcat version " tc-version " is already installed!"))))

    (println (str "Downloading Tomcat " tc-version " ..."))
    (let [target (io/file install-base-dir "tc.zip")
          uri (tc-download-url tc-version)]
      (io/delete-file target)
      (io/spit target (io/download uri :binary true))
      (println "Downloading ok.")

      (println "Unpacking Tomcat archive ...")
      (io/unzip-to-dir target install-base-dir)

      (when (:remove-unix-files options false)
        (apply io/delete-file (io/list-files tc-dir-bin #(io/file-ext? % ".sh"))))

      (when (:remove-windows-files options false)
        (apply io/delete-file (io/list-files tc-dir-bin #(io/file-ext? % ".bat"))))

      (when (:remove-system-webapps options false)
        (apply io/delete-file-tree (io/list-files tc-dir-webapps)))

      (->> (io/list-files tc-dir-bin #(io/file-ext? % ".sh"))
           (docoll #(sh "chmod" "a+x" (io/file-path %) :throw-ex true)))

      (println "Cleanup ...")
      (io/delete-file target)
      (println (str "Tomcat " tc-version " has been installed successfully."))
    )))


(defn
  ^{ :arglists '("(uninstall tc-home)")
     :doc "Removes a Tomcat installation."
     :examples '(
          "(uninstall \"/Users/tools/apache-tomcat-9.0.26\")") }

  uninstall [tc-home]

  (validate-installed tc-home)
  (when (running? tc-home)
    (throw (venice-exception
             "Tomcat is running. Please stop it before uninstalling!")))
  (io/delete-file-tree tc-home))
