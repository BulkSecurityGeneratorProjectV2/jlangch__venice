;;; EBNF
;;;
;;; Integer             ::=  "0" | ( "1" .. "9" ) [ Digit ]*
;;; Float               ::=  ( [ Digit ]+ "." [ Digit ]* | "." [ Digit ]+ )

;;; Literal             ::=  Integer | Float

;;; Main                ::=  Expression EOI
;;; Expression          ::=  AddExpression
;;; AddExpression       ::=  MulExpression [ ( "+" | "-" ) MulExpression ]*
;;; MulExpression       ::=  UnaryExpression [ ( "*" | "/" ) UnaryExpression ]*
;;; UnaryExpression     ::=  ( "+" | "-" ) UnaryExpression | Literal

;(ns expression)


(load-module :parsatron)
(ns-alias 'p 'parsatron)

(p/defparser ws [] (p/many (p/char #\space)))

(p/defparser digit-1to9 [] (p/choice (p/char #\1) (p/char #\2) (p/char #\3)
                                     (p/char #\4) (p/char #\5) (p/char #\6)
                                     (p/char #\7) (p/char #\8) (p/char #\9)))

(p/defparser integer [] (p/attempt (p/either (p/let->> [_ (p/char #\0)]
                                                (p/always '(#\0)))
                                             (p/let->> [f (digit-1to9)
                                                        r (p/many (p/digit))]
                                                (p/always (list* f r))))))

(p/defparser float [] (p/attempt (p/let->> [i  (integer)
                                            _  (p/char #\.)
                                            f  (p/many1 (p/digit))]
                                    (p/always (flatten (list* i #\. f))))))

(p/defparser literal [] (p/either (float) (integer)))

(p/defparser add-op [] (p/char #\+))
(p/defparser sub-op [] (p/char #\-))
(p/defparser mul-op [] (p/char #\*))
(p/defparser div-op [] (p/char #\\))


(p/defparser main [] (p/>> (ws) (expr) (ws) (p/eof)))

(p/defparser expr [] (add-expr))

(p/defparser add-expr [] (p/>> (mul-expr)
                               (p/many (p/>> (ws)
                                             (p/either (add-op) (sub-op))
                                             (ws)
                                             (mul-expr)))))

(p/defparser mul-expr [] (p/>> (unary-expr)
                               (p/many (p/>> (ws)
                                             (p/either (mul-op) (div-op))
                                             (ws)
                                             (unary-expr)))))

(p/defparser unary-expr [] (p/either (p/>> (p/either (add-op) (sub-op))
                                           (unary-expr))
                                     (literal)))

;; (p/run (main) "123")
;; (p/run (main) "123+2")
