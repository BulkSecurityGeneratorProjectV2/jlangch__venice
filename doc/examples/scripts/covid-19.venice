;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Creates a Covid-19 chart representing Switzerland compared to some other
;;;; countries


(do
  (load-module :xchart)

  (def country-config [
      { :name "Switzerland"  :iso "CHE"  :style { :color :x-green      }}
      { :name "Romania"      :iso "ROU"  :style { :color :x-blue       }}
      { :name "Austria"      :iso "AUT"  :style { :color :x-purple     }}
      { :name "Hungary"      :iso "HUN"  :style { :color :x-orange     }}
      { :name "Germany"      :iso "DEU"  :style { :color :x-red        }}
      { :name "Italy"        :iso "ITA"  :style { :color :x-pink       }}
      { :name "France"       :iso "FRA"  :style { :color :x-light-blue }}
      { :name "Sweden"       :iso "SWE"  :style { :color :x-dark-gray  }}
      { :name "Greece"       :iso "GRC"  :style { :color :x-dark-pink  }}
      { :name "Spain"        :iso "ESP"  :style { :color :x-dark-green }}
      { :name "UK"           :iso "GBR"  :style { :color :x-yellow     }} ])

  ;; the interval length in days to calculate the moving average
  (def sample-days 7)

  ;; the start/end date for the cases
  (def start-date (time/local-date 2021 1 1))
  (def end-date nil)

  ;; chart rendering
  (def chart-width 600)
  (def chart-height 500)
  (def chart-dpi 240)

  ;; origin of the corona case data
  (def worldometers-url "https://www.worldometers.info/coronavirus/country/")

  ;; country population REST URL
  (def rest-population-url "https://restcountries.eu/rest/v2/alpha/")


  ;;; I/O functions ------------------------------------------------------------

  (defn view-chart [file] (sh/open file))

  (defn save-chart [chart file dpi]
    (xchart/write-to-file chart :png dpi file))

  (defn load-country-html-data [country-name]
    (let [url (str worldometers-url (str/lower-case country-name) "/")]
      (println "Loading cases for" country-name "...")
      (io/download url :user-agent "Mozilla")))

  (defn load-country-population [country-iso]
    (let [url (str rest-population-url country-iso)]
      (println "Loading population for" country-iso "...")
      (-<> (io/download url :user-agent "Mozilla")
           (json/read-str <>)
           (get <> "population")
           (long <>))))

  (defn add-country-html-data [country-data]
    (assoc country-data :html (load-country-html-data (:name country-data))))

  (defn add-country-population [country-data]
    (let [p (load-country-population (:iso country-data))]
      (-> country-data
          (assoc :population p)
          (assoc :population-normalized (/ p 100_000.0)))))


  ;;; Processing ---------------------------------------------------------------

  (defn color
    ([r g b]   (. :java.awt.Color :new r g b))
    ([r g b a] (. :java.awt.Color :new r g b a)))

  (defn extract-html-daily-cases-section [html]
    ;; extract the daily cases section from HTML page (javascript)
    (->> (str/split-lines html)
         (drop-while #(not (str/contains? % "'graph-cases-daily'" )))
         (take-while #(not (str/contains? % "});" )))
         (rest)
         (butlast)))

  (defn parse-daily-cases-dates [html]
    ;;  """categories: ["Feb 15, 2020","Feb 16, 2020",...,"Aug 29, 2020"]   },"""
    (as-> html <>
          (filter #(str/contains? % "categories: [") <>)
          (first <>)
          (regex/find-all (regex/matcher """["][A-Za-z0-9, ]+["]""" <>))
          (map str/double-unquote <>)
          (map #(time/local-date-parse % "MMM dd, yyyy" :ENGLISH) <>)))

  (defn parse-daily-cases-numbers [html]
    ;; """data: [null,0,0,0,0,0,1,3,4,...,215,186,143,121]   },"""
    (as-> html <>
          (filter #(str/contains? % "data: [") <>)
          (first <>)
          (str/replace-all <> "null" "0")
          (regex/find-all (regex/matcher "\\d+" <>))
          (map long <>)))

  (defn parse-country-cases [html]
    (let [section (extract-html-daily-cases-section html)]
      (map vector (parse-daily-cases-dates section)
                  (parse-daily-cases-numbers section))))

  (defn add-country-cases [country-data]
    (-> country-data
        (assoc :cases (parse-country-cases (:html country-data)))
        (dissoc :html)))

  (defn filter-country-cases-by-date [start end country-data]
    (let [in-period? #(time/within? (first %) start end)]
      (assoc country-data :cases (filter in-period? (:cases country-data)))))

  (defn aggregate-cases [normalized-population cases]
    (loop [d (reverse cases), tuples []]
      (if (>= (count d) sample-days)
        (let [window (take sample-days d)
              day    (first window)
              date   (first day)
              tot    (reduce + (map second window))
              avg    (long (/ tot normalized-population))]
          (recur (rest d) (conj tuples [ date avg ])))
        (reverse tuples))))

  (defn aggregate-country-cases [country-data]
    (->> (:cases country-data)
         (aggregate-cases (:population-normalized country-data))
         (assoc country-data :cases)))

  (defn aggregate-country-data [country-data start end]
    (->> country-data
         (add-country-population)
         (add-country-html-data)
         (add-country-cases)
         (aggregate-country-cases)
         (filter-country-cases-by-date start end)))

  ;;; Chart --------------------------------------------------------------------

  (defn chart-series-country [country-data]
    (let [cases  (:cases country-data)
          style  (:style country-data)]
      { :x     (map (comp time/date first) cases)
        :y     (map second cases)
        :style { :marker-type :none
                 :line-color  (:color style)
                 :line-style  (:stroke style :solid) }}))

  (defn chart-series-all-countries [countries-data]
    (reduce #(assoc %1 (:name %2) (chart-series-country %2))
            (ordered-map)
            countries-data))

  (defn render-chart [countries-data width height sample-days]
    (xchart/xy-chart
       (chart-series-all-countries countries-data)
       { :title        "Covid-19 Incidence (~(str (time/local-date)))"
         :width        width
         :height       height
         :x-axis       { :title "", :date-pattern "MMM-dd" }
         :y-axis       { :title "Cases over ~{sample-days} Days per 100'000" }
         :theme        :matlab
         :legend       { :border-color :white }
         :render-style :line } ))

  ;;; Main ---------------------------------------------------------------------

  (defn main []
    ;; scrape up the Covid-19 data from HTML, create a chart, and view the chart
    (let [chart-file "covid-19.png"]
      (-<> country-config
           (map #(aggregate-country-data % start-date end-date) <>)
           (render-chart <> chart-width chart-height sample-days)
           (save-chart <> chart-file chart-dpi))
      (view-chart chart-file)
      nil))

  (main))
