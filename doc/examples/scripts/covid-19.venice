;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Creates a Covid-19 chart representing Switzerlands rules for a 14 days
;;;; quarantine.
;;;;
;;;; Switzerland requires people entering from a country having more than
;;;; 60 Covid-19 cases per 100'000 people for the last 14 days to stay in
;;;; a 10 days quarantine.


(do
  (load-module :xchart)
  (load-module :shell)

  ;; https://www.worldometers.info/population/europe/
  (def country-config
    (ordered-map
      "Switzerland" { :population  8725700  :color :x-green      :stroke :solid     }
      "Romania"     { :population 19372000  :color :x-blue       :stroke :solid     }
      "Austria"     { :population  8955100  :color :x-purple     :stroke :solid     }
      "Hungary"     { :population  9684600  :color :x-orange     :stroke :solid     }
      "Germany"     { :population 83517000  :color :x-red        :stroke :solid     }
      "Italy"       { :population 60550000  :color :x-pink       :stroke :solid     }
      "France"      { :population 65129800  :color :x-light-blue :stroke :solid     }
      "Sweden"      { :population 10036300  :color :x-dark-gray  :stroke :solid     }
      "Greece"      { :population 10473400  :color :x-purple     :stroke :dash-dash }
      "Spain"       { :population 46736700  :color :x-red        :stroke :dash-dash }
      "Quarantine"  { :population        0  :color :x-light-gray :stroke :solid     } ))

  ;; definitions for case data statistics
  (def sample-days 7)
  (def quarantine-case-limit 60)
  (def quarantine-case-diff 60)
  (def quarantine-show false)
  (def population-norm 100_000)

  ;; the start/end date for the cases
  (def start-date (time/local-date 2020 10 1))
  (def end-date nil)

  ;; chart rendering
  (def chart-width 600)
  (def chart-height 500)
  (def chart-dpi 240)

  ;; origin of the corona case data
  (def worldometers-url "https://www.worldometers.info/coronavirus/country/")


  ;;; I/O functions ------------------------------------------------------------

  (defn view [file] (shell/open file))

  (defn save-chart [chart file dpi]
    (xchart/write-to-file chart :png dpi file))

  (defn load-country-html-data [country]
    (println "Loading cases for" country "...")
    (io/download (str worldometers-url (str/lower-case country) "/")
                 :user-agent "Mozilla"))

  (defn load-countries-html-data [countries]
    ; returns a list of tuples [country html]
    (map #(vector % (load-country-html-data %)) countries))


  ;;; Processing ---------------------------------------------------------------

  (defn color
    ([r g b]   (. :java.awt.Color :new r g b))
    ([r g b a] (. :java.awt.Color :new r g b a)))

  (defn normalize-population [p]
    (/ p (double population-norm)))

  (defn extract-html-cases-section [html]
    ;; extract the daily cases section from HTML page (javascript)
    (->> (str/split-lines html)
         (drop-while #(not (str/contains? % "'graph-cases-daily'" )))
         (take-while #(not (str/contains? % "});" )))
         (rest)
         (butlast)))

  (defn parse-date [date]
    ;; convert "Feb 02 to "2020 Feb 02" and parse it
    (time/local-date-parse (str "2020 " date) "yyyy MMM dd" :ENGLISH))

  (defn extract-days [data]
    ;;  categories: ["Feb 15","Feb 16",...,"Aug 28","Aug 29"]        },
    (as-> data <>
          (filter #(str/contains? % "categories: [") <>)
          (first <>)
          (regex/find-all (regex/matcher """["][A-Za-z0-9 ]+["]""" <>))
          (map str/double-unquote <>)
          (map parse-date <>)))

  (defn extract-cases [data]
    ;; data: [null,0,0,0,0,0,1,3,4,...,215,186,143,121],
    (as-> data <>
          (filter #(str/contains? % "data: [") <>)
          (first <>)
          (str/replace-all <> "null" "0")
          (regex/find-all (regex/matcher "\\d+" <>))
          (map long <>)))

  (defn parse-cases [country html-cases-section]
    (->> (map vector (extract-days html-cases-section)
                     (extract-cases html-cases-section))
         (filter #(time/within? (first %) start-date end-date))))

  (defn process-sample [country population data]
    (let [line       (first data)
          date       (first line)
          cases      (second line)
          tot        (reduce + (map second data))
          avg-day    (/ tot (count data))
          avg-norm   (/ tot (normalize-population population))]
      [ date cases tot avg-day avg-norm ]))

  (defn process [country population data]
    (loop [d data, tuples []]
      (if (>= (count d) sample-days)
        (recur (rest d)
               (conj tuples (process-sample country
                                            population
                                            (take sample-days d))))
        tuples)))

  (defn compute-country [country population html]
    (->> (extract-html-cases-section html)
         (parse-cases country)
         (reverse)
         (process country population)
         (reverse)
         (map #(vector (time/date (first %)) (nth % 4)))))

  (defn compute-countries [country-html-data populations country-names]
    (->> (map (fn [[country html]]
                (let [population (get populations country)]
                  (compute-country country population html)))
              country-html-data)
         (interleave country-names)
         (apply ordered-map)))

  (defn add-quarantine [country-data]
    (let [sample (get country-data "Switzerland")]
      (assoc country-data
             "Quarantine"
             (map (fn [x] [(first x) (+ (second x) quarantine-case-diff)])
                  sample))))

(defn add-quarantine-old [country-data]
  (let [sample     (get country-data "Switzerland")
        first-day  (first (first sample))
        last-day   (first (last sample))]
    (assoc country-data
           "Quarantine"
             [ [ first-day quarantine-case-limit ]
               [ last-day  quarantine-case-limit ] ])))

  (defn series [country-data country-config country]
    (let [data   (get country-data country)
          style  (get country-config country)]
      { :x     (map first data)
        :y     (map second data)
        :style { :marker-type :none
                 :line-color  (:color style)
                 :line-style  (:stroke style) }}))

  (defn calc-country-series [country-data country-config]
    (let [country-series (partial series country-data country-config)]
      (ordered-map "Switzerland" (country-series "Switzerland")
                   "Romania"     (country-series "Romania")
                   "Austria"     (country-series "Austria")
                   "Hungary"     (country-series "Hungary")
                   "Germany"     (country-series "Germany")
                   "Italy"       (country-series "Italy")
                   "France"      (country-series "France")
                   "Sweden"      (country-series "Sweden")
                   "Spain"       (country-series "Spain")
                   "Greece"      (country-series "Greece")
                   "Quarantine"  (country-series "Quarantine"))))

  (defn remove-quarantine-series [series]
    (dissoc series (if quarantine-show nil "Quarantine")))

  (defn render-chart [country-data country-config]
    (xchart/xy-chart
       (-> (calc-country-series country-data country-config)
           (remove-quarantine-series))
       { :title        "Covid-19 (~(str (time/local-date)))"
         :width        chart-width
         :height       chart-height
         :x-axis       { :title "Date", :date-pattern "MMM-dd" }
         :y-axis       { :title "Cases ~{sample-days} days per 100'000" }
         :theme        :xchart
         :render-style :line } )))

  (defn create-chart [country-html-data country-names]
    (let [country-populations (map-vals :population country-config)]
      (-> (compute-countries country-html-data
                             country-populations
                             country-names)
          (add-quarantine)
          (render-chart country-config))))

  (defn main []
    ;; scrape up the Covid-19 data from HTML, create a chart, and view the chart
    (let [chart-file    "covid-19.png"
          country-names (remove #{"Quarantine"} (keys country-config))]
      (-> (load-countries-html-data country-names)
          (create-chart country-names)
          (save-chart chart-file chart-dpi))
      (view chart-file)
      nil))

  (main))
