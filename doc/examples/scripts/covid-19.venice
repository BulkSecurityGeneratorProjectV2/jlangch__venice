;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Creates a Covid-19 chart representing Switzerlands rules for a 14 days
;;;; quarantine.
;;;;
;;;; Switzerland requires people entering from a country having more than
;;;; 60 Covid-19 cases per 100'000 people for the last 14 days to stay in
;;;; a 10 days quarantine.


(do
  (load-module :xchart)

  ;; https://www.worldometers.info/population/europe/
  (def country-config
    (ordered-map
      "Switzerland"  { :name "Switzerland"  :iso "CHE"  :color :x-green      }
      "Romania"      { :name "Romania"      :iso "ROU"  :color :x-blue       }
      "Austria"      { :name "Austria"      :iso "AUT"  :color :x-purple     }
      "Hungary"      { :name "Hungary"      :iso "HUN"  :color :x-orange     }
      "Germany"      { :name "Germany"      :iso "DEU"  :color :x-red        }
      "Italy"        { :name "Italy"        :iso "ITA"  :color :x-pink       }
      "France"       { :name "France"       :iso "FRA"  :color :x-light-blue }
      "Sweden"       { :name "Sweden"       :iso "SWE"  :color :x-dark-gray  }
      "Greece"       { :name "Greece"       :iso "GRC"  :color :x-dark-pink  }
      "Spain"        { :name "Spain"        :iso "ESP"  :color :x-dark-green }
      "UK"           { :name "UK"           :iso "GBR"  :color :x-yellow     } ))

  ;; definitions for case data statistics
  (def sample-days 7)
  (def population-norm 100_000)

  ;; the start/end date for the cases
  (def start-date (time/local-date 2021 1 1))
  (def end-date nil)

  ;; chart rendering
  (def chart-width 600)
  (def chart-height 500)
  (def chart-dpi 240)

  ;; origin of the corona case data
  (def worldometers-url "https://www.worldometers.info/coronavirus/country/")

  ;; country population REST URL
  (def rest-population-url "https://restcountries.eu/rest/v2/alpha/")


  ;;; I/O functions ------------------------------------------------------------

  (defn view [file] (sh/open file))

  (defn save-chart [chart file dpi]
    (xchart/write-to-file chart :png dpi file))

  (defn worldometers-country-url [country]
    (str worldometers-url (str/lower-case country) "/"))

  (defn load-country-html-data [country]
    (println "Loading cases for" country "...")
    (io/download (worldometers-country-url country) :user-agent "Mozilla"))

  (defn load-countries-html-data [countries]
    ; returns a list of tuples [country html]
    (map #(vector % (load-country-html-data %)) countries))

  (defn rest-country-population-url [country-iso]
    (str rest-population-url country-iso))

  (defn load-population [country-name country-iso]
    (println "Loading population for" country-name "...")
    (-<> (rest-country-population-url country-iso)
         (io/download <> :user-agent "Mozilla")
         (json/read-str <>)
         (get <> "population")
         (long <>)))

  (defn add-population [country-config]
    (-<> (vals country-config)
         (map #(assoc % :population (load-population (:name %) (:iso %))) <>)
         (reduce #(assoc %1 (:name %2) %2) (ordered-map) <>)))


  ;;; Processing ---------------------------------------------------------------

  (defn color
    ([r g b]   (. :java.awt.Color :new r g b))
    ([r g b a] (. :java.awt.Color :new r g b a)))

  (defn normalize-population [p]
    (/ p (double population-norm)))

  (defn parse-date [date]
    ;; convert "Feb 2, 2020" to "2020 Feb 02" and parse it
    (time/local-date-parse date "MMM dd, yyyy" :ENGLISH))

  (defn parse-days [days]
    ;; ("Feb 15, 2020","Feb 16, 2020",...,"Aug 29, 2020")
    (map parse-date days))

  (defn parse-daily-cases [cases]
    ;; ("0","0",...,"215","186","143","1212)
    (map long cases))

  (defn extract-html-daily-cases-section [html]
    ;; extract the daily cases section from HTML page (javascript)
    (->> (str/split-lines html)
         (drop-while #(not (str/contains? % "'graph-cases-daily'" )))
         (take-while #(not (str/contains? % "});" )))
         (rest)
         (butlast)))

  (defn extract-days [data]
    ;;  """categories: ["Feb 15, 2020","Feb 16, 2020",...,"Aug 29, 2020"]   },"""
    (as-> data <>
          (filter #(str/contains? % "categories: [") <>)
          (first <>)
          (regex/find-all (regex/matcher """["][A-Za-z0-9, ]+["]""" <>))
          (map str/double-unquote <>)))

  (defn extract-daily-cases [data]
    ;; """data: [null,0,0,0,0,0,1,3,4,...,215,186,143,121]   },"""
    (as-> data <>
          (filter #(str/contains? % "data: [") <>)
          (first <>)
          (str/replace-all <> "null" "0")
          (regex/find-all (regex/matcher "\\d+" <>))))

  (defn parse-cases [html-cases-section]
    ;; returns a vector of tuples with the date and the cases
    ;; E.g.: [... [2020-02-01, 560] [2020-02-02, 594] [2020-02-03, 560]]
    (map vector (parse-days (extract-days html-cases-section))
                (parse-daily-cases (extract-daily-cases html-cases-section))))

  (defn aggregate-case-sample [country population data]
    (let [line       (first data)
          date       (first line)
          cases      (second line)
          tot        (reduce + (map second data))
          avg-day    (/ tot (count data))
          avg-norm   (/ tot (normalize-population population))]
      [ date cases tot avg-day avg-norm ]))

  (defn aggregate-cases [country population data]
    (loop [d data, tuples []]
      (if (>= (count d) sample-days)
        (recur (rest d)
               (conj tuples (aggregate-case-sample country
                                                   population
                                                  (take sample-days d))))
        tuples)))

  (defn aggregate-by-country [country population html]
    (->> (extract-html-daily-cases-section html)
         (parse-cases)
         (filter #(time/within? (first %) start-date end-date))
         (reverse)
         (aggregate-cases country population)
         (reverse)
         (map #(vector (time/date (first %)) (nth % 4)))))

  (defn compute-countries-data [country-html-data populations country-names]
    (->> (map (fn [[country html]]
                (let [population (get populations country)]
                  (aggregate-by-country country population html)))
              country-html-data)
         (interleave country-names)
         (apply ordered-map)))

  (defn series [country-data country-config country]
    (let [data   (get country-data country)
          style  (get country-config country)]
      { :x     (map first data)
        :y     (map second data)
        :style { :marker-type :none
                 :line-color  (:color style)
                 :line-style  (:stroke style :solid) }}))

  (defn calc-country-series [country-data country-config]
    (let [country-names (keys country-config)]
      (reduce #(assoc %1 %2 (series country-data country-config %2))
              (ordered-map)
              country-names)))

  (defn render-chart [country-data country-config]
    (xchart/xy-chart
       (calc-country-series country-data country-config)
       { :title        "Covid-19 Incidence (~(str (time/local-date)))"
         :width        chart-width
         :height       chart-height
         :x-axis       { :title "", :date-pattern "MMM-dd" }
         :y-axis       { :title "Cases over ~{sample-days} Days per 100'000" }
         :theme        :matlab
         :legend       { :border-color :white }
         :render-style :line } ))

  (defn create-chart [country-html-data country-config]
    (let [country-names (keys country-config)
          country-populations (map-vals :population country-config)]
      (-> (compute-countries-data country-html-data
                                  country-populations
                                  country-names)
          (render-chart country-config))))

  (defn main []
    ;; scrape up the Covid-19 data from HTML, create a chart, and view the chart
    (let [chart-file    "covid-19.png"
          country-names (keys country-config)
          country-data  (add-population country-config)]
      (-> (load-countries-html-data country-names)
          (create-chart country-data)
          (save-chart chart-file chart-dpi))
      (view chart-file)
      nil))

  (main))
