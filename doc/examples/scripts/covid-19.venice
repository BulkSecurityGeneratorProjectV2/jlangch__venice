 ;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2021 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

;;;; Creates a Covid-19 chart representing Switzerland compared to some other
;;;; countries


(do
  (ns covid-19)

  (load-module :xchart)

  (def country-set-1 [
    "Switzerland"
    "Romania"
    "Austria"
    "Hungary"
    "Germany"
    "Italy"
    "France"
    "Sweden"
    "Greece"
    "Spain"
    "UK"
    "Netherlands"
    "Iceland"
    "Israel" ])

  (def country-set-2 [
    "Gibraltar"
    "Croatia"
    "Portugal"
    "Belgium"
    "Luxembourg"
    "Norway"
    "Finland"
    "Denmark"
    "Ireland"
    "Slovenia"
    "Poland"
    "US"
    "Czech-Republic"
    "Turkey" ])

  (def country-set-3 [
    "India"
    "Australia"
    "China"
    "Russia"
    "Lithuania"
    "Japan"
    "Thailand"
    "Bulgaria"
    "Singapore"
    "New-Zealand"
    "Brazil"
    "Argentina"
    "Colombia"
    "Canada" ])

  ;; the defined styles for the chart series
  (def styles [
    { :color :x-green      }
    { :color :x-blue       }
    { :color :x-purple     }
    { :color :x-orange     }
    { :color :x-red        }
    { :color :x-pink       }
    { :color :x-light-blue }
    { :color :x-dark-gray  }
    { :color :x-dark-pink  }
    { :color :x-dark-green }
    { :color :x-yellow     }
    { :color :x-magenta    }
    { :color :x-black      }
    { :color :x-brown      } ])

  ;; country - iso code mappings
  (def country-iso [
    { :name "Argentina"      :iso "ARG" }
    { :name "Australia"      :iso "AUS" }
    { :name "Austria"        :iso "AUT" }
    { :name "Belgium"        :iso "BEL" }
    { :name "Brazil"         :iso "BRA" }
    { :name "Bulgaria"       :iso "BGR" }
    { :name "Canada"         :iso "CAN" }
    { :name "China"          :iso "CHN" }
    { :name "Colombia"       :iso "COL" }
    { :name "Croatia"        :iso "HRV" }
    { :name "Czech-Republic" :iso "CZE" }
    { :name "Denmark"        :iso "DNK" }
    { :name "Estonia"        :iso "EST" }
    { :name "Finland"        :iso "FIN" }
    { :name "France"         :iso "FRA" }
    { :name "Germany"        :iso "DEU" }
    { :name "Gibraltar"      :iso "GIB" }
    { :name "Greece"         :iso "GRC" }
    { :name "Hungary"        :iso "HUN" }
    { :name "Iceland"        :iso "ISL" }
    { :name "India"          :iso "IND" }
    { :name "Ireland"        :iso "IRL" }
    { :name "Israel"         :iso "ISR" }
    { :name "Italy"          :iso "ITA" }
    { :name "Japan"          :iso "JPN" }
    { :name "Latvia"         :iso "LVA" }
    { :name "Lithuania"      :iso "LTU" }
    { :name "Luxembourg"     :iso "LUX" }
    { :name "Netherlands"    :iso "NLD" }
    { :name "New-Zealand"    :iso "NZL" }
    { :name "Norway"         :iso "NOR" }
    { :name "Poland"         :iso "POL" }
    { :name "Portugal"       :iso "PRT" }
    { :name "Romania"        :iso "ROU" }
    { :name "Russia"         :iso "RUS" }
    { :name "Singapore"      :iso "SGP" }
    { :name "Slovenia"       :iso "SVN" }
    { :name "Spain"          :iso "ESP" }
    { :name "Sweden"         :iso "SWE" }
    { :name "Switzerland"    :iso "CHE" }
    { :name "Thailand"       :iso "THA" }
    { :name "Turkey"         :iso "TUR" }
    { :name "UK"             :iso "GBR" }
    { :name "US"             :iso "USA" } ])


  ;; the interval length in days to calculate the moving average
  (def sample-days 7)

  ;; the start/end date for the cases
  (def start-date (time/local-date 2021 4 1))
  (def end-date nil)

  ;; chart rendering
  (def chart-width 700)
  (def chart-height 500)
  (def chart-dpi 240)

  ;; origin of the corona case data
  (def worldometers-url "https://www.worldometers.info/coronavirus/country/")

  ;; country population REST URL
  (def rest-population-url "https://restcountries.eu/rest/v2/alpha/")

  ;; Covid-19 vaccination data
  ;; https://www.google.com/search?q=schweiz+covid
  ;; https://www.google.com/search?q=schweiz+covid+impfung
  ;; https://ourworldindata.org/covid-vaccinations
  ;; https://github.com/owid/covid-19-data/tree/master/public/data/vaccinations
  (def vaccinations-url "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json")


  ;;; I/O functions ------------------------------------------------------------

  (defn view-chart! [file] (sh/open file))

  (defn save-chart! [chart file dpi]
    (xchart/write-to-file chart :png dpi file)
    file)

  (defn log-process-country! [country-name]
    (println "Processing data for" country-name "..."))

  (defn load-country-html-data! [country-name]
    (let [url (str worldometers-url (str/lower-case country-name) "/")]
      (io/download url :user-agent "Mozilla")))

  (defn load-country-population! [country-iso]
    (let [url (str rest-population-url country-iso)]
      (-<> (io/download url :user-agent "Mozilla")
           (json/read-str <>)
           (get <> "population")
           (long <>))))

  (defn add-country-html-data! [country-data]
    (assoc country-data :html (load-country-html-data! (:name country-data))))

  (defn add-country-population! [country-data]
    (let [p (load-country-population! (:iso country-data))]
      (-> country-data
          (assoc :population p)
          (assoc :population-normalized (/ p 100_000.0)))))

  (defn add-country-vaccination-rate! [country-cfg]
    (let [vac (load-vaccinations country-cfg)]
      (map #(assoc % :vac (get vac (:iso %))) country-cfg)))

  (defn load-vaccinations [country-cfg]
    ;; returns a map with country iso code and vaccinated (all doses) rate
    ;; { "CHE" 54.18 "AUT" 58.97 ... }
    (println "Loading country vaccination data...")
    (let [countries-iso (apply set (map :iso country-cfg))
          format        #(str/format "%.1f%%" %)]
      (->> (io/download vaccinations-url :user-agent "Mozilla")
           (json/read-str)
           (filter #(countries-iso (get % "iso_code")))
           (map #(list (get % "iso_code")
                       (format (get (last (get % "data"))
                                     "people_fully_vaccinated_per_hundred"
                                     0.00))))
           (flatten)
           (apply hash-map))))

  ;;; Extracting, parsing, and aggregating data --------------------------------

  (defn extract-html-daily-cases-section [html]
    ;; extract the daily cases section from HTML page (javascript)
    (->> (str/split-lines html)
         (drop-while #(not (str/contains? % "'graph-cases-daily'" )))
         (take-while #(not (str/contains? % "});" )))
         (rest)
         (butlast)))

  (defn parse-daily-cases-dates [html]
    ;;  """categories: ["Feb 15, 2020","Feb 16, 2020",...,"Aug 29, 2020"]   },"""
    (as-> html <>
          (filter #(str/contains? % "categories: [") <>)
          (first <>)
          (regex/find-all (regex/matcher """["][A-Za-z0-9, ]+["]""" <>))
          (map str/double-unquote <>)
          (map #(time/local-date-parse % "MMM dd, yyyy" :ENGLISH) <>)))

  (defn parse-daily-cases-numbers [html]
    ;; """data: [null,0,0,0,0,0,1,3,4,...,215,186,143,121]   },"""
    (as-> html <>
          (filter #(str/contains? % "data: [") <>)
          (first <>)
          (str/replace-all <> "null" "0")
          (regex/find-all (regex/matcher "\\d+" <>))
          (map long <>)))

  (defn parse-country-cases [html]
    (let [section (extract-html-daily-cases-section html)]
      (map vector (parse-daily-cases-dates section)
                  (parse-daily-cases-numbers section))))

  (defn add-country-cases [country-data]
    (-> country-data
        (assoc :cases (parse-country-cases (:html country-data)))
        (dissoc :html)))

  (defn filter-country-cases-by-date [start end country-data]
    (let [in-period? #(time/within? (first %) start end)]
      (assoc country-data :cases (filter in-period? (:cases country-data)))))

  (defn aggregate-cases [normalized-population cases]
    (->> (partition sample-days 1 cases) ;; create windows of sample-days len
         (map (fn [window]
                (let [date (first (last window))
                      tot  (reduce + (map second window))
                      avg  (/ tot normalized-population)]
                [date (long avg)])))))

  (defn aggregate-country-cases [country-data]
    (->> (:cases country-data)
         (aggregate-cases (:population-normalized country-data))
         (assoc country-data :cases)))

  (defn aggregate-country-data [country-data start end]
    (log-process-country! (:name country-data))
    (->> country-data
         (add-country-population!)
         (add-country-html-data!)
         (add-country-cases)
         (aggregate-country-cases)
         (filter-country-cases-by-date start end)))

  ;;; Chart --------------------------------------------------------------------

  (defn chart-series-country [country-data]
    (let [cases  (:cases country-data)
          style  (:style country-data)]
      { :x     (map (comp time/date first) cases)
        :y     (map second cases)
        :style { :marker-type :none
                 :line-color  (:color style)
                 :line-style  :solid }}))

  (defn chart-series-all-countries [countries-data]
    (let [series-name (fn [data] (str (:name data) " - " (:vac data)))]
    (reduce #(assoc %1 (series-name %2) (chart-series-country %2))
          (ordered-map)
          countries-data)))

  (defn render-chart [countries-data width height sample-days]
    (xchart/xy-chart
       (chart-series-all-countries countries-data)
       { :title        "Covid-19 Incidence (~(str (time/local-date)))"
         :width        width
         :height       height
         :x-axis       { :title "", :date-pattern "MMM-dd" }
         :y-axis       { :title "Cases over ~{sample-days} Days per 100'000" }
         :theme        :matlab
         :legend       { :border-color :white }
         :render-style :line } ))

  (defn build-country-config [countries]
    ;; build a list of maps of {:name "Switzerland" :iso "CHE" :style {:color :x-green} }
    (let [country-map (reduce #(assoc %1 (:name %2) %2) {} country-iso)
          country-part (map #(get country-map %) countries)
          styles-part (map #(hash-map :style %) styles)]
      (map merge country-part styles-part)))

  (defn process [filename countries]
    ;; scrape up the Covid-19 data from HTML, create a chart, and view the chart
    (-<> (build-country-config  countries)
         (add-country-vaccination-rate! <>)
         (map #(aggregate-country-data % start-date end-date) <>)
         (render-chart <> chart-width chart-height sample-days)
         (save-chart! <> filename chart-dpi)
         (view-chart! <>)))


  ;;; Main ---------------------------------------------------------------------

  (process "covid-19_1.png" country-set-1)
  (process "covid-19_2.png" country-set-2))
