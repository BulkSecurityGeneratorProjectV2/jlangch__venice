;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (ns test)

  (load-module :geoip)

  ;; The MaxMind country database.
  (def maxmind-country-zip "resources/geoip-country.zip")

  (def ip-addresses-file "resources/ip-addresses.txt")

  (defn create-resolver []
    ; note: turn memoization off otherwise we just test the ip lookup
    ;       caching
    ; this may take some time
    (println "Parsing MaxMind DB ...")
    (geoip/ip-to-country-resolver maxmind-country-zip :memoize false)))

  (def resolver (create-resolver))

  (def ip-addresses (->> (io/slurp ip-addresses-file :binary false)
                        (str/split-lines)))

  (defn lookup-ip [ip]
    (resolver ip))

  (defn lookup-ip-list [ip-list]
    (map resolver ip-list)
    nil)

  (defn run []
    (lookup-ip-list ip-addresses))

  (when-not (io/exists-file? maxmind-country-zip)
    (throw (. :VncException :new
              (str "The MaxMind country file" maxmind-country-zip "does not exist!"))))

  (when-not *macroexpand-on-load*
    (println """

             -------------------------------------------------------------------
             Warning: macroexpand-on-load is not activated. To get a much better
                      performance activate macroexpand-on-load before loading
                      this script.

                      From the REPL run: !macroexpand
             -------------------------------------------------------------------
             """))

  ; (test/lookup-ip "41.216.186.131")
  ; (perf (test/run) 20 1)
  ; (println (prof :data-formatted))
)
