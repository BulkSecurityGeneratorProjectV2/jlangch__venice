;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (load-module :tomcat-util)
  (load-module :mercator)
  (load-module :geoip)


  (def maxmind-country-zip "resources/geoip-country.zip")

  (def private-ip-addresses
        [ (cidr/parse "10.0.0.0/8")
          (cidr/parse "172.16.0.0/12")
          (cidr/parse "192.168.0.0/16") ])


  (defn private-ip? [ip]
    (any? #(cidr/in-range? ip %) private-ip-addresses))


  (defn format-label [country-iso freq]
    (cond
      (> freq 1000) (str country-iso " " (/ freq 1000) "k")
      :else         (str country-iso " " freq)))


  (defn merge-freq-maps [freq-maps]
    (apply (partial merge-with +) freq-maps))


  (defn merge-ip-locations-by-country [ip-locations]
    ;; ip-locations: list of map with keys :loc :ip :freq :country :country-iso
    ;; group by :country-iso and sum up :freq
    (->> (vals (group-by :country-iso ip-locations))
         (map #(let [sum (apply + (map :freq %))
                     location (dissoc (first %) :ip)]
                 (assoc location :freq sum)))))


  (defn get-mercator-img [mercator-img]
    (if (some? mercator-img)
      mercator-img
      (mercator/load-mercator-image)))


  (defn draw [styles mercator-img format file locations]
    (let [img (get-mercator-img mercator-img)]
      (-> img
          (mercator/draw-locations locations styles)
          (mercator/crop-image 400 600)
          (mercator/save-image format file))))


  (defn parse-ip [log]
    (->> (tc-util/simple-ipaddr-access-log-entry-parser)
         (tc-util/parse-access-log log)
         (map :ip)
         (filter #(not (private-ip? %)))
         (frequencies)))


  (defn parse-zip-logs [log-file]
    (->> (io/zip-list-entry-names log-file)
         (map #(parse-ip (io/unzip log-file %)))))


  (defn parse-log-file [log-file]
    (println "Parsing" log-file "...")
    (if (io/file-ext? log-file "zip")
      (parse-zip-logs log-file)
      (parse-ip log-file)))


  (defn parse-log-files [log-files]
    ;; returns an aggregated map with IP frequencies:
    ;;    { "196.52.43.56" 3 "178.197.226.244" 8 }
    (merge-freq-maps (flatten (map parse-log-file log-files))))


  (defn map-to-location [ip-freq ip-loc-resolver]
    (let [ip (key ip-freq)
          data (ip-loc-resolver ip)]
      { :loc (geoip/map-location-to-numerics (:loc data))
        :ip ip
        :freq (val ip-freq)
        :country (:country-name data)
        :country-iso (:country-iso data) } ))


  (defn create-map [styles mercator-img ip-freq-map ip-loc-resolver out-file]
    (->> (entries ip-freq-map)
         (map #(map-to-location % ip-loc-resolver))
         (merge-ip-locations-by-country)
         (map #(let [[lat lon] (:loc %)
                     country (:country-iso %)
                     frequency (:freq %)
                     label (format-label country frequency)]
                 [lat lon {:label label :font-size-px 14}]))
         (draw styles mercator-img :png out-file)))


  (defn create-ip-loc-resolver []
    ; this may take some time
    (when (io/exists-file? maxmind-country-zip)
      (println "Parsing MaxMind country DB...")
      (geoip/ip-to-country-loc-resolver
                     maxmind-country-zip
                     (geoip/download-google-country-db))))


  (def ip-loc-rv nil)


  (defn process [styles mercator-img out-file log-files]
    (if (io/exists-file? maxmind-country-zip)
      (do
        (when (nil? ip-loc-rv)
          (def ip-loc-rv (create-ip-loc-resolver)))
        (println "Processing log files...")
        (-<> (map io/file log-files)
             (parse-log-files <>)
             (create-map styles mercator-img <> ip-loc-rv out-file)))
      (do
        (println "The MaxMind country file" maxmind-country-zip " does not exist!")
        (println "Please download it:")
        (println "    (download-maxmind-db -your-maxmind-lic-key-)"))))


  (defn load-image [file]
    (mercator/load-image file))


  (defn download-maxmind-db [lic-key]
    (io/mkdirs (io/file-parent maxmind-country-zip))
    (geoip/download-maxmind-db-to-zipfile
      (io/file maxmind-country-zip) :country lic-key))


  (defn run-custom [styles mercator-img out-file & log-files]
    (process styles mercator-img out-file log-files))


  (defn run [out-file & log-files]
    (process nil nil out-file log-files))


  (println """
           Actions:
              [1] (run "./ip-map.png"
                       "resources/localhost_access_log.2019-12.zip")
              [2] (run "./ip-map.png"
                       "resources/localhost_access_log.2019-12-01.log")
              [3] (apply (partial run "./ip-map.png")
                         (io/list-files-glob "resources"
                                             "localhost_access_log.*.log"))
              [4] (run-custom
                        ;; colors are specified as RGBA vectors
                        { :marker { :fill-color [255 128 128 255]
                                    :border-color [255 0 0 255]
                                    :label-color [131 52 235 255]
                                    :radius 10
                                    :font-size-px 14 } }
                        (load-image "resources/mercator-2.png")
                        "./ip-map.png"
                        "resources/localhost_access_log.2019-12.zip")
              [5] (download-maxmind-db -your-maxmind-lic-key-)
           """)

  (when (false? *macroexpand-on-load*)
    (println """

             -------------------------------------------------------------------
             Warning: macroexpand-on-load is not activated. To get a much better
                      performance activate macroexpand-on-load before loading
                      this script.

                      From the REPL run: !macroexpand
             -------------------------------------------------------------------
             """)))
