;;;;   __    __         _
;;;;   \ \  / /__ _ __ (_) ___ ___
;;;;    \ \/ / _ \ '_ \| |/ __/ _ \
;;;;     \  /  __/ | | | | (_|  __/
;;;;      \/ \___|_| |_|_|\___\___|
;;;;
;;;;
;;;; Copyright 2017-2020 Venice
;;;;
;;;; Licensed under the Apache License, Version 2.0 (the "License");
;;;; you may not use this file except in compliance with the License.
;;;; You may obtain a copy of the License at
;;;;
;;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;;
;;;; Unless required by applicable law or agreed to in writing, software
;;;; distributed under the License is distributed on an "AS IS" BASIS,
;;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;;; See the License for the specific language governing permissions and
;;;; limitations under the License.

(do
  (load-module :tomcat-util)
  (load-module :mercator)
  (load-module :geoip)


  (def private-ip-addresses
        [ (cidr/parse "10.0.0.0/8")
          (cidr/parse "172.16.0.0/12")
          (cidr/parse "192.168.0.0/16") ])


  (defn private-ip? [ip]
    (any? #(cidr/in-range? ip %) private-ip-addresses))

  (defn format-label [country-iso freq]
    (cond
      (> freq 1000) (str country-iso " " (/ freq 1000) "k")
      :else         (str country-iso " " freq)))

  (defn draw [format file locations]
    (-> (mercator/load-mercator-image)
        (mercator/draw-locations locations)
        (mercator/crop-image 400 600)
        (mercator/save-image format file)))

  (defn parse-ip [log]
    (->> (tc-util/simple-ipaddr-access-log-entry-parser)
         (tc-util/parse-access-log log)
         (map :ip)
         (frequencies)))

  (defn parse-logs [zip]
    ;; returns a map with IP frequencies: { "196.52.43.56" 3 "178.197.226.244" 8 }
    (apply (partial merge-with +)
           (->> (io/zip-list-entry-names zip)
                (map #(parse-ip (io/unzip zip %))))))

  (defn map-to-location [ip-freq]
    (let [ip (key ip-freq) data (rv ip)]
      { :loc (geoip/map-location-to-numerics (:loc data))
        :ip ip
        :freq (val ip-freq)
        :country (:country-name data)
        :country-iso (:country-iso data) } ))

  (defn create-map [ip-freq-map]
    (->> (entries ip-freq-map)
         (map map-to-location)
         (filter #(not (private-ip? (:ip %))))
         (reduce (fn [x y]
                  (let [country (:country-iso y)
                        r (get x country)]
                    (if (nil? r)
                      (assoc x country y)
                      (let [freq (+ (:freq r) (:freq y))]
                        (assoc x country (assoc r :freq freq)))))) {} )
         (vals)
         (map (fn [x] [ (first (:loc x))
                        (second (:loc x))
                        {:label (format-label (:country-iso x) (:freq x))
                         :font-size-px 14}]))
         (draw :png "./ip-map.png")))

  (def rv (geoip/ip-to-country-loc-resolver
                   "resources/geoip-country.zip"
                   (geoip/download-google-country-db)))

  (-> (io/file "resources/localhost_access_log.2019-12.zip")
      (parse-logs)
      (create-map))
)
