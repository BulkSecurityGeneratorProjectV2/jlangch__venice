/*   __    __         _
 *   \ \  / /__ _ __ (_) ___ ___ 
 *    \ \/ / _ \ '_ \| |/ __/ _ \
 *     \  /  __/ | | | | (_|  __/
 *      \/ \___|_| |_|_|\___\___|
 *
 *
 * Copyright 2017-2020 Venice
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// -----------------------------------------------------------------------------
// Build commands
//
//   - Build the Venice jar
//     $> ./gradlew shadowJar
//     $> ./gradlew --warning-mode all clean shadowJar
//
//   - Build the Venice cheatsheet (HTML & PDF)
//     $> ./gradlew cheatsheet
//
//   - Build the Venice bundle for uploading to Maven
//     $> ./gradlew bundle
//
//   - Run the unit tests
//     $> ./gradlew test
//
//   - Micro benchmarks
//     $> ./gradlew jmh -Pinclude=".*PrecompileBenchmark"
//     $> ./gradlew -Dorg.gradle.java.home=${JAVA_11_ZULU_HOME} jmh -Pinclude=".*PrecompileBenchmark" -PjvmArgs="-XX:+UseParallelGC"
//     $> ./gradlew jmh -Pinclude=".*PrecompileBenchmark" -PjvmArgs="-XX:+PrintCompilation -XX:CompileThreshold=1000"
// -----------------------------------------------------------------------------
// Modify the Venice version:
//   - gradle.properties
//   - pom.xml
//   - doc/readme/build-dependencies.md
//   - doc/maven-central.svg
//   
// Upgrade Gradle wrapper
//   See https://docs.gradle.org/current/userguide/gradle_wrapper.html
//   Upgrade:
//      $> ./gradlew wrapper --gradle-version=6.0.1
//
// Get initial Gradle wrapper
//   See https://guides.gradle.org/creating-new-gradle-builds/
//
//   Create and init a gradle project:
//      $> mkdir test
//      $> cd test
//      $> gradle init
// -----------------------------------------------------------------------------

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs += "-parameters"
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs += "-parameters"
}

repositories {
    jcenter()
}

sourceSets {
    jmh {
    	java.srcDirs = ['src/jmh/java']
    }
    
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
            exclude 'com/github/jlangch/venice/fonts/OpenSans-*.ttf'
            exclude 'com/github/jlangch/venice/fonts/SourceCodePro-*.ttf'
        }
    }
}

test {
    useJUnitPlatform {
    }
}

jar {
}

shadowJar {
    // https://github.com/johnrengelman/shadow/

    relocate 'io.vavr', 'org.repackage.io.vavr'
    relocate 'org.jline', 'org.repackage.org.jline'

    def buildTimestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss")
        
    manifest {
        attributes 'Main-Class':             'com.github.jlangch.venice.Launcher',
                   'Build-Date':             buildTimestamp,
                   'Implementation-Vendor':  'com.github.jlangch',
                   'Implementation-Title':   'Venice',
                   'Implementation-Version': "${project.version}"
    }
    
    archiveFileName = "venice-${project.version}.jar"
}

task cheatsheet(type: JavaExec, dependsOn: compileJava) {
    description="Generate cheatsheet"

    main = 'com.github.jlangch.venice.impl.docgen.DocGenerator'
    
    classpath { 
      [ sourceSets.main.runtimeClasspath,
        sourceSets.main.compileClasspath,
        "src/main/resources" ]
    }
    
    // add more stack space to prevent StackOverflowError at
    // java.util.regex.Pattern$CharProperty$1.isSatisfiedBy(...)   
    jvmArgs(["-Xss4096k"])
 }

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    
    archiveFileName = "venice-${project.version}-sources.jar"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    
    archiveFileName = "venice-${project.version}-javadoc.jar"
}

task bundle(type: Exec, dependsOn: [clean, shadowJar, sourcesJar, javadocJar]) {
    workingDir 'build/libs'
    
    commandLine "/bin/sh", 
                "-c", 
                "cp ../../pom.xml ." + 
                  "; echo 'Signing artifacts...'" +
                  "; gpg2 -ab pom.xml" +
                  "; gpg2 -ab venice-${project.version}-javadoc.jar" +
                  "; gpg2 -ab venice-${project.version}-sources.jar" +
                  "; gpg2 -ab venice-${project.version}.jar" +
                  "; echo 'Bundling artifacts...'" +
                  "; jar -cvf bundle.jar" +
                         " pom.xml pom.xml.asc" +
                         " venice-${project.version}-javadoc.jar venice-${project.version}-javadoc.jar.asc" +
                         " venice-${project.version}-sources.jar venice-${project.version}-sources.jar.asc" +
                         " venice-${project.version}.jar venice-${version}.jar.asc" +
                  "; echo 'Bundling done.'"
}

task ('jmhHelp', description:'Print help for the jmh task') {
	doLast {  
		println ""
		println "Usage of jmh tasks:"
		println ""
		
		println "Only execute specific benchmark(s):"
		println "\t./gradlew jmh -Pinclude=\".*MyBenchmark.*\""
		
		println ""
		println "Specify extra profilers:"
		println "\t./gradlew jmh -Pprofilers=\"gc,stack\""
		
		println ""
		println "Prominent profilers (for full list call jmhProfilers task):"
		println "\tcomp - JitCompilations, tune your iterations"
		println "\tstack - which methods used most time"
		println "\tgc - print garbage collection stats"
		println "\ths_thr - thread usage"
		
		println ""
		println "Change report format from JSON to one of [CSV, JSON, NONE, SCSV, TEXT]:"
		println "\t./gradlew jmh -Pformat=csv"
		
		println ""
		println "Specify JVM arguments:"
		println "\t./gradlew jmh -PjvmArgs=\"-Dtest.cluster=local\""
		
		println ""
		println "Run in verification mode (execute benchmarks with minimum of fork/warmup-/benchmark-iterations):"
		println "\tgw jmh -Pverify"
		
		println ""
		println "Resources:"
		println "\thttp://tutorials.jenkov.com/java-performance/jmh.html (Introduction)"
		println "\thttp://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ (Samples)"
	}       
}

task jmhProfilers(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'Development') {
	classpath = sourceSets.jmh.runtimeClasspath
	main = 'org.openjdk.jmh.Main'
	args '-lprof'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
	classpath = sourceSets.jmh.runtimeClasspath
	main = 'org.openjdk.jmh.Main'

	def include = project.properties.get('include', '');
	def exclude = project.properties.get('exclude');
	def format = project.properties.get('format', 'json');
	def profilers = project.properties.get('profilers');
	def jvmArgs = project.properties.get('jvmArgs')
	def verify =  project.properties.get('verify');

	def resultFile = file("build/reports/jmh/result.${format}")
	
	args include
	if (exclude) {
		args '-e', exclude
	}
	if (verify != null) { // execute benchmarks with the minimum amount of execution (only to check if they are working)
		println ">> Running in verify mode"
		args '-f' , 1
		args '-wi' , 1
		args '-i' , 1
	}
	args '-foe', 'true'   //fail-on-error
	args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
	if (profilers) {
		profilers.split(',').each {
			args '-prof', it
		}
	}
	args '-jvmArgsPrepend', '-Xmx3072m'
	args '-jvmArgsPrepend', '-Xms3072m'
	if (jvmArgs) {
		for (jvmArg in jvmArgs.split(' ')) {
			args '-jvmArgsPrepend', jvmArg
		}
	}
	args '-rf', format
	args '-rff', resultFile
	
	doFirst {
		println "\nExecuting JMH with: $args \n"
		resultFile.parentFile.mkdirs()
	}
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    // JMH (the Java Microbenchmark Harness) has been added to the JDK 
    // starting with JDK 12; for earlier versions, the dependencies 
	// have to be added explicitly.
	jmhImplementation project
	jmhImplementation 'io.vavr:vavr:0.10.2'
	jmhImplementation 'org.openjdk.jmh:jmh-core:1.23'
	jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.23'

    // unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.1'
    testRuntimeOnly 'org.xhtmlrenderer:flying-saucer-core:9.1.19'
    testRuntimeOnly 'org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.19'
    testRuntimeOnly 'com.github.librepdf:openpdf:1.3.11'

    // required for cheatsheet generation
    compileOnly 'org.xhtmlrenderer:flying-saucer-core:9.1.19'
    compileOnly 'org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.19'
    compileOnly 'com.github.librepdf:openpdf:1.3.11'

    // WebApp support
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
 
    // runtime dependencies (repackaged)
    implementation 'io.vavr:vavr:0.10.2'
    implementation 'org.jline:jline:3.13.3'
}
